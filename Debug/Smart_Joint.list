
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08010e00  08010e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011198  08011198  00013064  2**0
                  CONTENTS
  4 .ARM          00000008  08011198  08011198  00012198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111a0  080111a0  00013064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111a0  080111a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111a4  080111a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080111a8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007898  20000068  0801120c  00013068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007900  0801120c  00013900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000345a6  00000000  00000000  00013094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000591e  00000000  00000000  0004763a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bd0  00000000  00000000  0004cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000221a  00000000  00000000  0004fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000303b9  00000000  00000000  00051d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003345f  00000000  00000000  000820fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001238fc  00000000  00000000  000b555a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d8e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c1dc  00000000  00000000  001d8e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001e5078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010de8 	.word	0x08010de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08010de8 	.word	0x08010de8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005c0:	d11a      	bne.n	80005f8 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	005a      	lsls	r2, r3, #1
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	085b      	lsrs	r3, r3, #1
 80005ca:	441a      	add	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 80005f6:	e00a      	b.n	800060e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	085a      	lsrs	r2, r3, #1
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	441a      	add	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	60da      	str	r2, [r3, #12]
}
 800060e:	bf00      	nop
 8000610:	371c      	adds	r7, #28
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000622:	23f0      	movs	r3, #240	@ 0xf0
 8000624:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000628:	681c      	ldr	r4, [r3, #0]
 800062a:	f00b f97d 	bl	800b928 <HAL_RCC_GetPCLK2Freq>
 800062e:	4601      	mov	r1, r0
 8000630:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000634:	2200      	movs	r2, #0
 8000636:	4620      	mov	r0, r4
 8000638:	f7ff ffb8 	bl	80005ac <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800063c:	1df9      	adds	r1, r7, #7
 800063e:	2364      	movs	r3, #100	@ 0x64
 8000640:	2201      	movs	r2, #1
 8000642:	4813      	ldr	r0, [pc, #76]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000644:	f00e ffd4 	bl	800f5f0 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000648:	1df9      	adds	r1, r7, #7
 800064a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064e:	2201      	movs	r2, #1
 8000650:	480f      	ldr	r0, [pc, #60]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000652:	f00f f856 	bl	800f702 <HAL_UART_Receive>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <Temp_Sensor_Init+0x44>
		while(1);
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <Temp_Sensor_Init+0x74>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	f00b f960 	bl	800b928 <HAL_RCC_GetPCLK2Freq>
 8000668:	4601      	mov	r1, r0
 800066a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800066e:	2200      	movs	r2, #0
 8000670:	4620      	mov	r0, r4
 8000672:	f7ff ff9b 	bl	80005ac <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2bf0      	cmp	r3, #240	@ 0xf0
 800067a:	d101      	bne.n	8000680 <Temp_Sensor_Init+0x64>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000680:	20cc      	movs	r0, #204	@ 0xcc
 8000682:	f000 f807 	bl	8000694 <Temp_Sensor_Write>
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	bf00      	nop
 8000690:	20000414 	.word	0x20000414

08000694 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e017      	b.n	80006d4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	fa42 f303 	asr.w	r3, r2, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d006      	beq.n	80006c2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4413      	add	r3, r2
 80006bc:	22ff      	movs	r2, #255	@ 0xff
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e005      	b.n	80006ce <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	dde4      	ble.n	80006a4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006da:	f107 010c 	add.w	r1, r7, #12
 80006de:	2364      	movs	r3, #100	@ 0x64
 80006e0:	2208      	movs	r2, #8
 80006e2:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <Temp_Sensor_Write+0x5c>)
 80006e4:	f00e ff84 	bl	800f5f0 <HAL_UART_Transmit>
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000414 	.word	0x20000414

080006f4 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	e00e      	b.n	8000722 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	085b      	lsrs	r3, r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800070a:	f000 f813 	bl	8000734 <Temp_Sensor_ReadBit>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	3301      	adds	r3, #1
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d9ed      	bls.n	8000704 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000728:	79fb      	ldrb	r3, [r7, #7]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800073a:	23ff      	movs	r3, #255	@ 0xff
 800073c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800073e:	1df9      	adds	r1, r7, #7
 8000740:	2301      	movs	r3, #1
 8000742:	2201      	movs	r2, #1
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <Temp_Sensor_ReadBit+0x34>)
 8000746:	f00e ff53 	bl	800f5f0 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800074a:	1db9      	adds	r1, r7, #6
 800074c:	2301      	movs	r3, #1
 800074e:	2201      	movs	r2, #1
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <Temp_Sensor_ReadBit+0x34>)
 8000752:	f00e ffd6 	bl	800f702 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000049c 	.word	0x2000049c

0800076c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	80bb      	strh	r3, [r7, #4]

	Temp_Sensor_Init();
 800077e:	f7ff ff4d 	bl	800061c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000782:	20cc      	movs	r0, #204	@ 0xcc
 8000784:	f7ff ff86 	bl	8000694 <Temp_Sensor_Write>
	Temp_Sensor_Write(0x44);  // convert t
 8000788:	2044      	movs	r0, #68	@ 0x44
 800078a:	f7ff ff83 	bl	8000694 <Temp_Sensor_Write>

	Temp_Sensor_Init();
 800078e:	f7ff ff45 	bl	800061c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000792:	20cc      	movs	r0, #204	@ 0xcc
 8000794:	f7ff ff7e 	bl	8000694 <Temp_Sensor_Write>
	Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000798:	20be      	movs	r0, #190	@ 0xbe
 800079a:	f7ff ff7b 	bl	8000694 <Temp_Sensor_Write>

	Temp_LSB = Temp_Sensor_ReadByte();
 800079e:	f7ff ffa9 	bl	80006f4 <Temp_Sensor_ReadByte>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	Temp_MSB = Temp_Sensor_ReadByte();
 80007a6:	f7ff ffa5 	bl	80006f4 <Temp_Sensor_ReadByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	71bb      	strb	r3, [r7, #6]

	Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21b      	sxth	r3, r3
 80007be:	80bb      	strh	r3, [r7, #4]

	return Temp;
 80007c0:	88bb      	ldrh	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 80007d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 f879 	bl	80008d0 <INA3221_write_reg>

	HAL_Delay(100);
 80007de:	2064      	movs	r0, #100	@ 0x64
 80007e0:	f006 feb0 	bl	8007544 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 80007e4:	1dbb      	adds	r3, r7, #6
 80007e6:	4619      	mov	r1, r3
 80007e8:	20fe      	movs	r0, #254	@ 0xfe
 80007ea:	f000 f83b 	bl	8000864 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f245 4249 	movw	r2, #21577	@ 0x5449
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d001      	beq.n	80007fc <INA3221_Init+0x32>
		while(1);
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH£ Enabled, 512 AVG, 1.1ms conv time, continous mode
 80007fc:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f865 	bl	80008d0 <INA3221_write_reg>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4619      	mov	r1, r3
 800081a:	2002      	movs	r0, #2
 800081c:	f000 f822 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3302      	adds	r3, #2
 8000824:	4619      	mov	r1, r3
 8000826:	2004      	movs	r0, #4
 8000828:	f000 f81c 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4619      	mov	r1, r3
 8000832:	2006      	movs	r0, #6
 8000834:	f000 f816 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3306      	adds	r3, #6
 800083c:	4619      	mov	r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f810 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3308      	adds	r3, #8
 8000848:	4619      	mov	r1, r3
 800084a:	2003      	movs	r0, #3
 800084c:	f000 f80a 	bl	8000864 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	330a      	adds	r3, #10
 8000854:	4619      	mov	r1, r3
 8000856:	2005      	movs	r0, #5
 8000858:	f000 f804 	bl	8000864 <INA3221_read_reg>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8000876:	2300      	movs	r3, #0
 8000878:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	2364      	movs	r3, #100	@ 0x64
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	4811      	ldr	r0, [pc, #68]	@ (80008cc <INA3221_read_reg+0x68>)
 8000886:	f009 f8b3 	bl	80099f0 <HAL_I2C_Master_Transmit>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d118      	bne.n	80008c2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  (INA3221_ADDR_0 << 1) | 0x1, data, 2, 100) == HAL_OK)
 8000890:	f107 0208 	add.w	r2, r7, #8
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2302      	movs	r3, #2
 800089a:	2181      	movs	r1, #129	@ 0x81
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <INA3221_read_reg+0x68>)
 800089e:	f009 f9bf 	bl	8009c20 <HAL_I2C_Master_Receive>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d10c      	bne.n	80008c2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008ac:	7a3b      	ldrb	r3, [r7, #8]
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	7a7b      	ldrb	r3, [r7, #9]
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	b29a      	uxth	r2, r3
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000160 	.word	0x20000160

080008d0 <INA3221_write_reg>:

int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80008e6:	2300      	movs	r3, #0
 80008e8:	813b      	strh	r3, [r7, #8]

	data[0] = (wdata >> 8);
 80008ea:	88bb      	ldrh	r3, [r7, #4]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	723b      	strb	r3, [r7, #8]
	data[1] = (wdata & 0xFF);
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	2364      	movs	r3, #100	@ 0x64
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	2180      	movs	r1, #128	@ 0x80
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <INA3221_write_reg+0x68>)
 8000906:	f009 f873 	bl	80099f0 <HAL_I2C_Master_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10d      	bne.n	800092c <INA3221_write_reg+0x5c>
	{

		if(HAL_I2C_Master_Transmit(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 8000910:	f107 0208 	add.w	r2, r7, #8
 8000914:	2364      	movs	r3, #100	@ 0x64
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2302      	movs	r3, #2
 800091a:	2180      	movs	r1, #128	@ 0x80
 800091c:	4806      	ldr	r0, [pc, #24]	@ (8000938 <INA3221_write_reg+0x68>)
 800091e:	f009 f867 	bl	80099f0 <HAL_I2C_Master_Transmit>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <INA3221_write_reg+0x5c>
		{
			result = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 800092c:	68fb      	ldr	r3, [r7, #12]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000160 	.word	0x20000160

0800093c <LTE_Init>:
#include <string.h>
#include <stdlib.h>

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void LTE_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000942:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000944:	4995      	ldr	r1, [pc, #596]	@ (8000b9c <LTE_Init+0x260>)
 8000946:	4896      	ldr	r0, [pc, #600]	@ (8000ba0 <LTE_Init+0x264>)
 8000948:	f00f fd7a 	bl	8010440 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 800094c:	4993      	ldr	r1, [pc, #588]	@ (8000b9c <LTE_Init+0x260>)
 800094e:	4895      	ldr	r0, [pc, #596]	@ (8000ba4 <LTE_Init+0x268>)
 8000950:	f00f fd76 	bl	8010440 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000954:	4991      	ldr	r1, [pc, #580]	@ (8000b9c <LTE_Init+0x260>)
 8000956:	4894      	ldr	r0, [pc, #592]	@ (8000ba8 <LTE_Init+0x26c>)
 8000958:	f00f fd72 	bl	8010440 <siprintf>
	sprintf(sys.MQTT.port, "a");
 800095c:	498f      	ldr	r1, [pc, #572]	@ (8000b9c <LTE_Init+0x260>)
 800095e:	4893      	ldr	r0, [pc, #588]	@ (8000bac <LTE_Init+0x270>)
 8000960:	f00f fd6e 	bl	8010440 <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000964:	498d      	ldr	r1, [pc, #564]	@ (8000b9c <LTE_Init+0x260>)
 8000966:	4892      	ldr	r0, [pc, #584]	@ (8000bb0 <LTE_Init+0x274>)
 8000968:	f00f fd6a 	bl	8010440 <siprintf>
	sprintf(sys.MQTT.password, "a");
 800096c:	498b      	ldr	r1, [pc, #556]	@ (8000b9c <LTE_Init+0x260>)
 800096e:	4891      	ldr	r0, [pc, #580]	@ (8000bb4 <LTE_Init+0x278>)
 8000970:	f00f fd66 	bl	8010440 <siprintf>
	sprintf(sys.MQTT.topic, "a");
 8000974:	4989      	ldr	r1, [pc, #548]	@ (8000b9c <LTE_Init+0x260>)
 8000976:	4890      	ldr	r0, [pc, #576]	@ (8000bb8 <LTE_Init+0x27c>)
 8000978:	f00f fd62 	bl	8010440 <siprintf>

	LTE_Power_On();
 800097c:	f000 f94c 	bl	8000c18 <LTE_Power_On>
	HAL_Delay(5000);
 8000980:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000984:	f006 fdde 	bl	8007544 <HAL_Delay>

	LTE_Send_Command("AT+IPR=921600\r");                                                          //baudrate a 921600
 8000988:	488c      	ldr	r0, [pc, #560]	@ (8000bbc <LTE_Init+0x280>)
 800098a:	f000 f95b 	bl	8000c44 <LTE_Send_Command>
	huart1.Init.BaudRate = 921600;
 800098e:	4b8c      	ldr	r3, [pc, #560]	@ (8000bc0 <LTE_Init+0x284>)
 8000990:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000994:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000996:	488a      	ldr	r0, [pc, #552]	@ (8000bc0 <LTE_Init+0x284>)
 8000998:	f00e fd86 	bl	800f4a8 <HAL_UART_Init>
	LTE_Send_Command("AT+IFC=0,0\r");                                                             //no flow control
 800099c:	4889      	ldr	r0, [pc, #548]	@ (8000bc4 <LTE_Init+0x288>)
 800099e:	f000 f951 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+CFUN=1\r");                                                              //full functionality
 80009a2:	4889      	ldr	r0, [pc, #548]	@ (8000bc8 <LTE_Init+0x28c>)
 80009a4:	f000 f94e 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+CNMP=38\r");                                                             //modalità solo LTE o NB-IoT
 80009a8:	4888      	ldr	r0, [pc, #544]	@ (8000bcc <LTE_Init+0x290>)
 80009aa:	f000 f94b 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 80009ae:	4888      	ldr	r0, [pc, #544]	@ (8000bd0 <LTE_Init+0x294>)
 80009b0:	f000 f948 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+NBSC=1\r");                                                              //abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 80009b4:	4887      	ldr	r0, [pc, #540]	@ (8000bd4 <LTE_Init+0x298>)
 80009b6:	f000 f945 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+CEREG?\r");                                                              //controllo registrazione alla rete
 80009ba:	4887      	ldr	r0, [pc, #540]	@ (8000bd8 <LTE_Init+0x29c>)
 80009bc:	f000 f942 	bl	8000c44 <LTE_Send_Command>
	LTE_Receive_Response(response);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f954 	bl	8000c70 <LTE_Receive_Response>
	int stat = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
	if(strstr(response, "+CEREG: ") != NULL)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4982      	ldr	r1, [pc, #520]	@ (8000bdc <LTE_Init+0x2a0>)
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00f fd7b 	bl	80104ce <strstr>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d021      	beq.n	8000a22 <LTE_Init+0xe6>
	{
		while(stat != 1)
 80009de:	e01c      	b.n	8000a1a <LTE_Init+0xde>
		{
			if((response[10] == '1') || (response[10] == '5'))
 80009e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80009e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80009e8:	7a9b      	ldrb	r3, [r3, #10]
 80009ea:	2b31      	cmp	r3, #49	@ 0x31
 80009ec:	d006      	beq.n	80009fc <LTE_Init+0xc0>
 80009ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80009f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80009f6:	7a9b      	ldrb	r3, [r3, #10]
 80009f8:	2b35      	cmp	r3, #53	@ 0x35
 80009fa:	d103      	bne.n	8000a04 <LTE_Init+0xc8>
			{
				stat = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000a02:	e00a      	b.n	8000a1a <LTE_Init+0xde>
			}
			else
			{
				LTE_Send_Command("AT+CEREG?\r");
 8000a04:	4874      	ldr	r0, [pc, #464]	@ (8000bd8 <LTE_Init+0x29c>)
 8000a06:	f000 f91d 	bl	8000c44 <LTE_Send_Command>
				LTE_Receive_Response(response);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f92f 	bl	8000c70 <LTE_Receive_Response>
				HAL_Delay(1000);
 8000a12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a16:	f006 fd95 	bl	8007544 <HAL_Delay>
		while(stat != 1)
 8000a1a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d1de      	bne.n	80009e0 <LTE_Init+0xa4>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //configurazione APN
 8000a22:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000a26:	4a5e      	ldr	r2, [pc, #376]	@ (8000ba0 <LTE_Init+0x264>)
 8000a28:	496d      	ldr	r1, [pc, #436]	@ (8000be0 <LTE_Init+0x2a4>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00f fd08 	bl	8010440 <siprintf>
	LTE_Send_Command(command);
 8000a30:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f905 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+CNACT=1\r");                                                             //attivazione della rete
 8000a3a:	486a      	ldr	r0, [pc, #424]	@ (8000be4 <LTE_Init+0x2a8>)
 8000a3c:	f000 f902 	bl	8000c44 <LTE_Send_Command>
	LTE_Receive_Response(response);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f914 	bl	8000c70 <LTE_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4967      	ldr	r1, [pc, #412]	@ (8000be8 <LTE_Init+0x2ac>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00f fd3e 	bl	80104ce <strstr>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d113      	bne.n	8000a80 <LTE_Init+0x144>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000a58:	e00a      	b.n	8000a70 <LTE_Init+0x134>
		{
			LTE_Send_Command("AT+CNACT=1\r");
 8000a5a:	4862      	ldr	r0, [pc, #392]	@ (8000be4 <LTE_Init+0x2a8>)
 8000a5c:	f000 f8f2 	bl	8000c44 <LTE_Send_Command>
			LTE_Receive_Response(response);
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f904 	bl	8000c70 <LTE_Receive_Response>
			HAL_Delay(1000);
 8000a68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a6c:	f006 fd6a 	bl	8007544 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	495d      	ldr	r1, [pc, #372]	@ (8000be8 <LTE_Init+0x2ac>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00f fd2a 	bl	80104ce <strstr>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0ec      	beq.n	8000a5a <LTE_Init+0x11e>
		}
	}

	LTE_Send_Command("AT+CNACT?\r");                                                              //verifica indirizzo IP
 8000a80:	485a      	ldr	r0, [pc, #360]	@ (8000bec <LTE_Init+0x2b0>)
 8000a82:	f000 f8df 	bl	8000c44 <LTE_Send_Command>
	LTE_Receive_Response(response);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f8f1 	bl	8000c70 <LTE_Receive_Response>
	if(strstr(response, "+CNACT: 1,") == NULL)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4957      	ldr	r1, [pc, #348]	@ (8000bf0 <LTE_Init+0x2b4>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00f fd1b 	bl	80104ce <strstr>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d113      	bne.n	8000ac6 <LTE_Init+0x18a>
	{
		while(strstr(response, "+CNACT: 1,") == NULL)
 8000a9e:	e00a      	b.n	8000ab6 <LTE_Init+0x17a>
		{
			LTE_Send_Command("AT+CNACT?\r");
 8000aa0:	4852      	ldr	r0, [pc, #328]	@ (8000bec <LTE_Init+0x2b0>)
 8000aa2:	f000 f8cf 	bl	8000c44 <LTE_Send_Command>
			LTE_Receive_Response(response);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f8e1 	bl	8000c70 <LTE_Receive_Response>
			HAL_Delay(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab2:	f006 fd47 	bl	8007544 <HAL_Delay>
		while(strstr(response, "+CNACT: 1,") == NULL)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	494d      	ldr	r1, [pc, #308]	@ (8000bf0 <LTE_Init+0x2b4>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00f fd07 	bl	80104ce <strstr>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0ec      	beq.n	8000aa0 <LTE_Init+0x164>
		}
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //configurazione MQTT
 8000ac6:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8000aca:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <LTE_Init+0x270>)
 8000acc:	4a36      	ldr	r2, [pc, #216]	@ (8000ba8 <LTE_Init+0x26c>)
 8000ace:	4949      	ldr	r1, [pc, #292]	@ (8000bf4 <LTE_Init+0x2b8>)
 8000ad0:	f00f fcb6 	bl	8010440 <siprintf>
	LTE_Send_Command(command);
 8000ad4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f8b3 	bl	8000c44 <LTE_Send_Command>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000ade:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ae2:	4a30      	ldr	r2, [pc, #192]	@ (8000ba4 <LTE_Init+0x268>)
 8000ae4:	4944      	ldr	r1, [pc, #272]	@ (8000bf8 <LTE_Init+0x2bc>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00f fcaa 	bl	8010440 <siprintf>
	LTE_Send_Command(command);
 8000aec:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f8a7 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000af6:	4841      	ldr	r0, [pc, #260]	@ (8000bfc <LTE_Init+0x2c0>)
 8000af8:	f000 f8a4 	bl	8000c44 <LTE_Send_Command>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000afc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000b00:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb0 <LTE_Init+0x274>)
 8000b02:	493f      	ldr	r1, [pc, #252]	@ (8000c00 <LTE_Init+0x2c4>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00f fc9b 	bl	8010440 <siprintf>
	LTE_Send_Command(command);
 8000b0a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f898 	bl	8000c44 <LTE_Send_Command>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000b14:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000b18:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <LTE_Init+0x278>)
 8000b1a:	493a      	ldr	r1, [pc, #232]	@ (8000c04 <LTE_Init+0x2c8>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00f fc8f 	bl	8010440 <siprintf>
	LTE_Send_Command(command);
 8000b22:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f88c 	bl	8000c44 <LTE_Send_Command>

	LTE_Send_Command("AT+SMCONN\r");                                                              //connessione al server MQTT
 8000b2c:	4836      	ldr	r0, [pc, #216]	@ (8000c08 <LTE_Init+0x2cc>)
 8000b2e:	f000 f889 	bl	8000c44 <LTE_Send_Command>
	LTE_Send_Command("AT+SMSTATE?\r");                                                            //verifica connessione al server MQTT
 8000b32:	4836      	ldr	r0, [pc, #216]	@ (8000c0c <LTE_Init+0x2d0>)
 8000b34:	f000 f886 	bl	8000c44 <LTE_Send_Command>
	LTE_Receive_Response(response);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f898 	bl	8000c70 <LTE_Receive_Response>
	if(strstr(response, "+SMSTATE: 1") == NULL)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4933      	ldr	r1, [pc, #204]	@ (8000c10 <LTE_Init+0x2d4>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00f fcc2 	bl	80104ce <strstr>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d113      	bne.n	8000b78 <LTE_Init+0x23c>
	{
		while(strstr(response, "+SMSTATE: 1") == NULL)
 8000b50:	e00a      	b.n	8000b68 <LTE_Init+0x22c>
		{
			LTE_Send_Command("AT+SMSTATE?\r");
 8000b52:	482e      	ldr	r0, [pc, #184]	@ (8000c0c <LTE_Init+0x2d0>)
 8000b54:	f000 f876 	bl	8000c44 <LTE_Send_Command>
			LTE_Receive_Response(response);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f888 	bl	8000c70 <LTE_Receive_Response>
			HAL_Delay(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b64:	f006 fcee 	bl	8007544 <HAL_Delay>
		while(strstr(response, "+SMSTATE: 1") == NULL)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4929      	ldr	r1, [pc, #164]	@ (8000c10 <LTE_Init+0x2d4>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00f fcae 	bl	80104ce <strstr>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0ec      	beq.n	8000b52 <LTE_Init+0x216>
		}
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.topic);                                      //iscrizione al topic
 8000b78:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <LTE_Init+0x27c>)
 8000b7e:	4925      	ldr	r1, [pc, #148]	@ (8000c14 <LTE_Init+0x2d8>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00f fc5d 	bl	8010440 <siprintf>
	LTE_Send_Command(command);
 8000b86:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f85a 	bl	8000c44 <LTE_Send_Command>

}
 8000b90:	bf00      	nop
 8000b92:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08010e00 	.word	0x08010e00
 8000ba0:	200035c0 	.word	0x200035c0
 8000ba4:	200037b4 	.word	0x200037b4
 8000ba8:	20003624 	.word	0x20003624
 8000bac:	20003688 	.word	0x20003688
 8000bb0:	200036ec 	.word	0x200036ec
 8000bb4:	20003750 	.word	0x20003750
 8000bb8:	20003818 	.word	0x20003818
 8000bbc:	08010e04 	.word	0x08010e04
 8000bc0:	2000049c 	.word	0x2000049c
 8000bc4:	08010e14 	.word	0x08010e14
 8000bc8:	08010e20 	.word	0x08010e20
 8000bcc:	08010e2c 	.word	0x08010e2c
 8000bd0:	08010e38 	.word	0x08010e38
 8000bd4:	08010e44 	.word	0x08010e44
 8000bd8:	08010e50 	.word	0x08010e50
 8000bdc:	08010e5c 	.word	0x08010e5c
 8000be0:	08010e68 	.word	0x08010e68
 8000be4:	08010e80 	.word	0x08010e80
 8000be8:	08010e8c 	.word	0x08010e8c
 8000bec:	08010ea0 	.word	0x08010ea0
 8000bf0:	08010eac 	.word	0x08010eac
 8000bf4:	08010eb8 	.word	0x08010eb8
 8000bf8:	08010ed4 	.word	0x08010ed4
 8000bfc:	08010ef0 	.word	0x08010ef0
 8000c00:	08010f0c 	.word	0x08010f0c
 8000c04:	08010f28 	.word	0x08010f28
 8000c08:	08010f44 	.word	0x08010f44
 8000c0c:	08010f50 	.word	0x08010f50
 8000c10:	08010f60 	.word	0x08010f60
 8000c14:	08010f6c 	.word	0x08010f6c

08000c18 <LTE_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void LTE_Power_On(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c26:	f008 fe2f 	bl	8009888 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2e:	f006 fc89 	bl	8007544 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f008 fe24 	bl	8009888 <HAL_GPIO_WritePin>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LTE_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void LTE_Send_Command(char* command)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fabf 	bl	80001d0 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 8000c56:	89fa      	ldrh	r2, [r7, #14]
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <LTE_Send_Command+0x28>)
 8000c5e:	f00e fcc7 	bl	800f5f0 <HAL_UART_Transmit>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000049c 	.word	0x2000049c

08000c70 <LTE_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
void LTE_Receive_Response(char* response)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8000c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c7c:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 200);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	89fa      	ldrh	r2, [r7, #14]
 8000c88:	21c8      	movs	r1, #200	@ 0xc8
 8000c8a:	9100      	str	r1, [sp, #0]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <LTE_Receive_Response+0x2c>)
 8000c90:	f00f fad3 	bl	801023a <HAL_UARTEx_ReceiveToIdle>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000049c 	.word	0x2000049c

08000ca0 <LTE_publish_MQTT_Message>:

/*------PUBBLICAZIONE MESSAGGIO MQTT------*/
void LTE_publish_MQTT_Message(const char* topic, const char* message)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0c4      	sub	sp, #272	@ 0x110
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000caa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cae:	6018      	str	r0, [r3, #0]
 8000cb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cb8:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8000cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fa83 	bl	80001d0 <strlen>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    sprintf(command, "AT+SMPUB=\"%s\",%d,1,1", topic, len);
 8000cd0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000cd4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cd8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000cdc:	f107 000c 	add.w	r0, r7, #12
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	490a      	ldr	r1, [pc, #40]	@ (8000d0c <LTE_publish_MQTT_Message+0x6c>)
 8000ce4:	f00f fbac 	bl	8010440 <siprintf>
    LTE_Send_Command(command);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffa9 	bl	8000c44 <LTE_Send_Command>
    LTE_Send_Command((char*) &message);
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffa5 	bl	8000c44 <LTE_Send_Command>
    LTE_Send_Command("\x1A");
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <LTE_publish_MQTT_Message+0x70>)
 8000cfc:	f7ff ffa2 	bl	8000c44 <LTE_Send_Command>

}
 8000d00:	bf00      	nop
 8000d02:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08010f80 	.word	0x08010f80
 8000d10:	08010f98 	.word	0x08010f98

08000d14 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x0E);           //Tensione minima di uscita con 3 celle = 9V
 8000d18:	210e      	movs	r1, #14
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f830 	bl	8000d80 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8000d20:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 f877 	bl	8000e18 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8000d2a:	2164      	movs	r1, #100	@ 0x64
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f873 	bl	8000e18 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8000d32:	2185      	movs	r1, #133	@ 0x85
 8000d34:	2010      	movs	r0, #16
 8000d36:	f000 f823 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8000d3a:	2196      	movs	r1, #150	@ 0x96
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f000 f81f 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8000d42:	21ab      	movs	r1, #171	@ 0xab
 8000d44:	2015      	movs	r0, #21
 8000d46:	f000 f81b 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8000d4a:	21e1      	movs	r1, #225	@ 0xe1
 8000d4c:	2028      	movs	r0, #40	@ 0x28
 8000d4e:	f000 f817 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8000d52:	21d7      	movs	r1, #215	@ 0xd7
 8000d54:	2029      	movs	r0, #41	@ 0x29
 8000d56:	f000 f813 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8000d5a:	217f      	movs	r1, #127	@ 0x7f
 8000d5c:	202a      	movs	r0, #42	@ 0x2a
 8000d5e:	f000 f80f 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8000d62:	211f      	movs	r1, #31
 8000d64:	202b      	movs	r0, #43	@ 0x2b
 8000d66:	f000 f80b 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8000d6a:	21fc      	movs	r1, #252	@ 0xfc
 8000d6c:	202c      	movs	r0, #44	@ 0x2c
 8000d6e:	f000 f807 	bl	8000d80 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8000d72:	21f4      	movs	r1, #244	@ 0xf4
 8000d74:	202d      	movs	r0, #45	@ 0x2d
 8000d76:	f000 f803 	bl	8000d80 <BC_Write_Reg>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8000d9e:	f107 0208 	add.w	r2, r7, #8
 8000da2:	2364      	movs	r3, #100	@ 0x64
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	21d6      	movs	r1, #214	@ 0xd6
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <BC_Write_Reg+0x44>)
 8000dac:	f008 fe20 	bl	80099f0 <HAL_I2C_Master_Transmit>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <BC_Write_Reg+0x3a>
	{
		result = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000160 	.word	0x20000160

08000dc8 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR, &reg, 1, 100) == HAL_OK)
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	2364      	movs	r3, #100	@ 0x64
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	216b      	movs	r1, #107	@ 0x6b
 8000de4:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <BC_Read_Reg+0x4c>)
 8000de6:	f008 fe03 	bl	80099f0 <HAL_I2C_Master_Transmit>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10c      	bne.n	8000e0a <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 | 0x01, rdata, 1, 100) == HAL_OK)
 8000df0:	2364      	movs	r3, #100	@ 0x64
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2301      	movs	r3, #1
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	21d7      	movs	r1, #215	@ 0xd7
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <BC_Read_Reg+0x4c>)
 8000dfc:	f008 ff10 	bl	8009c20 <HAL_I2C_Master_Receive>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <BC_Read_Reg+0x42>
		{
			result = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000160 	.word	0x20000160

08000e18 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8000e42:	f107 0208 	add.w	r2, r7, #8
 8000e46:	2364      	movs	r3, #100	@ 0x64
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	21d6      	movs	r1, #214	@ 0xd6
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <BC_MultiWrite_Reg+0x50>)
 8000e50:	f008 fdce 	bl	80099f0 <HAL_I2C_Master_Transmit>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000160 	.word	0x20000160

08000e6c <BC_Read_Flags>:
	return result;
}

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8000e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e70:	b098      	sub	sp, #96	@ 0x60
 8000e72:	af02      	add	r7, sp, #8
 8000e74:	61f8      	str	r0, [r7, #28]
	int result = -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	657b      	str	r3, [r7, #84]	@ 0x54
	uint64_t data[6] = {0};
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	2230      	movs	r2, #48	@ 0x30
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00f fb0d 	bl	80104a4 <memset>

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR, (uint8_t *) REG22_CHARGER_FLAG_0, 1, 100) == HAL_OK)
 8000e8a:	2364      	movs	r3, #100	@ 0x64
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2222      	movs	r2, #34	@ 0x22
 8000e92:	216b      	movs	r1, #107	@ 0x6b
 8000e94:	4836      	ldr	r0, [pc, #216]	@ (8000f70 <BC_Read_Flags+0x104>)
 8000e96:	f008 fdab 	bl	80099f0 <HAL_I2C_Master_Transmit>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d161      	bne.n	8000f64 <BC_Read_Flags+0xf8>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 | 0x01, (uint8_t *)data, 6, 100) == HAL_OK)
 8000ea0:	f107 0220 	add.w	r2, r7, #32
 8000ea4:	2364      	movs	r3, #100	@ 0x64
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	21d7      	movs	r1, #215	@ 0xd7
 8000eac:	4830      	ldr	r0, [pc, #192]	@ (8000f70 <BC_Read_Flags+0x104>)
 8000eae:	f008 feb7 	bl	8009c20 <HAL_I2C_Master_Receive>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d155      	bne.n	8000f64 <BC_Read_Flags+0xf8>
		{
			result = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
			*flags = (data[0] << 40) | (data[1] << 32) | (data[2] << 24) | (data[3] << 16) | (data[4] << 8) | data[5];
 8000ebc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ec0:	f04f 0400 	mov.w	r4, #0
 8000ec4:	f04f 0500 	mov.w	r5, #0
 8000ec8:	0215      	lsls	r5, r2, #8
 8000eca:	2400      	movs	r4, #0
 8000ecc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	0003      	movs	r3, r0
 8000eda:	2200      	movs	r2, #0
 8000edc:	ea44 0102 	orr.w	r1, r4, r2
 8000ee0:	6139      	str	r1, [r7, #16]
 8000ee2:	432b      	orrs	r3, r5
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	060b      	lsls	r3, r1, #24
 8000ef4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8000ef8:	0602      	lsls	r2, r0, #24
 8000efa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000efe:	4621      	mov	r1, r4
 8000f00:	4311      	orrs	r1, r2
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	4629      	mov	r1, r5
 8000f06:	4319      	orrs	r1, r3
 8000f08:	60f9      	str	r1, [r7, #12]
 8000f0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	040b      	lsls	r3, r1, #16
 8000f18:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000f1c:	0402      	lsls	r2, r0, #16
 8000f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f22:	4621      	mov	r1, r4
 8000f24:	ea41 0a02 	orr.w	sl, r1, r2
 8000f28:	4629      	mov	r1, r5
 8000f2a:	ea41 0b03 	orr.w	fp, r1, r3
 8000f2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	020b      	lsls	r3, r1, #8
 8000f3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000f40:	0202      	lsls	r2, r0, #8
 8000f42:	ea4a 0802 	orr.w	r8, sl, r2
 8000f46:	ea4b 0903 	orr.w	r9, fp, r3
 8000f4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000f4e:	ea48 0102 	orr.w	r1, r8, r2
 8000f52:	6039      	str	r1, [r7, #0]
 8000f54:	ea49 0303 	orr.w	r3, r9, r3
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f60:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8000f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3758      	adds	r7, #88	@ 0x58
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f70:	20000160 	.word	0x20000160

08000f74 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8000f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8000f80:	2100      	movs	r1, #0
 8000f82:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8000f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f88:	f04f 0800 	mov.w	r8, #0
 8000f8c:	f401 5980 	and.w	r9, r1, #4096	@ 0x1000
	{

	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8000f90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f401 6380 	and.w	r3, r1, #1024	@ 0x400
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <BC_Manage_Interrupts+0x52>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, (uint8_t *)& status);
 8000f9e:	f107 030f 	add.w	r3, r7, #15
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	201b      	movs	r0, #27
 8000fa6:	f7ff ff0f 	bl	8000dc8 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <BC_Manage_Interrupts+0x4a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80); //INSERITA
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	2013      	movs	r0, #19
 8000fb8:	f7ff fee2 	bl	8000d80 <BC_Write_Reg>
 8000fbc:	e003      	b.n	8000fc6 <BC_Manage_Interrupts+0x52>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40); //RIMOSSA
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	2013      	movs	r0, #19
 8000fc2:	f7ff fedd 	bl	8000d80 <BC_Write_Reg>
		}
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8000fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fca:	2400      	movs	r4, #0
 8000fcc:	f403 7500 	and.w	r5, r3, #512	@ 0x200
	{

	}
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000fdc <HAL_ADC_ConvHalfCpltCallback>:

}

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a09      	ldr	r2, [pc, #36]	@ (800100c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d109      	bne.n	8001000 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000fee:	7813      	ldrb	r3, [r2, #0]
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8000ff6:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000ff8:	7813      	ldrb	r3, [r2, #0]
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	7013      	strb	r3, [r2, #0]
	}
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000090 	.word	0x20000090
 8001010:	20003880 	.word	0x20003880

08001014 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <HAL_ADC_ConvCpltCallback+0x30>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d109      	bne.n	8001038 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001024:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x34>)
 8001026:	7813      	ldrb	r3, [r2, #0]
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x34>)
 8001030:	7813      	ldrb	r3, [r2, #0]
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	7013      	strb	r3, [r2, #0]
	}
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000090 	.word	0x20000090
 8001048:	20003880 	.word	0x20003880

0800104c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f00b faba 	bl	800c5d6 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH[gTime.Hours];
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	461a      	mov	r2, r3
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_RTC_AlarmAEventCallback+0x48>)
 8001068:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800106e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001072:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	sys.High_th = High_TH[gTime.Hours];
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	461a      	mov	r2, r3
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_RTC_AlarmAEventCallback+0x50>)
 800107c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001082:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001086:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20007750 	.word	0x20007750
 8001098:	20000528 	.word	0x20000528
 800109c:	20007720 	.word	0x20007720

080010a0 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010aa:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <extflash_cs_set+0x14>)
 80010ac:	f008 fbec 	bl	8009888 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <extflash_cs_reset>:

void extflash_cs_reset()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010c2:	4802      	ldr	r0, [pc, #8]	@ (80010cc <extflash_cs_reset+0x14>)
 80010c4:	f008 fbe0 	bl	8009888 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2140      	movs	r1, #64	@ 0x40
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <extflash_wp_reset+0x14>)
 80010da:	f008 fbd5 	bl	8009888 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	48000800 	.word	0x48000800

080010e8 <extflash_hard_reset>:


void extflash_hard_reset()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	4806      	ldr	r0, [pc, #24]	@ (800110c <extflash_hard_reset+0x24>)
 80010f2:	f008 fbc9 	bl	8009888 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 80010f6:	2032      	movs	r0, #50	@ 0x32
 80010f8:	f006 fa24 	bl	8007544 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	@ 0x80
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <extflash_hard_reset+0x24>)
 8001102:	f008 fbc1 	bl	8009888 <HAL_GPIO_WritePin>

	return;
 8001106:	bf00      	nop
}
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	48000800 	.word	0x48000800

08001110 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00d      	beq.n	8001154 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	0c1b      	lsrs	r3, r3, #16
 800113e:	b2db      	uxtb	r3, r3
 8001140:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	b2db      	uxtb	r3, r3
 800114a:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8001154:	f7ff ffa4 	bl	80010a0 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8001158:	f107 010f 	add.w	r1, r7, #15
 800115c:	2364      	movs	r3, #100	@ 0x64
 800115e:	2201      	movs	r2, #1
 8001160:	4823      	ldr	r0, [pc, #140]	@ (80011f0 <extflash_send_cmd+0xe0>)
 8001162:	f00b fe1a 	bl	800cd9a <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 800116e:	f107 0118 	add.w	r1, r7, #24
 8001172:	2364      	movs	r3, #100	@ 0x64
 8001174:	2203      	movs	r2, #3
 8001176:	481e      	ldr	r0, [pc, #120]	@ (80011f0 <extflash_send_cmd+0xe0>)
 8001178:	f00b fe0f 	bl	800cd9a <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	88db      	ldrh	r3, [r3, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	88db      	ldrh	r3, [r3, #6]
 8001188:	2b08      	cmp	r3, #8
 800118a:	bf28      	it	cs
 800118c:	2308      	movcs	r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	b29a      	uxth	r2, r3
 8001196:	f107 0110 	add.w	r1, r7, #16
 800119a:	2364      	movs	r3, #100	@ 0x64
 800119c:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <extflash_send_cmd+0xe0>)
 800119e:	f00b fdfc 	bl	800cd9a <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <extflash_send_cmd+0xb2>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68d9      	ldr	r1, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	885a      	ldrh	r2, [r3, #2]
 80011ba:	2364      	movs	r3, #100	@ 0x64
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <extflash_send_cmd+0xe0>)
 80011be:	f00b fdec 	bl	800cd9a <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <extflash_send_cmd+0xd2>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	889a      	ldrh	r2, [r3, #4]
 80011da:	2364      	movs	r3, #100	@ 0x64
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <extflash_send_cmd+0xe0>)
 80011de:	f00b ff52 	bl	800d086 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 80011e2:	f7ff ff69 	bl	80010b8 <extflash_cs_reset>

	return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000021c 	.word	0x2000021c

080011f4 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 800120c:	2381      	movs	r3, #129	@ 0x81
 800120e:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff73 	bl	8001110 <extflash_send_cmd>
 800122a:	4603      	mov	r3, r0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8001248:	2382      	movs	r3, #130	@ 0x82
 800124a:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff5e 	bl	8001110 <extflash_send_cmd>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b088      	sub	sp, #32
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <extflash_set_write_protection+0x24>
 800127e:	2306      	movs	r3, #6
 8001280:	e000      	b.n	8001284 <extflash_set_write_protection+0x26>
 8001282:	2304      	movs	r3, #4
 8001284:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff40 	bl	8001110 <extflash_send_cmd>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b08a      	sub	sp, #40	@ 0x28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 80012b8:	235a      	movs	r3, #90	@ 0x5a
 80012ba:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff1a 	bl	8001110 <extflash_send_cmd>
 80012dc:	4603      	mov	r3, r0

}
 80012de:	4618      	mov	r0, r3
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b08a      	sub	sp, #40	@ 0x28
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	4613      	mov	r3, r2
 80012f2:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8001304:	230b      	movs	r3, #11
 8001306:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	757b      	strb	r3, [r7, #21]
	command.address = address;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fef5 	bl	8001110 <extflash_send_cmd>
 8001326:	4603      	mov	r3, r0

}
 8001328:	4618      	mov	r0, r3
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8001348:	23d7      	movs	r3, #215	@ 0xd7
 800134a:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fed9 	bl	8001110 <extflash_send_cmd>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	737b      	strb	r3, [r7, #13]
	command.address = address;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 800138e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001392:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff feb7 	bl	8001110 <extflash_send_cmd>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	int result = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 80013c0:	f006 f8b4 	bl	800752c <HAL_GetTick>
 80013c4:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	031b      	lsls	r3, r3, #12
 80013ce:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 80013d0:	f107 0317 	add.w	r3, r7, #23
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff0d 	bl	80011f4 <extflash_read_extended_read_reg>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da10      	bge.n	8001402 <extflash_sector_read+0x56>
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	e037      	b.n	8001456 <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 80013e6:	f107 0317 	add.w	r3, r7, #23
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff02 	bl	80011f4 <extflash_read_extended_read_reg>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da02      	bge.n	80013fc <extflash_sector_read+0x50>
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e02c      	b.n	8001456 <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f006 f8a1 	bl	8007544 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d020      	beq.n	800144e <extflash_sector_read+0xa2>
 800140c:	f006 f88e 	bl	800752c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800141a:	d3e4      	bcc.n	80013e6 <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 800141c:	e017      	b.n	800144e <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 800141e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001424:	6a38      	ldr	r0, [r7, #32]
 8001426:	f7ff ff5e 	bl	80012e6 <extflash_raw_read>
 800142a:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da02      	bge.n	8001438 <extflash_sector_read+0x8c>
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e00e      	b.n	8001456 <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143e:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3b01      	subs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e4      	bne.n	800141e <extflash_sector_read+0x72>
	}

	return 0;
 8001454:	2300      	movs	r3, #0

}
 8001456:	4618      	mov	r0, r3
 8001458:	3728      	adds	r7, #40	@ 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 800146a:	f006 f85f 	bl	800752c <HAL_GetTick>
 800146e:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001470:	f107 030b 	add.w	r3, r7, #11
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff febd 	bl	80011f4 <extflash_read_extended_read_reg>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	da10      	bge.n	80014a2 <extflash_wait_for_wop+0x44>
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	e023      	b.n	80014ce <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001486:	f107 030b 	add.w	r3, r7, #11
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff feb2 	bl	80011f4 <extflash_read_extended_read_reg>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	da02      	bge.n	800149c <extflash_wait_for_wop+0x3e>
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e018      	b.n	80014ce <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 800149c:	2001      	movs	r0, #1
 800149e:	f006 f851 	bl	8007544 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <extflash_wait_for_wop+0x5e>
 80014ac:	f006 f83e 	bl	800752c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8e4      	bhi.n	8001486 <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	f003 030e 	and.w	r3, r3, #14
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 80014c6:	f06f 0301 	mvn.w	r3, #1
 80014ca:	e000      	b.n	80014ce <extflash_wait_for_wop+0x70>
	}

	return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
	int result = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 80014f0:	f7ff fea0 	bl	8001234 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 80014f4:	e04e      	b.n	8001594 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80014f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014fa:	f7ff ffb0 	bl	800145e <extflash_wait_for_wop>
 80014fe:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db4a      	blt.n	800159c <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fea9 	bl	800125e <extflash_set_write_protection>
 800150c:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db45      	blt.n	80015a0 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8001514:	69b8      	ldr	r0, [r7, #24]
 8001516:	f7ff ff0b 	bl	8001330 <extflash_raw_erase>
 800151a:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db40      	blt.n	80015a4 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001522:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001526:	f7ff ff9a 	bl	800145e <extflash_wait_for_wop>
 800152a:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db3a      	blt.n	80015a8 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e021      	b.n	800157c <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fe90 	bl	800125e <extflash_set_write_protection>
 800153e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db1e      	blt.n	8001584 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8001546:	69f9      	ldr	r1, [r7, #28]
 8001548:	69b8      	ldr	r0, [r7, #24]
 800154a:	f7ff ff0d 	bl	8001368 <extflash_raw_page_write>
 800154e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db18      	blt.n	8001588 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800155c:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001564:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156a:	f7ff ff78 	bl	800145e <extflash_wait_for_wop>
 800156e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0a      	blt.n	800158c <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	ddda      	ble.n	8001538 <extflash_sector_write+0x62>
 8001582:	e004      	b.n	800158e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001584:	bf00      	nop
 8001586:	e002      	b.n	800158e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001588:	bf00      	nop
 800158a:	e000      	b.n	800158e <extflash_sector_write+0xb8>
			if(result < 0)break;
 800158c:	bf00      	nop
		}

		nsectors--;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3b01      	subs	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ad      	bne.n	80014f6 <extflash_sector_write+0x20>
 800159a:	e006      	b.n	80015aa <extflash_sector_write+0xd4>
		if(result < 0)break;
 800159c:	bf00      	nop
 800159e:	e004      	b.n	80015aa <extflash_sector_write+0xd4>
		if(result < 0)break;
 80015a0:	bf00      	nop
 80015a2:	e002      	b.n	80015aa <extflash_sector_write+0xd4>
		if(result < 0)break;
 80015a4:	bf00      	nop
 80015a6:	e000      	b.n	80015aa <extflash_sector_write+0xd4>
		if(result < 0)break;
 80015a8:	bf00      	nop
	}

	extflash_set_write_protection(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fe57 	bl	800125e <extflash_set_write_protection>

	return 0;
 80015b0:	2300      	movs	r3, #0

}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 80015be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <extflash_get_sector_count+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000088 	.word	0x20000088

080015e4 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	return exflashInitDone;
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <extflash_is_initialized+0x14>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000008c 	.word	0x2000008c

080015fc <extflash_init>:

int extflash_init()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8001602:	2300      	movs	r3, #0
 8001604:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <extflash_init+0xb8>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <extflash_init+0xbc>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8001626:	f7ff fd5f 	bl	80010e8 <extflash_hard_reset>
	extflash_cs_reset();
 800162a:	f7ff fd45 	bl	80010b8 <extflash_cs_reset>
	extflash_wp_reset();
 800162e:	f7ff fd4f 	bl	80010d0 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8001632:	2390      	movs	r3, #144	@ 0x90
 8001634:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 800163e:	2302      	movs	r3, #2
 8001640:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fd5f 	bl	8001110 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8001652:	7f3b      	ldrb	r3, [r7, #28]
 8001654:	2b9d      	cmp	r3, #157	@ 0x9d
 8001656:	d102      	bne.n	800165e <extflash_init+0x62>
 8001658:	7f7b      	ldrb	r3, [r7, #29]
 800165a:	2b17      	cmp	r3, #23
 800165c:	d002      	beq.n	8001664 <extflash_init+0x68>
	{
		return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e022      	b.n	80016aa <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2214      	movs	r2, #20
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00e ff19 	bl	80104a4 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2204      	movs	r2, #4
 8001676:	4619      	mov	r1, r3
 8001678:	2034      	movs	r0, #52	@ 0x34
 800167a:	f7ff fe0e 	bl	800129a <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <extflash_init+0xc0>)
 8001682:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <extflash_init+0xc0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <extflash_init+0xc0>)
 800168c:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <extflash_init+0xc0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	08db      	lsrs	r3, r3, #3
 8001694:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <extflash_init+0xc0>)
 8001696:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <extflash_init+0xc0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0b1b      	lsrs	r3, r3, #12
 800169e:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <extflash_init+0xbc>)
 80016a0:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 80016a2:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <extflash_init+0xb8>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]

	return 0;
 80016a8:	2300      	movs	r3, #0

}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000008c 	.word	0x2000008c
 80016b8:	20000088 	.word	0x20000088
 80016bc:	20000084 	.word	0x20000084

080016c0 <System_Init>:
#include "lsm6dsv16x_reg.h"
#include "lsm6dsv16x_rw.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <System_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <System_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <System_Init+0x58>)
 80016cc:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <System_Init+0x60>)
 80016ce:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <System_Init+0x58>)
 80016d2:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <System_Init+0x64>)
 80016d4:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 80016d6:	2102      	movs	r1, #2
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 f9ef 	bl	8001abc <LED_Start>

	BC_Init();
 80016de:	f7ff fb19 	bl	8000d14 <BC_Init>
	INA3221_Init();
 80016e2:	f7ff f872 	bl	80007ca <INA3221_Init>
	Acc_Init(&acc);
 80016e6:	480c      	ldr	r0, [pc, #48]	@ (8001718 <System_Init+0x58>)
 80016e8:	f000 f942 	bl	8001970 <Acc_Init>
	FatFS_Init();
 80016ec:	f000 f81c 	bl	8001728 <FatFS_Init>
	LTE_Init();
 80016f0:	f7ff f924 	bl	800093c <LTE_Init>
	RTC_Init();
 80016f4:	f000 f892 	bl	800181c <RTC_Init>
	LED_Start(RED_LED, ON);
 80016f8:	2101      	movs	r1, #1
 80016fa:	2004      	movs	r0, #4
 80016fc:	f000 f9de 	bl	8001abc <LED_Start>
	HAL_Delay(9000);
 8001700:	f242 3028 	movw	r0, #9000	@ 0x2328
 8001704:	f005 ff1e 	bl	8007544 <HAL_Delay>

	LED_Stop(RED_LED);
 8001708:	2004      	movs	r0, #4
 800170a:	f000 fa47 	bl	8001b9c <LED_Stop>
	LED_Stop(ORG_LED);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 fa44 	bl	8001b9c <LED_Stop>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20007780 	.word	0x20007780
 800171c:	080023bf 	.word	0x080023bf
 8001720:	08002417 	.word	0x08002417
 8001724:	20000280 	.word	0x20000280

08001728 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]

	do
	{
		flags.RAM_Mounted = 0;
 800173e:	4a30      	ldr	r2, [pc, #192]	@ (8001800 <FatFS_Init+0xd8>)
 8001740:	7813      	ldrb	r3, [r2, #0]
 8001742:	f023 0308 	bic.w	r3, r3, #8
 8001746:	7013      	strb	r3, [r2, #0]
		mkfs_opt.fmt = FM_FAT;
 8001748:	2301      	movs	r3, #1
 800174a:	713b      	strb	r3, [r7, #4]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 800174c:	1d39      	adds	r1, r7, #4
 800174e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001752:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <FatFS_Init+0xdc>)
 8001754:	482c      	ldr	r0, [pc, #176]	@ (8001808 <FatFS_Init+0xe0>)
 8001756:	f005 fa07 	bl	8006b68 <f_mkfs>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <FatFS_Init+0x5c>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8001764:	2201      	movs	r2, #1
 8001766:	4928      	ldr	r1, [pc, #160]	@ (8001808 <FatFS_Init+0xe0>)
 8001768:	4828      	ldr	r0, [pc, #160]	@ (800180c <FatFS_Init+0xe4>)
 800176a:	f004 fc31 	bl	8005fd0 <f_mount>
 800176e:	4603      	mov	r3, r0
 8001770:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <FatFS_Init+0x60>
		{
			break;
		}

		flags.RAM_Mounted = 1;
 8001778:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <FatFS_Init+0xd8>)
 800177a:	7813      	ldrb	r3, [r2, #0]
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	7013      	strb	r3, [r2, #0]

		break;
 8001782:	e002      	b.n	800178a <FatFS_Init+0x62>
			break;
 8001784:	bf00      	nop
 8001786:	e000      	b.n	800178a <FatFS_Init+0x62>
			break;
 8001788:	bf00      	nop
	} while (1);

	do
	{
		memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2210      	movs	r2, #16
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00e fe87 	bl	80104a4 <memset>

		flags.FLASH_Mounted = 0;
 8001796:	4a1a      	ldr	r2, [pc, #104]	@ (8001800 <FatFS_Init+0xd8>)
 8001798:	7813      	ldrb	r3, [r2, #0]
 800179a:	f023 0310 	bic.w	r3, r3, #16
 800179e:	7013      	strb	r3, [r2, #0]
		fRes = f_mount(&flash_fs, "/flash", 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	491b      	ldr	r1, [pc, #108]	@ (8001810 <FatFS_Init+0xe8>)
 80017a4:	481b      	ldr	r0, [pc, #108]	@ (8001814 <FatFS_Init+0xec>)
 80017a6:	f004 fc13 	bl	8005fd0 <f_mount>
 80017aa:	4603      	mov	r3, r0
 80017ac:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b0d      	cmp	r3, #13
 80017b2:	d117      	bne.n	80017e4 <FatFS_Init+0xbc>
		{
			mkfs_opt.fmt = FM_FAT;
 80017b4:	2301      	movs	r3, #1
 80017b6:	713b      	strb	r3, [r7, #4]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	4a16      	ldr	r2, [pc, #88]	@ (8001818 <FatFS_Init+0xf0>)
 80017c0:	4813      	ldr	r0, [pc, #76]	@ (8001810 <FatFS_Init+0xe8>)
 80017c2:	f005 f9d1 	bl	8006b68 <f_mkfs>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <FatFS_Init+0xc8>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	490f      	ldr	r1, [pc, #60]	@ (8001810 <FatFS_Init+0xe8>)
 80017d4:	480f      	ldr	r0, [pc, #60]	@ (8001814 <FatFS_Init+0xec>)
 80017d6:	f004 fbfb 	bl	8005fd0 <f_mount>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <FatFS_Init+0xcc>
			{
				break;
			}
		}

		flags.FLASH_Mounted = 1;
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <FatFS_Init+0xd8>)
 80017e6:	7813      	ldrb	r3, [r2, #0]
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	7013      	strb	r3, [r2, #0]

		break;
 80017ee:	e002      	b.n	80017f6 <FatFS_Init+0xce>
				break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <FatFS_Init+0xce>
				break;
 80017f4:	bf00      	nop
	} while (1);


}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20003880 	.word	0x20003880
 8001804:	200038b8 	.word	0x200038b8
 8001808:	08010f9c 	.word	0x08010f9c
 800180c:	20003884 	.word	0x20003884
 8001810:	08010fa4 	.word	0x08010fa4
 8001814:	200048b8 	.word	0x200048b8
 8001818:	200048ec 	.word	0x200048ec

0800181c <RTC_Init>:

/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b090      	sub	sp, #64	@ 0x40
 8001820:	af00      	add	r7, sp, #0
	char DateTime[30] = "";
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	221e      	movs	r2, #30
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f00e fe3a 	bl	80104a4 <memset>
	RTC_DateTypeDef sDate = {0};
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

	LTE_Send_Command("AT+CCLK?\r");
 8001842:	4848      	ldr	r0, [pc, #288]	@ (8001964 <RTC_Init+0x148>)
 8001844:	f7ff f9fe 	bl	8000c44 <LTE_Send_Command>
	for(int i = 0; i < strlen(LTE_Ack_buffer); i++)
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800184c:	e00c      	b.n	8001868 <RTC_Init+0x4c>
	{
		DateTime[i] = LTE_Ack_buffer[i];
 800184e:	4a46      	ldr	r2, [pc, #280]	@ (8001968 <RTC_Init+0x14c>)
 8001850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001852:	4413      	add	r3, r2
 8001854:	7819      	ldrb	r1, [r3, #0]
 8001856:	f107 021c 	add.w	r2, r7, #28
 800185a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800185c:	4413      	add	r3, r2
 800185e:	460a      	mov	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(LTE_Ack_buffer); i++)
 8001862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001864:	3301      	adds	r3, #1
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001868:	483f      	ldr	r0, [pc, #252]	@ (8001968 <RTC_Init+0x14c>)
 800186a:	f7fe fcb1 	bl	80001d0 <strlen>
 800186e:	4602      	mov	r2, r0
 8001870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001872:	429a      	cmp	r2, r3
 8001874:	d8eb      	bhi.n	800184e <RTC_Init+0x32>
	}

	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001876:	2301      	movs	r3, #1
 8001878:	763b      	strb	r3, [r7, #24]
	sDate.Year = (DateTime[7] - '0') * 10 + (DateTime[8] - '0');
 800187a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800187e:	3b30      	subs	r3, #48	@ 0x30
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001890:	4413      	add	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3b30      	subs	r3, #48	@ 0x30
 8001896:	b2db      	uxtb	r3, r3
 8001898:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (DateTime[10] - '0') * 10 + (DateTime[11] - '0');
 800189a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800189e:	3b30      	subs	r3, #48	@ 0x30
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018b0:	4413      	add	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b30      	subs	r3, #48	@ 0x30
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	767b      	strb	r3, [r7, #25]
	sDate.Date = (DateTime[13] - '0') * 10 + (DateTime[14] - '0');
 80018ba:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80018be:	3b30      	subs	r3, #48	@ 0x30
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80018d0:	4413      	add	r3, r2
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3b30      	subs	r3, #48	@ 0x30
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (DateTime[16] - '0') * 10 + (DateTime[17] - '0');
 80018da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018de:	3b30      	subs	r3, #48	@ 0x30
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80018f0:	4413      	add	r3, r2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3b30      	subs	r3, #48	@ 0x30
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (DateTime[19] - '0') * 10 + (DateTime[20] - '0');
 80018fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018fe:	3b30      	subs	r3, #48	@ 0x30
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001910:	4413      	add	r3, r2
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3b30      	subs	r3, #48	@ 0x30
 8001916:	b2db      	uxtb	r3, r3
 8001918:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (DateTime[22] - '0') * 10 + (DateTime[23] - '0');
 800191a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800191e:	3b30      	subs	r3, #48	@ 0x30
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001930:	4413      	add	r3, r2
 8001932:	b2db      	uxtb	r3, r3
 8001934:	3b30      	subs	r3, #48	@ 0x30
 8001936:	b2db      	uxtb	r3, r3
 8001938:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2200      	movs	r2, #0
 8001948:	4619      	mov	r1, r3
 800194a:	4808      	ldr	r0, [pc, #32]	@ (800196c <RTC_Init+0x150>)
 800194c:	f00a fe9f 	bl	800c68e <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <RTC_Init+0x150>)
 8001958:	f00a fda0 	bl	800c49c <HAL_RTC_SetTime>
}
 800195c:	bf00      	nop
 800195e:	3740      	adds	r7, #64	@ 0x40
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	08010fac 	.word	0x08010fac
 8001968:	200076b4 	.word	0x200076b4
 800196c:	200001f8 	.word	0x200001f8

08001970 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2100      	movs	r1, #0
 800197e:	460a      	mov	r2, r1
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	460a      	mov	r2, r1
 8001984:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 800198e:	7c3b      	ldrb	r3, [r7, #16]
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	743b      	strb	r3, [r7, #16]

	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8001996:	f107 030f 	add.w	r3, r7, #15
 800199a:	4619      	mov	r1, r3
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f9e1 	bl	8001d64 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b70      	cmp	r3, #112	@ 0x70
 80019a6:	d01a      	beq.n	80019de <Acc_Init+0x6e>
		while (acc_whoamI != LSM6DSV16X_ID)
 80019a8:	e016      	b.n	80019d8 <Acc_Init+0x68>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80019aa:	f107 030f 	add.w	r3, r7, #15
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f9d7 	bl	8001d64 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	3301      	adds	r3, #1
 80019ba:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d10a      	bne.n	80019d8 <Acc_Init+0x68>
			{
				flags.ACC_Present = 0;
 80019c2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab0 <Acc_Init+0x140>)
 80019c4:	7853      	ldrb	r3, [r2, #1]
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	7053      	strb	r3, [r2, #1]
				flags.ACC_Complete = 1;
 80019cc:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <Acc_Init+0x140>)
 80019ce:	7853      	ldrb	r3, [r2, #1]
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	7053      	strb	r3, [r2, #1]
 80019d6:	e068      	b.n	8001aaa <Acc_Init+0x13a>
		while (acc_whoamI != LSM6DSV16X_ID)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b70      	cmp	r3, #112	@ 0x70
 80019dc:	d1e5      	bne.n	80019aa <Acc_Init+0x3a>
				return;
			}
		}
	flags.ACC_Present = 1;
 80019de:	4a34      	ldr	r2, [pc, #208]	@ (8001ab0 <Acc_Init+0x140>)
 80019e0:	7853      	ldrb	r3, [r2, #1]
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	7053      	strb	r3, [r2, #1]
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80019e8:	2101      	movs	r1, #1
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f914 	bl	8001c18 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80019f0:	f107 0316 	add.w	r3, r7, #22
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f95e 	bl	8001cb8 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f005 fda1 	bl	8007544 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8001a02:	7dbb      	ldrb	r3, [r7, #22]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f3      	bne.n	80019f0 <Acc_Init+0x80>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 faa7 	bl	8001f5e <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8001a10:	2101      	movs	r1, #1
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fcad 	bl	8002372 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fa04 	bl	8001e28 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8001a20:	2100      	movs	r1, #0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fa75 	bl	8001f12 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 8001a28:	2109      	movs	r1, #9
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fc2f 	bl	800228e <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fc51 	bl	80022da <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fc73 	bl	8002326 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f99f 	bl	8001d86 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fa12 	bl	8001e74 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8001a50:	2110      	movs	r1, #16
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 faa9 	bl	8001faa <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8001a58:	2103      	movs	r1, #3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f9e4 	bl	8001e28 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8001a60:	2103      	movs	r1, #3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fa55 	bl	8001f12 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fbc9 	bl	8002202 <lsm6dsv16x_den_polarity_set>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8001a70:	2108      	movs	r1, #8
 8001a72:	4810      	ldr	r0, [pc, #64]	@ (8001ab4 <Acc_Init+0x144>)
 8001a74:	f00c f9ca 	bl	800de0c <HAL_TIM_PWM_Start>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8001a78:	2109      	movs	r1, #9
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f983 	bl	8001d86 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8001a80:	2100      	movs	r1, #0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fae0 	bl	8002048 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8001a88:	2104      	movs	r1, #4
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fab6 	bl	8001ffc <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8001a90:	2164      	movs	r1, #100	@ 0x64
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fbdb 	bl	800224e <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 faf8 	bl	8002094 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <Acc_Init+0x148>)
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	615a      	str	r2, [r3, #20]
}
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20003880 	.word	0x20003880
 8001ab4:	2000037c 	.word	0x2000037c
 8001ab8:	40010400 	.word	0x40010400

08001abc <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d00e      	beq.n	8001b18 <LED_Start+0x5c>
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	dc10      	bgt.n	8001b20 <LED_Start+0x64>
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d002      	beq.n	8001b08 <LED_Start+0x4c>
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d004      	beq.n	8001b10 <LED_Start+0x54>
 8001b06:	e00b      	b.n	8001b20 <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 8001b08:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8001b0c:	613b      	str	r3, [r7, #16]
		break;
 8001b0e:	e007      	b.n	8001b20 <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 8001b10:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8001b14:	613b      	str	r3, [r7, #16]
		break;
 8001b16:	e003      	b.n	8001b20 <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 8001b18:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 8001b1c:	613b      	str	r3, [r7, #16]
		break;
 8001b1e:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 8001b20:	481d      	ldr	r0, [pc, #116]	@ (8001b98 <LED_Start+0xdc>)
 8001b22:	f00b ffc3 	bl	800daac <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 8001b26:	481c      	ldr	r0, [pc, #112]	@ (8001b98 <LED_Start+0xdc>)
 8001b28:	f00c f90e 	bl	800dd48 <HAL_TIM_PWM_Init>

	switch(LED)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d009      	beq.n	8001b46 <LED_Start+0x8a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d82a      	bhi.n	8001b8e <LED_Start+0xd2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01b      	beq.n	8001b76 <LED_Start+0xba>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00c      	beq.n	8001b5e <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 8001b44:	e023      	b.n	8001b8e <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4812      	ldr	r0, [pc, #72]	@ (8001b98 <LED_Start+0xdc>)
 8001b50:	f00c fc66 	bl	800e420 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <LED_Start+0xdc>)
 8001b58:	f00c f958 	bl	800de0c <HAL_TIM_PWM_Start>
		break;
 8001b5c:	e017      	b.n	8001b8e <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <LED_Start+0xdc>)
 8001b68:	f00c fc5a 	bl	800e420 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <LED_Start+0xdc>)
 8001b70:	f00c f94c 	bl	800de0c <HAL_TIM_PWM_Start>
		break;
 8001b74:	e00b      	b.n	8001b8e <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <LED_Start+0xdc>)
 8001b80:	f00c fc4e 	bl	800e420 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <LED_Start+0xdc>)
 8001b88:	f00c f940 	bl	800de0c <HAL_TIM_PWM_Start>
		break;
 8001b8c:	bf00      	nop
}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200002e4 	.word	0x200002e4

08001b9c <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <LED_Stop+0x18>)
 8001ba8:	f00c fa36 	bl	800e018 <HAL_TIM_PWM_Stop>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200002e4 	.word	0x200002e4

08001bb8 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	72fb      	strb	r3, [r7, #11]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685c      	ldr	r4, [r3, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68d8      	ldr	r0, [r3, #12]
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	7af9      	ldrb	r1, [r7, #11]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	47a0      	blx	r4
 8001bdc:	6178      	str	r0, [r7, #20]

  return ret;
 8001bde:	697b      	ldr	r3, [r7, #20]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	72fb      	strb	r3, [r7, #11]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68d8      	ldr	r0, [r3, #12]
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	7af9      	ldrb	r1, [r7, #11]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	47a0      	blx	r4
 8001c0c:	6178      	str	r0, [r7, #20]

  return ret;
 8001c0e:	697b      	ldr	r3, [r7, #20]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}

08001c18 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001c24:	f107 020c 	add.w	r2, r7, #12
 8001c28:	2301      	movs	r3, #1
 8001c2a:	2112      	movs	r1, #18
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffc3 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001c32:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001c34:	f107 0210 	add.w	r2, r7, #16
 8001c38:	2301      	movs	r3, #1
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffbb 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001c42:	4602      	mov	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	4413      	add	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <lsm6dsv16x_reset_set+0x3c>
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	e02d      	b.n	8001cb0 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	7b3b      	ldrb	r3, [r7, #12]
 8001c60:	f362 13c7 	bfi	r3, r2, #7, #1
 8001c64:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	7b3b      	ldrb	r3, [r7, #12]
 8001c72:	f362 0300 	bfi	r3, r2, #0, #1
 8001c76:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	7c3b      	ldrb	r3, [r7, #16]
 8001c82:	f362 0382 	bfi	r3, r2, #2, #1
 8001c86:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001c88:	f107 020c 	add.w	r2, r7, #12
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2112      	movs	r1, #18
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffa9 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001c96:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001c98:	f107 0210 	add.w	r2, r7, #16
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffa1 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  return ret;
 8001cae:	697b      	ldr	r3, [r7, #20]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001cc2:	f107 020c 	add.w	r2, r7, #12
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	2112      	movs	r1, #18
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff74 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001cd0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001cd2:	f107 0210 	add.w	r2, r7, #16
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	2101      	movs	r1, #1
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff6c 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <lsm6dsv16x_reset_get+0x3a>
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	e033      	b.n	8001d5a <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8001cf2:	7b3b      	ldrb	r3, [r7, #12]
 8001cf4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	009a      	lsls	r2, r3, #2
 8001cfc:	7b3b      	ldrb	r3, [r7, #12]
 8001cfe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	7c3a      	ldrb	r2, [r7, #16]
 8001d0a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	4413      	add	r3, r2
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d81c      	bhi.n	8001d50 <lsm6dsv16x_reset_get+0x98>
 8001d16:	a201      	add	r2, pc, #4	@ (adr r2, 8001d1c <lsm6dsv16x_reset_get+0x64>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d41 	.word	0x08001d41
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	08001d49 	.word	0x08001d49
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
      break;
 8001d36:	e00f      	b.n	8001d58 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
      break;
 8001d3e:	e00b      	b.n	8001d58 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
      break;
 8001d46:	e007      	b.n	8001d58 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	701a      	strb	r2, [r3, #0]
      break;
 8001d4e:	e003      	b.n	8001d58 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
      break;
 8001d56:	bf00      	nop
  }

  return ret;
 8001d58:	697b      	ldr	r3, [r7, #20]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop

08001d64 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8001d6e:	2301      	movs	r3, #1
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	210f      	movs	r1, #15
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff1f 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001d7a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8001d92:	f107 0210 	add.w	r2, r7, #16
 8001d96:	2301      	movs	r3, #1
 8001d98:	2110      	movs	r1, #16
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff0c 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001da0:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <lsm6dsv16x_xl_data_rate_set+0x26>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	e039      	b.n	8001e20 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	7c3b      	ldrb	r3, [r7, #16]
 8001db6:	f362 0303 	bfi	r3, r2, #0, #4
 8001dba:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8001dbc:	f107 0210 	add.w	r2, r7, #16
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff0f 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001dca:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <lsm6dsv16x_xl_data_rate_set+0x50>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	e024      	b.n	8001e20 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01d      	beq.n	8001e1e <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001de2:	f107 020c 	add.w	r2, r7, #12
 8001de6:	2301      	movs	r3, #1
 8001de8:	2162      	movs	r1, #98	@ 0x62
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fee4 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001df0:	4602      	mov	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	f362 0301 	bfi	r3, r2, #0, #2
 8001e06:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2162      	movs	r1, #98	@ 0x62
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fee9 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001e16:	4602      	mov	r2, r0
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001e1e:	697b      	ldr	r3, [r7, #20]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8001e34:	f107 0208 	add.w	r2, r7, #8
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff febb 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001e42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	7a3b      	ldrb	r3, [r7, #8]
 8001e54:	f362 1306 	bfi	r3, r2, #4, #3
 8001e58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	2301      	movs	r3, #1
 8001e60:	2110      	movs	r1, #16
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fec0 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001e68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8001e80:	f107 0210 	add.w	r2, r7, #16
 8001e84:	2301      	movs	r3, #1
 8001e86:	2111      	movs	r1, #17
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fe95 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001e8e:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	7c3b      	ldrb	r3, [r7, #16]
 8001e9a:	f362 0303 	bfi	r3, r2, #0, #4
 8001e9e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8001ea0:	f107 0210 	add.w	r2, r7, #16
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2111      	movs	r1, #17
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fe9d 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	e024      	b.n	8001f0a <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01d      	beq.n	8001f08 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001ecc:	f107 020c 	add.w	r2, r7, #12
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	2162      	movs	r1, #98	@ 0x62
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fe6f 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001eda:	4602      	mov	r2, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4413      	add	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	7b3b      	ldrb	r3, [r7, #12]
 8001eec:	f362 0301 	bfi	r3, r2, #0, #2
 8001ef0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001ef2:	f107 020c 	add.w	r2, r7, #12
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2162      	movs	r1, #98	@ 0x62
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fe74 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001f08:	697b      	ldr	r3, [r7, #20]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8001f1e:	f107 0208 	add.w	r2, r7, #8
 8001f22:	2301      	movs	r3, #1
 8001f24:	2111      	movs	r1, #17
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fe46 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001f2c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10f      	bne.n	8001f54 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	7a3b      	ldrb	r3, [r7, #8]
 8001f3e:	f362 1306 	bfi	r3, r2, #4, #3
 8001f42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8001f44:	f107 0208 	add.w	r2, r7, #8
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2111      	movs	r1, #17
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fe4b 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001f52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f54:	68fb      	ldr	r3, [r7, #12]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f6a:	f107 0208 	add.w	r2, r7, #8
 8001f6e:	2301      	movs	r3, #1
 8001f70:	2112      	movs	r1, #18
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fe20 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001f78:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	7a3b      	ldrb	r3, [r7, #8]
 8001f8a:	f362 1386 	bfi	r3, r2, #6, #1
 8001f8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8001f90:	f107 0208 	add.w	r2, r7, #8
 8001f94:	2301      	movs	r3, #1
 8001f96:	2112      	movs	r1, #18
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe25 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001f9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d802      	bhi.n	8001fc8 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	e015      	b.n	8001ff4 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8001fc8:	f107 0208 	add.w	r2, r7, #8
 8001fcc:	2301      	movs	r3, #1
 8001fce:	2106      	movs	r1, #6
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fdf1 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8001fd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8001fe2:	f107 0208 	add.w	r2, r7, #8
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2106      	movs	r1, #6
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fdfc 	bl	8001be8 <lsm6dsv16x_write_reg>
 8001ff0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002008:	f107 0208 	add.w	r2, r7, #8
 800200c:	2301      	movs	r3, #1
 800200e:	2115      	movs	r1, #21
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fdd1 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8002016:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	b2da      	uxtb	r2, r3
 8002026:	7a3b      	ldrb	r3, [r7, #8]
 8002028:	f362 0303 	bfi	r3, r2, #0, #4
 800202c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800202e:	f107 0208 	add.w	r2, r7, #8
 8002032:	2301      	movs	r3, #1
 8002034:	2115      	movs	r1, #21
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fdd6 	bl	8001be8 <lsm6dsv16x_write_reg>
 800203c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002054:	f107 0208 	add.w	r2, r7, #8
 8002058:	2301      	movs	r3, #1
 800205a:	2117      	movs	r1, #23
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fdab 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8002062:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	b2da      	uxtb	r2, r3
 8002072:	7a3b      	ldrb	r3, [r7, #8]
 8002074:	f362 0301 	bfi	r3, r2, #0, #2
 8002078:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800207a:	f107 0208 	add.w	r2, r7, #8
 800207e:	2301      	movs	r3, #1
 8002080:	2117      	movs	r1, #23
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fdb0 	bl	8001be8 <lsm6dsv16x_write_reg>
 8002088:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800209e:	f107 0210 	add.w	r2, r7, #16
 80020a2:	2301      	movs	r3, #1
 80020a4:	210d      	movs	r1, #13
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fd86 	bl	8001bb8 <lsm6dsv16x_read_reg>
 80020ac:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <lsm6dsv16x_pin_int1_route_set+0x24>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	e0a0      	b.n	80021fa <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	7c3b      	ldrb	r3, [r7, #16]
 80020c4:	f362 0300 	bfi	r3, r2, #0, #1
 80020c8:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	7c3b      	ldrb	r3, [r7, #16]
 80020d6:	f362 0341 	bfi	r3, r2, #1, #1
 80020da:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	7c3b      	ldrb	r3, [r7, #16]
 80020e8:	f362 03c3 	bfi	r3, r2, #3, #1
 80020ec:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	7c3b      	ldrb	r3, [r7, #16]
 80020fa:	f362 1304 	bfi	r3, r2, #4, #1
 80020fe:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	7c3b      	ldrb	r3, [r7, #16]
 800210c:	f362 1345 	bfi	r3, r2, #5, #1
 8002110:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	7c3b      	ldrb	r3, [r7, #16]
 800211e:	f362 1386 	bfi	r3, r2, #6, #1
 8002122:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002124:	f107 0210 	add.w	r2, r7, #16
 8002128:	2301      	movs	r3, #1
 800212a:	210d      	movs	r1, #13
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fd5b 	bl	8001be8 <lsm6dsv16x_write_reg>
 8002132:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <lsm6dsv16x_pin_int1_route_set+0xaa>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	e05d      	b.n	80021fa <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800213e:	f107 020c 	add.w	r2, r7, #12
 8002142:	2301      	movs	r3, #1
 8002144:	215e      	movs	r1, #94	@ 0x5e
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fd36 	bl	8001bb8 <lsm6dsv16x_read_reg>
 800214c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	e050      	b.n	80021fa <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	f362 0300 	bfi	r3, r2, #0, #1
 8002168:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	7b3b      	ldrb	r3, [r7, #12]
 8002176:	f362 0341 	bfi	r3, r2, #1, #1
 800217a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	7b3b      	ldrb	r3, [r7, #12]
 8002188:	f362 0382 	bfi	r3, r2, #2, #1
 800218c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	f362 1386 	bfi	r3, r2, #6, #1
 800219e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	f362 03c3 	bfi	r3, r2, #3, #1
 80021b0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	7b3b      	ldrb	r3, [r7, #12]
 80021be:	f362 1345 	bfi	r3, r2, #5, #1
 80021c2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	7b3b      	ldrb	r3, [r7, #12]
 80021d0:	f362 1304 	bfi	r3, r2, #4, #1
 80021d4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	789b      	ldrb	r3, [r3, #2]
 80021da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	7b3b      	ldrb	r3, [r7, #12]
 80021e2:	f362 13c7 	bfi	r3, r2, #7, #1
 80021e6:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80021e8:	f107 020c 	add.w	r2, r7, #12
 80021ec:	2301      	movs	r3, #1
 80021ee:	215e      	movs	r1, #94	@ 0x5e
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fcf9 	bl	8001be8 <lsm6dsv16x_write_reg>
 80021f6:	6178      	str	r0, [r7, #20]

  return ret;
 80021f8:	697b      	ldr	r3, [r7, #20]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 800220e:	f107 0208 	add.w	r2, r7, #8
 8002212:	2301      	movs	r3, #1
 8002214:	2113      	movs	r1, #19
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fcce 	bl	8001bb8 <lsm6dsv16x_read_reg>
 800221c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	7a3b      	ldrb	r3, [r7, #8]
 800222e:	f362 0300 	bfi	r3, r2, #0, #1
 8002232:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002234:	f107 0208 	add.w	r2, r7, #8
 8002238:	2301      	movs	r3, #1
 800223a:	2113      	movs	r1, #19
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fcd3 	bl	8001be8 <lsm6dsv16x_write_reg>
 8002242:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800225a:	f107 0208 	add.w	r2, r7, #8
 800225e:	2301      	movs	r3, #1
 8002260:	2107      	movs	r1, #7
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fca8 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8002268:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002274:	f107 0208 	add.w	r2, r7, #8
 8002278:	2301      	movs	r3, #1
 800227a:	2107      	movs	r1, #7
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fcb3 	bl	8001be8 <lsm6dsv16x_write_reg>
 8002282:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800229a:	f107 0208 	add.w	r2, r7, #8
 800229e:	2301      	movs	r3, #1
 80022a0:	2109      	movs	r1, #9
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fc88 	bl	8001bb8 <lsm6dsv16x_read_reg>
 80022a8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10f      	bne.n	80022d0 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	7a3b      	ldrb	r3, [r7, #8]
 80022ba:	f362 0303 	bfi	r3, r2, #0, #4
 80022be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80022c0:	f107 0208 	add.w	r2, r7, #8
 80022c4:	2301      	movs	r3, #1
 80022c6:	2109      	movs	r1, #9
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fc8d 	bl	8001be8 <lsm6dsv16x_write_reg>
 80022ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80022e6:	f107 0208 	add.w	r2, r7, #8
 80022ea:	2301      	movs	r3, #1
 80022ec:	2109      	movs	r1, #9
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fc62 	bl	8001bb8 <lsm6dsv16x_read_reg>
 80022f4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10f      	bne.n	800231c <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	b2da      	uxtb	r2, r3
 8002304:	7a3b      	ldrb	r3, [r7, #8]
 8002306:	f362 1307 	bfi	r3, r2, #4, #4
 800230a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800230c:	f107 0208 	add.w	r2, r7, #8
 8002310:	2301      	movs	r3, #1
 8002312:	2109      	movs	r1, #9
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fc67 	bl	8001be8 <lsm6dsv16x_write_reg>
 800231a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002332:	f107 0208 	add.w	r2, r7, #8
 8002336:	2301      	movs	r3, #1
 8002338:	210a      	movs	r1, #10
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fc3c 	bl	8001bb8 <lsm6dsv16x_read_reg>
 8002340:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	b2da      	uxtb	r2, r3
 8002350:	7a3b      	ldrb	r3, [r7, #8]
 8002352:	f362 0302 	bfi	r3, r2, #0, #3
 8002356:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002358:	f107 0208 	add.w	r2, r7, #8
 800235c:	2301      	movs	r3, #1
 800235e:	210a      	movs	r1, #10
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fc41 	bl	8001be8 <lsm6dsv16x_write_reg>
 8002366:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 800237e:	f107 0208 	add.w	r2, r7, #8
 8002382:	2301      	movs	r3, #1
 8002384:	2103      	movs	r1, #3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fc16 	bl	8001bb8 <lsm6dsv16x_read_reg>
 800238c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10f      	bne.n	80023b4 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	7a3b      	ldrb	r3, [r7, #8]
 800239e:	f362 0300 	bfi	r3, r2, #0, #1
 80023a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80023a4:	f107 0208 	add.w	r2, r7, #8
 80023a8:	2301      	movs	r3, #1
 80023aa:	2103      	movs	r1, #3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fc1b 	bl	8001be8 <lsm6dsv16x_write_reg>
 80023b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80023b4:	68fb      	ldr	r3, [r7, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	461a      	mov	r2, r3
 80023ca:	460b      	mov	r3, r1
 80023cc:	72fb      	strb	r3, [r7, #11]
 80023ce:	4613      	mov	r3, r2
 80023d0:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023dc:	f007 fa54 	bl	8009888 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80023e0:	f107 010b 	add.w	r1, r7, #11
 80023e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e8:	2201      	movs	r2, #1
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f00a fcd5 	bl	800cd9a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 80023f0:	893a      	ldrh	r2, [r7, #8]
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f00a fcce 	bl	800cd9a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002408:	f007 fa3e 	bl	8009888 <HAL_GPIO_WritePin>
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	461a      	mov	r2, r3
 8002422:	460b      	mov	r3, r1
 8002424:	72fb      	strb	r3, [r7, #11]
 8002426:	4613      	mov	r3, r2
 8002428:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002430:	b2db      	uxtb	r3, r3
 8002432:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800243a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800243e:	f007 fa23 	bl	8009888 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002442:	f107 010b 	add.w	r1, r7, #11
 8002446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244a:	2201      	movs	r2, #1
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f00a fca4 	bl	800cd9a <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8002452:	893a      	ldrh	r2, [r7, #8]
 8002454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f00a fe13 	bl	800d086 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800246a:	f007 fa0d 	bl	8009888 <HAL_GPIO_WritePin>
	return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800247c:	f004 ffed 	bl	800745a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002480:	f000 f8fa 	bl	8002678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002484:	f000 fdbe 	bl	8003004 <MX_GPIO_Init>
  MX_DMA_Init();
 8002488:	f000 fd9e 	bl	8002fc8 <MX_DMA_Init>
  MX_QUADSPI_Init();
 800248c:	f000 fa20 	bl	80028d0 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8002490:	f000 fad6 	bl	8002a40 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002494:	f000 fd68 	bl	8002f68 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002498:	f000 f940 	bl	800271c <MX_ADC1_Init>
  MX_I2C3_Init();
 800249c:	f000 f9d8 	bl	8002850 <MX_I2C3_Init>
  MX_TIM2_Init();
 80024a0:	f000 fbf2 	bl	8002c88 <MX_TIM2_Init>
  MX_UART4_Init();
 80024a4:	f000 fd30 	bl	8002f08 <MX_UART4_Init>
  MX_TIM1_Init();
 80024a8:	f000 fb46 	bl	8002b38 <MX_TIM1_Init>
  MX_CRC_Init();
 80024ac:	f000 f9ae 	bl	800280c <MX_CRC_Init>
  MX_TIM4_Init();
 80024b0:	f000 fcb6 	bl	8002e20 <MX_TIM4_Init>
  MX_RTC_Init();
 80024b4:	f000 fa32 	bl	800291c <MX_RTC_Init>
  MX_SPI3_Init();
 80024b8:	f000 fb00 	bl	8002abc <MX_SPI3_Init>
  MX_TIM3_Init();
 80024bc:	f000 fc38 	bl	8002d30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 80024c0:	f7ff f8fe 	bl	80016c0 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 80024c4:	4b59      	ldr	r3, [pc, #356]	@ (800262c <main+0x1b4>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d07e      	beq.n	80025ca <main+0x152>
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f300 80a8 	bgt.w	8002622 <main+0x1aa>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <main+0x64>
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d04d      	beq.n	8002576 <main+0xfe>
		  }
		  state = MEASURE_INIT_STATE;
		  break;

	  default:
		  break;
 80024da:	e0a2      	b.n	8002622 <main+0x1aa>
		  res = f_open(&sys.file_meas_1, MEASURE_FILE_NAME_1, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80024dc:	220b      	movs	r2, #11
 80024de:	4954      	ldr	r1, [pc, #336]	@ (8002630 <main+0x1b8>)
 80024e0:	4854      	ldr	r0, [pc, #336]	@ (8002634 <main+0x1bc>)
 80024e2:	f003 fdbf 	bl	8006064 <f_open>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <main+0x1c0>)
 80024ec:	701a      	strb	r2, [r3, #0]
		  sys.file_meas_1_open = 1;
 80024ee:	4b53      	ldr	r3, [pc, #332]	@ (800263c <main+0x1c4>)
 80024f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		  res = f_open(&sys.file_meas_2, MEASURE_FILE_NAME_2, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80024fa:	220b      	movs	r2, #11
 80024fc:	4950      	ldr	r1, [pc, #320]	@ (8002640 <main+0x1c8>)
 80024fe:	4851      	ldr	r0, [pc, #324]	@ (8002644 <main+0x1cc>)
 8002500:	f003 fdb0 	bl	8006064 <f_open>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4b4b      	ldr	r3, [pc, #300]	@ (8002638 <main+0x1c0>)
 800250a:	701a      	strb	r2, [r3, #0]
		  sys.file_meas_2_open = 1;
 800250c:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <main+0x1c4>)
 800250e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002512:	2201      	movs	r2, #1
 8002514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		  memset(Pressure, 0, sizeof(Pressure));
 8002518:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800251c:	2100      	movs	r1, #0
 800251e:	484a      	ldr	r0, [pc, #296]	@ (8002648 <main+0x1d0>)
 8002520:	f00d ffc0 	bl	80104a4 <memset>
		  memset(Volume_Period, 0, sizeof(Volume_Period));
 8002524:	2228      	movs	r2, #40	@ 0x28
 8002526:	2100      	movs	r1, #0
 8002528:	4848      	ldr	r0, [pc, #288]	@ (800264c <main+0x1d4>)
 800252a:	f00d ffbb 	bl	80104a4 <memset>
		  memset(Acceleration, 0, sizeof(Acceleration));
 800252e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8002532:	2100      	movs	r1, #0
 8002534:	4846      	ldr	r0, [pc, #280]	@ (8002650 <main+0x1d8>)
 8002536:	f00d ffb5 	bl	80104a4 <memset>
		  memset(&Supply, 0, sizeof(Supply));
 800253a:	220c      	movs	r2, #12
 800253c:	2100      	movs	r1, #0
 800253e:	4845      	ldr	r0, [pc, #276]	@ (8002654 <main+0x1dc>)
 8002540:	f00d ffb0 	bl	80104a4 <memset>
		  Temperature = 0;
 8002544:	4b44      	ldr	r3, [pc, #272]	@ (8002658 <main+0x1e0>)
 8002546:	2200      	movs	r2, #0
 8002548:	801a      	strh	r2, [r3, #0]
		  Saves_cnt = 0;
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <main+0x1e4>)
 800254c:	2200      	movs	r2, #0
 800254e:	801a      	strh	r2, [r3, #0]
		  Address_Offset = 0;
 8002550:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <main+0x1e8>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
		  Seconds_After_Warning = 0;
 8002556:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <main+0x1ec>)
 8002558:	2200      	movs	r2, #0
 800255a:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 800255c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002560:	4939      	ldr	r1, [pc, #228]	@ (8002648 <main+0x1d0>)
 8002562:	4841      	ldr	r0, [pc, #260]	@ (8002668 <main+0x1f0>)
 8002564:	f005 fb86 	bl	8007c74 <HAL_ADC_Start_DMA>
		  HAL_TIM_Base_Start_IT(ADC_TIMER);
 8002568:	4840      	ldr	r0, [pc, #256]	@ (800266c <main+0x1f4>)
 800256a:	f00b faf7 	bl	800db5c <HAL_TIM_Base_Start_IT>
		  state = MEASURING_STATE;
 800256e:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <main+0x1b4>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
		  break;
 8002574:	e058      	b.n	8002628 <main+0x1b0>
		  if(flags.ADC_Complete && flags.ACC_Complete)
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <main+0x1f8>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d050      	beq.n	8002626 <main+0x1ae>
 8002584:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <main+0x1f8>)
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d049      	beq.n	8002626 <main+0x1ae>
			  Data_Logging();
 8002592:	f000 fe33 	bl	80031fc <Data_Logging>
			  if(flags.BC_Interrupt)
 8002596:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <main+0x1f8>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d040      	beq.n	8002626 <main+0x1ae>
				  BC_Read_Flags(&sys.BC_Flags);
 80025a4:	4833      	ldr	r0, [pc, #204]	@ (8002674 <main+0x1fc>)
 80025a6:	f7fe fc61 	bl	8000e6c <BC_Read_Flags>
				  BC_Manage_Interrupts(sys.BC_Flags);
 80025aa:	4b24      	ldr	r3, [pc, #144]	@ (800263c <main+0x1c4>)
 80025ac:	f503 5342 	add.w	r3, r3, #12416	@ 0x3080
 80025b0:	3310      	adds	r3, #16
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fcdb 	bl	8000f74 <BC_Manage_Interrupts>
				  flags.BC_Interrupt = 0;
 80025be:	4a2c      	ldr	r2, [pc, #176]	@ (8002670 <main+0x1f8>)
 80025c0:	7813      	ldrb	r3, [r2, #0]
 80025c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025c6:	7013      	strb	r3, [r2, #0]
		  break;
 80025c8:	e02d      	b.n	8002626 <main+0x1ae>
		  HAL_ADC_Stop_DMA(PRESSURE_ADC);
 80025ca:	4827      	ldr	r0, [pc, #156]	@ (8002668 <main+0x1f0>)
 80025cc:	f005 fc0e 	bl	8007dec <HAL_ADC_Stop_DMA>
		  HAL_TIM_Base_Stop_IT(ADC_TIMER);
 80025d0:	4826      	ldr	r0, [pc, #152]	@ (800266c <main+0x1f4>)
 80025d2:	f00b fb33 	bl	800dc3c <HAL_TIM_Base_Stop_IT>
		  Send_Measure();
 80025d6:	f001 f83d 	bl	8003654 <Send_Measure>
		  if(sys.file_meas_1_open == 1)
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <main+0x1c4>)
 80025dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d108      	bne.n	80025fa <main+0x182>
			  f_unlink(MEASURE_FILE_NAME_1);
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <main+0x1b8>)
 80025ea:	f004 f8fb 	bl	80067e4 <f_unlink>
			  sys.file_meas_1_open = 0;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <main+0x1c4>)
 80025f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		  if(sys.file_meas_2_open == 1)
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <main+0x1c4>)
 80025fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002600:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d108      	bne.n	800261a <main+0x1a2>
			  f_unlink(MEASURE_FILE_NAME_2);
 8002608:	480d      	ldr	r0, [pc, #52]	@ (8002640 <main+0x1c8>)
 800260a:	f004 f8eb 	bl	80067e4 <f_unlink>
			  sys.file_meas_2_open = 0;
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <main+0x1c4>)
 8002610:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002614:	2200      	movs	r2, #0
 8002616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		  state = MEASURE_INIT_STATE;
 800261a:	4b04      	ldr	r3, [pc, #16]	@ (800262c <main+0x1b4>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
		  break;
 8002620:	e002      	b.n	8002628 <main+0x1b0>
		  break;
 8002622:	bf00      	nop
 8002624:	e74e      	b.n	80024c4 <main+0x4c>
		  break;
 8002626:	bf00      	nop
	  switch(state)
 8002628:	e74c      	b.n	80024c4 <main+0x4c>
 800262a:	bf00      	nop
 800262c:	20000524 	.word	0x20000524
 8002630:	08010fb8 	.word	0x08010fb8
 8002634:	2000155c 	.word	0x2000155c
 8002638:	2000771c 	.word	0x2000771c
 800263c:	20000528 	.word	0x20000528
 8002640:	08010fc8 	.word	0x08010fc8
 8002644:	20002588 	.word	0x20002588
 8002648:	200058fc 	.word	0x200058fc
 800264c:	2000689c 	.word	0x2000689c
 8002650:	200068c4 	.word	0x200068c4
 8002654:	200058ec 	.word	0x200058ec
 8002658:	20006b86 	.word	0x20006b86
 800265c:	2000771a 	.word	0x2000771a
 8002660:	200076b0 	.word	0x200076b0
 8002664:	20007718 	.word	0x20007718
 8002668:	20000090 	.word	0x20000090
 800266c:	200003c8 	.word	0x200003c8
 8002670:	20003880 	.word	0x20003880
 8002674:	200035b8 	.word	0x200035b8

08002678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b096      	sub	sp, #88	@ 0x58
 800267c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	2244      	movs	r2, #68	@ 0x44
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f00d ff0c 	bl	80104a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800268c:	463b      	mov	r3, r7
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800269a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800269e:	f007 ff01 	bl	800a4a4 <HAL_PWREx_ControlVoltageScaling>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026a8:	f000 fda2 	bl	80031f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80026ac:	2309      	movs	r3, #9
 80026ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026b6:	2301      	movs	r3, #1
 80026b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ba:	2302      	movs	r3, #2
 80026bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026be:	2303      	movs	r3, #3
 80026c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80026c6:	2314      	movs	r3, #20
 80026c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026ca:	2307      	movs	r3, #7
 80026cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026ce:	2302      	movs	r3, #2
 80026d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4618      	mov	r0, r3
 80026dc:	f008 fb9a 	bl	800ae14 <HAL_RCC_OscConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80026e6:	f000 fd83 	bl	80031f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ea:	230f      	movs	r3, #15
 80026ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ee:	2303      	movs	r3, #3
 80026f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026fe:	463b      	mov	r3, r7
 8002700:	2104      	movs	r1, #4
 8002702:	4618      	mov	r0, r3
 8002704:	f008 ff62 	bl	800b5cc <HAL_RCC_ClockConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800270e:	f000 fd6f 	bl	80031f0 <Error_Handler>
  }
}
 8002712:	bf00      	nop
 8002714:	3758      	adds	r7, #88	@ 0x58
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
 800273c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800273e:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002740:	4a30      	ldr	r2, [pc, #192]	@ (8002804 <MX_ADC1_Init+0xe8>)
 8002742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002744:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800274a:	4b2d      	ldr	r3, [pc, #180]	@ (8002800 <MX_ADC1_Init+0xe4>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002750:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002756:	4b2a      	ldr	r3, [pc, #168]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800275c:	4b28      	ldr	r3, [pc, #160]	@ (8002800 <MX_ADC1_Init+0xe4>)
 800275e:	2208      	movs	r2, #8
 8002760:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002762:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002764:	2200      	movs	r2, #0
 8002766:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002768:	4b25      	ldr	r3, [pc, #148]	@ (8002800 <MX_ADC1_Init+0xe4>)
 800276a:	2200      	movs	r2, #0
 800276c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800276e:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002770:	2201      	movs	r2, #1
 8002772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002774:	4b22      	ldr	r3, [pc, #136]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800277c:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <MX_ADC1_Init+0xe4>)
 800277e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800278c:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <MX_ADC1_Init+0xe4>)
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002794:	4b1a      	ldr	r3, [pc, #104]	@ (8002800 <MX_ADC1_Init+0xe4>)
 8002796:	2200      	movs	r2, #0
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800279a:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <MX_ADC1_Init+0xe4>)
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027a2:	4817      	ldr	r0, [pc, #92]	@ (8002800 <MX_ADC1_Init+0xe4>)
 80027a4:	f005 f916 	bl	80079d4 <HAL_ADC_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80027ae:	f000 fd1f 	bl	80031f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	4619      	mov	r1, r3
 80027bc:	4810      	ldr	r0, [pc, #64]	@ (8002800 <MX_ADC1_Init+0xe4>)
 80027be:	f006 f9cf 	bl	8008b60 <HAL_ADCEx_MultiModeConfigChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80027c8:	f000 fd12 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <MX_ADC1_Init+0xec>)
 80027ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027d0:	2306      	movs	r3, #6
 80027d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027d8:	237f      	movs	r3, #127	@ 0x7f
 80027da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027dc:	2304      	movs	r3, #4
 80027de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_ADC1_Init+0xe4>)
 80027ea:	f005 fb6b 	bl	8007ec4 <HAL_ADC_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80027f4:	f000 fcfc 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	@ 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000090 	.word	0x20000090
 8002804:	50040000 	.word	0x50040000
 8002808:	25b00200 	.word	0x25b00200

0800280c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <MX_CRC_Init+0x3c>)
 8002812:	4a0e      	ldr	r2, [pc, #56]	@ (800284c <MX_CRC_Init+0x40>)
 8002814:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <MX_CRC_Init+0x3c>)
 8002818:	2200      	movs	r2, #0
 800281a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <MX_CRC_Init+0x3c>)
 800281e:	2200      	movs	r2, #0
 8002820:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_CRC_Init+0x3c>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <MX_CRC_Init+0x3c>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_CRC_Init+0x3c>)
 8002830:	2201      	movs	r2, #1
 8002832:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <MX_CRC_Init+0x3c>)
 8002836:	f006 fb55 	bl	8008ee4 <HAL_CRC_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002840:	f000 fcd6 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000013c 	.word	0x2000013c
 800284c:	40023000 	.word	0x40023000

08002850 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <MX_I2C3_Init+0x74>)
 8002856:	4a1c      	ldr	r2, [pc, #112]	@ (80028c8 <MX_I2C3_Init+0x78>)
 8002858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <MX_I2C3_Init+0x74>)
 800285c:	4a1b      	ldr	r2, [pc, #108]	@ (80028cc <MX_I2C3_Init+0x7c>)
 800285e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002860:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <MX_I2C3_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002866:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <MX_I2C3_Init+0x74>)
 8002868:	2201      	movs	r2, #1
 800286a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <MX_I2C3_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002872:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <MX_I2C3_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <MX_I2C3_Init+0x74>)
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <MX_I2C3_Init+0x74>)
 8002880:	2200      	movs	r2, #0
 8002882:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_I2C3_Init+0x74>)
 8002886:	2200      	movs	r2, #0
 8002888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800288a:	480e      	ldr	r0, [pc, #56]	@ (80028c4 <MX_I2C3_Init+0x74>)
 800288c:	f007 f814 	bl	80098b8 <HAL_I2C_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002896:	f000 fcab 	bl	80031f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800289a:	2100      	movs	r1, #0
 800289c:	4809      	ldr	r0, [pc, #36]	@ (80028c4 <MX_I2C3_Init+0x74>)
 800289e:	f007 fd5b 	bl	800a358 <HAL_I2CEx_ConfigAnalogFilter>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80028a8:	f000 fca2 	bl	80031f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028ac:	2100      	movs	r1, #0
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_I2C3_Init+0x74>)
 80028b0:	f007 fd9d 	bl	800a3ee <HAL_I2CEx_ConfigDigitalFilter>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80028ba:	f000 fc99 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000160 	.word	0x20000160
 80028c8:	40005c00 	.word	0x40005c00
 80028cc:	10909cec 	.word	0x10909cec

080028d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028d6:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <MX_QUADSPI_Init+0x48>)
 80028d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80028da:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028dc:	22ff      	movs	r2, #255	@ 0xff
 80028de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80028ec:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	@ (8002914 <MX_QUADSPI_Init+0x44>)
 8002900:	f007 fe26 	bl	800a550 <HAL_QSPI_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800290a:	f000 fc71 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200001b4 	.word	0x200001b4
 8002918:	a0001000 	.word	0xa0001000

0800291c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b092      	sub	sp, #72	@ 0x48
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002922:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	222c      	movs	r2, #44	@ 0x2c
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f00d fdb1 	bl	80104a4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002942:	4b3c      	ldr	r3, [pc, #240]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002944:	4a3c      	ldr	r2, [pc, #240]	@ (8002a38 <MX_RTC_Init+0x11c>)
 8002946:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002948:	4b3a      	ldr	r3, [pc, #232]	@ (8002a34 <MX_RTC_Init+0x118>)
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800294e:	4b39      	ldr	r3, [pc, #228]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002950:	227f      	movs	r2, #127	@ 0x7f
 8002952:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002954:	4b37      	ldr	r3, [pc, #220]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002956:	22ff      	movs	r2, #255	@ 0xff
 8002958:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800295a:	4b36      	ldr	r3, [pc, #216]	@ (8002a34 <MX_RTC_Init+0x118>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002960:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002966:	4b33      	ldr	r3, [pc, #204]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800296c:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <MX_RTC_Init+0x118>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002972:	4830      	ldr	r0, [pc, #192]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002974:	f009 fd0a 	bl	800c38c <HAL_RTC_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800297e:	f000 fc37 	bl	80031f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002994:	2300      	movs	r3, #0
 8002996:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800299c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029a0:	2200      	movs	r2, #0
 80029a2:	4619      	mov	r1, r3
 80029a4:	4823      	ldr	r0, [pc, #140]	@ (8002a34 <MX_RTC_Init+0x118>)
 80029a6:	f009 fd79 	bl	800c49c <HAL_RTC_SetTime>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80029b0:	f000 fc1e 	bl	80031f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80029cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029d0:	2200      	movs	r2, #0
 80029d2:	4619      	mov	r1, r3
 80029d4:	4817      	ldr	r0, [pc, #92]	@ (8002a34 <MX_RTC_Init+0x118>)
 80029d6:	f009 fe5a 	bl	800c68e <HAL_RTC_SetDate>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80029e0:	f000 fc06 	bl	80031f0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80029fc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <MX_RTC_Init+0x120>)
 80029fe:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4806      	ldr	r0, [pc, #24]	@ (8002a34 <MX_RTC_Init+0x118>)
 8002a1c:	f009 febe 	bl	800c79c <HAL_RTC_SetAlarm_IT>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002a26:	f000 fbe3 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	3748      	adds	r7, #72	@ 0x48
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200001f8 	.word	0x200001f8
 8002a38:	40002800 	.word	0x40002800
 8002a3c:	80800080 	.word	0x80800080

08002a40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a46:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <MX_SPI2_Init+0x78>)
 8002a48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a58:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a5a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a8e:	2207      	movs	r2, #7
 8002a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <MX_SPI2_Init+0x74>)
 8002aa0:	f00a f8d8 	bl	800cc54 <HAL_SPI_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002aaa:	f000 fba1 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000021c 	.word	0x2000021c
 8002ab8:	40003800 	.word	0x40003800

08002abc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <MX_SPI3_Init+0x78>)
 8002ac4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002acc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ace:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ad4:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002ad6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002ada:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002b16:	2208      	movs	r2, #8
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	@ (8002b30 <MX_SPI3_Init+0x74>)
 8002b1c:	f00a f89a 	bl	800cc54 <HAL_SPI_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002b26:	f000 fb63 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000280 	.word	0x20000280
 8002b34:	40003c00 	.word	0x40003c00

08002b38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b096      	sub	sp, #88	@ 0x58
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	222c      	movs	r2, #44	@ 0x2c
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f00d fc9d 	bl	80104a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b6a:	4b45      	ldr	r3, [pc, #276]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b6c:	4a45      	ldr	r2, [pc, #276]	@ (8002c84 <MX_TIM1_Init+0x14c>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8002b70:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b72:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b80:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002b98:	4839      	ldr	r0, [pc, #228]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002b9a:	f00b f87e 	bl	800dc9a <HAL_TIM_OC_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002ba4:	f000 fb24 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bac:	2300      	movs	r3, #0
 8002bae:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4831      	ldr	r0, [pc, #196]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002bbc:	f00c fb6e 	bl	800f29c <HAL_TIMEx_MasterConfigSynchronization>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002bc6:	f000 fb13 	bl	80031f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	4824      	ldr	r0, [pc, #144]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002bf0:	f00b fb00 	bl	800e1f4 <HAL_TIM_OC_ConfigChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002bfa:	f000 faf9 	bl	80031f0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c02:	2204      	movs	r2, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	481e      	ldr	r0, [pc, #120]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002c08:	f00b faf4 	bl	800e1f4 <HAL_TIM_OC_ConfigChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8002c12:	f000 faed 	bl	80031f0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4818      	ldr	r0, [pc, #96]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002c20:	f00b fae8 	bl	800e1f4 <HAL_TIM_OC_ConfigChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002c2a:	f000 fae1 	bl	80031f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4807      	ldr	r0, [pc, #28]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002c64:	f00c fba2 	bl	800f3ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002c6e:	f000 fabf 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c72:	4803      	ldr	r0, [pc, #12]	@ (8002c80 <MX_TIM1_Init+0x148>)
 8002c74:	f001 f9e4 	bl	8004040 <HAL_TIM_MspPostInit>

}
 8002c78:	bf00      	nop
 8002c7a:	3758      	adds	r7, #88	@ 0x58
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200002e4 	.word	0x200002e4
 8002c84:	40012c00 	.word	0x40012c00

08002c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ca6:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002ca8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cae:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cce:	4817      	ldr	r0, [pc, #92]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cd0:	f00b fa38 	bl	800e144 <HAL_TIM_IC_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cda:	f000 fa89 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	480f      	ldr	r0, [pc, #60]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002cee:	f00c fad5 	bl	800f29c <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002cf8:	f000 fa7a 	bl	80031f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d00:	2301      	movs	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4619      	mov	r1, r3
 8002d12:	4806      	ldr	r0, [pc, #24]	@ (8002d2c <MX_TIM2_Init+0xa4>)
 8002d14:	f00b fae8 	bl	800e2e8 <HAL_TIM_IC_ConfigChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d1e:	f000 fa67 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000330 	.word	0x20000330

08002d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	@ 0x38
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d50:	463b      	mov	r3, r7
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	615a      	str	r2, [r3, #20]
 8002d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d62:	4b2d      	ldr	r3, [pc, #180]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d64:	4a2d      	ldr	r2, [pc, #180]	@ (8002e1c <MX_TIM3_Init+0xec>)
 8002d66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d68:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d74:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7c:	4b26      	ldr	r3, [pc, #152]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d82:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d88:	4823      	ldr	r0, [pc, #140]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002d8a:	f00a fe8f 	bl	800daac <HAL_TIM_Base_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d94:	f000 fa2c 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002da2:	4619      	mov	r1, r3
 8002da4:	481c      	ldr	r0, [pc, #112]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002da6:	f00b fc4f 	bl	800e648 <HAL_TIM_ConfigClockSource>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002db0:	f000 fa1e 	bl	80031f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002db4:	4818      	ldr	r0, [pc, #96]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002db6:	f00a ffc7 	bl	800dd48 <HAL_TIM_PWM_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002dc0:	f000 fa16 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4811      	ldr	r0, [pc, #68]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002dd4:	f00c fa62 	bl	800f29c <HAL_TIMEx_MasterConfigSynchronization>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002dde:	f000 fa07 	bl	80031f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de2:	2360      	movs	r3, #96	@ 0x60
 8002de4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df2:	463b      	mov	r3, r7
 8002df4:	2208      	movs	r2, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002dfa:	f00b fb11 	bl	800e420 <HAL_TIM_PWM_ConfigChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e04:	f000 f9f4 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e08:	4803      	ldr	r0, [pc, #12]	@ (8002e18 <MX_TIM3_Init+0xe8>)
 8002e0a:	f001 f919 	bl	8004040 <HAL_TIM_MspPostInit>

}
 8002e0e:	bf00      	nop
 8002e10:	3738      	adds	r7, #56	@ 0x38
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000037c 	.word	0x2000037c
 8002e1c:	40000400 	.word	0x40000400

08002e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	@ 0x38
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e40:	463b      	mov	r3, r7
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]
 8002e4e:	615a      	str	r2, [r3, #20]
 8002e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e52:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e54:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <MX_TIM4_Init+0xe4>)
 8002e56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8002e58:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e5a:	f240 321f 	movw	r2, #799	@ 0x31f
 8002e5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e60:	4b27      	ldr	r3, [pc, #156]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002e66:	4b26      	ldr	r3, [pc, #152]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e68:	2263      	movs	r2, #99	@ 0x63
 8002e6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6c:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e78:	4821      	ldr	r0, [pc, #132]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e7a:	f00a fe17 	bl	800daac <HAL_TIM_Base_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002e84:	f000 f9b4 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e92:	4619      	mov	r1, r3
 8002e94:	481a      	ldr	r0, [pc, #104]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002e96:	f00b fbd7 	bl	800e648 <HAL_TIM_ConfigClockSource>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002ea0:	f000 f9a6 	bl	80031f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002ea4:	4816      	ldr	r0, [pc, #88]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002ea6:	f00a fef8 	bl	800dc9a <HAL_TIM_OC_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002eb0:	f000 f99e 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480f      	ldr	r0, [pc, #60]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002ec4:	f00c f9ea 	bl	800f29c <HAL_TIMEx_MasterConfigSynchronization>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002ece:	f000 f98f 	bl	80031f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <MX_TIM4_Init+0xe0>)
 8002eea:	f00b f983 	bl	800e1f4 <HAL_TIM_OC_ConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002ef4:	f000 f97c 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3738      	adds	r7, #56	@ 0x38
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200003c8 	.word	0x200003c8
 8002f04:	40000800 	.word	0x40000800

08002f08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f0c:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f0e:	4a15      	ldr	r2, [pc, #84]	@ (8002f64 <MX_UART4_Init+0x5c>)
 8002f10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f2e:	220c      	movs	r2, #12
 8002f30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8002f4a:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <MX_UART4_Init+0x58>)
 8002f4c:	f00c fafa 	bl	800f544 <HAL_HalfDuplex_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002f56:	f000 f94b 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000414 	.word	0x20000414
 8002f64:	40004c00 	.word	0x40004c00

08002f68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f6e:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <MX_USART1_UART_Init+0x5c>)
 8002f70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f72:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f8e:	220c      	movs	r2, #12
 8002f90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f94:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f98:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fa0:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fac:	4804      	ldr	r0, [pc, #16]	@ (8002fc0 <MX_USART1_UART_Init+0x58>)
 8002fae:	f00c fa7b 	bl	800f4a8 <HAL_UART_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002fb8:	f000 f91a 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	2000049c 	.word	0x2000049c
 8002fc4:	40013800 	.word	0x40013800

08002fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <MX_DMA_Init+0x38>)
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003000 <MX_DMA_Init+0x38>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <MX_DMA_Init+0x38>)
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	200b      	movs	r0, #11
 8002fec:	f005 ff43 	bl	8008e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ff0:	200b      	movs	r0, #11
 8002ff2:	f005 ff5c 	bl	8008eae <HAL_NVIC_EnableIRQ>

}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800301a:	4b71      	ldr	r3, [pc, #452]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	4a70      	ldr	r2, [pc, #448]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003026:	4b6e      	ldr	r3, [pc, #440]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003032:	4b6b      	ldr	r3, [pc, #428]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003036:	4a6a      	ldr	r2, [pc, #424]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800303e:	4b68      	ldr	r3, [pc, #416]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	4b65      	ldr	r3, [pc, #404]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304e:	4a64      	ldr	r2, [pc, #400]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003056:	4b62      	ldr	r3, [pc, #392]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003066:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800306e:	4b5c      	ldr	r3, [pc, #368]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800307a:	4b59      	ldr	r3, [pc, #356]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307e:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003080:	f043 0308 	orr.w	r3, r3, #8
 8003084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003086:	4b56      	ldr	r3, [pc, #344]	@ (80031e0 <MX_GPIO_Init+0x1dc>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	2108      	movs	r1, #8
 8003096:	4853      	ldr	r0, [pc, #332]	@ (80031e4 <MX_GPIO_Init+0x1e0>)
 8003098:	f006 fbf6 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 800309c:	2201      	movs	r2, #1
 800309e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030a2:	4851      	ldr	r0, [pc, #324]	@ (80031e8 <MX_GPIO_Init+0x1e4>)
 80030a4:	f006 fbf0 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80030a8:	2201      	movs	r2, #1
 80030aa:	21c0      	movs	r1, #192	@ 0xc0
 80030ac:	484d      	ldr	r0, [pc, #308]	@ (80031e4 <MX_GPIO_Init+0x1e0>)
 80030ae:	f006 fbeb 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 80030b2:	2201      	movs	r2, #1
 80030b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80030b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030bc:	f006 fbe4 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030ca:	f006 fbdd 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030d4:	4844      	ldr	r0, [pc, #272]	@ (80031e8 <MX_GPIO_Init+0x1e4>)
 80030d6:	f006 fbd7 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 80030da:	f242 0310 	movw	r3, #8208	@ 0x2010
 80030de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	483c      	ldr	r0, [pc, #240]	@ (80031e4 <MX_GPIO_Init+0x1e0>)
 80030f2:	f006 fa1f 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 80030f6:	23c8      	movs	r3, #200	@ 0xc8
 80030f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4619      	mov	r1, r3
 800310c:	4835      	ldr	r0, [pc, #212]	@ (80031e4 <MX_GPIO_Init+0x1e0>)
 800310e:	f006 fa11 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003112:	2308      	movs	r3, #8
 8003114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	4619      	mov	r1, r3
 8003124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003128:	f006 fa04 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 800312c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	4828      	ldr	r0, [pc, #160]	@ (80031e8 <MX_GPIO_Init+0x1e4>)
 8003146:	f006 f9f5 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 800314a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800314e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003150:	2311      	movs	r3, #17
 8003152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003166:	f006 f9e5 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_nCS_Pin */
  GPIO_InitStruct.Pin = ACC_nCS_Pin;
 800316a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003186:	f006 f9d5 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800318a:	2304      	movs	r3, #4
 800318c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800318e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4619      	mov	r1, r3
 800319e:	4813      	ldr	r0, [pc, #76]	@ (80031ec <MX_GPIO_Init+0x1e8>)
 80031a0:	f006 f9c8 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 80031a4:	2320      	movs	r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4619      	mov	r1, r3
 80031b6:	480c      	ldr	r0, [pc, #48]	@ (80031e8 <MX_GPIO_Init+0x1e4>)
 80031b8:	f006 f9bc 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4619      	mov	r1, r3
 80031d2:	4805      	ldr	r0, [pc, #20]	@ (80031e8 <MX_GPIO_Init+0x1e4>)
 80031d4:	f006 f9ae 	bl	8009534 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80031d8:	bf00      	nop
 80031da:	3728      	adds	r7, #40	@ 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	48000800 	.word	0x48000800
 80031e8:	48000400 	.word	0x48000400
 80031ec:	48000c00 	.word	0x48000c00

080031f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <Error_Handler+0x8>

080031fc <Data_Logging>:
#include "string.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Data_Logging(void)
{
 80031fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fe:	b08b      	sub	sp, #44	@ 0x2c
 8003200:	af08      	add	r7, sp, #32
	if(flags.ADC_Half_Buffer)
 8003202:	4b8c      	ldr	r3, [pc, #560]	@ (8003434 <Data_Logging+0x238>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d018      	beq.n	8003242 <Data_Logging+0x46>
	{
		memcpy(Logging_Buffer + Address_Offset, &Pressure[0], PRESS_FULL_SAMPLES);
 8003210:	4b89      	ldr	r3, [pc, #548]	@ (8003438 <Data_Logging+0x23c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b89      	ldr	r3, [pc, #548]	@ (800343c <Data_Logging+0x240>)
 8003218:	4413      	add	r3, r2
 800321a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800321e:	4988      	ldr	r1, [pc, #544]	@ (8003440 <Data_Logging+0x244>)
 8003220:	4618      	mov	r0, r3
 8003222:	f00d f997 	bl	8010554 <memcpy>
		Last_Pressure = Pressure[PRESS_HALF_SAMPLES - 1];
 8003226:	4b86      	ldr	r3, [pc, #536]	@ (8003440 <Data_Logging+0x244>)
 8003228:	f8b3 27ce 	ldrh.w	r2, [r3, #1998]	@ 0x7ce
 800322c:	4b85      	ldr	r3, [pc, #532]	@ (8003444 <Data_Logging+0x248>)
 800322e:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8003230:	4883      	ldr	r0, [pc, #524]	@ (8003440 <Data_Logging+0x244>)
 8003232:	f000 f923 	bl	800347c <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8003236:	4a7f      	ldr	r2, [pc, #508]	@ (8003434 <Data_Logging+0x238>)
 8003238:	7813      	ldrb	r3, [r2, #0]
 800323a:	f023 0302 	bic.w	r3, r3, #2
 800323e:	7013      	strb	r3, [r2, #0]
 8003240:	e01e      	b.n	8003280 <Data_Logging+0x84>
	}
	else if(flags.ADC_Full_Buffer)
 8003242:	4b7c      	ldr	r3, [pc, #496]	@ (8003434 <Data_Logging+0x238>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <Data_Logging+0x84>
	{
		memcpy(Logging_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_FULL_SAMPLES);
 8003250:	4b79      	ldr	r3, [pc, #484]	@ (8003438 <Data_Logging+0x23c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b79      	ldr	r3, [pc, #484]	@ (800343c <Data_Logging+0x240>)
 8003258:	4413      	add	r3, r2
 800325a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800325e:	497a      	ldr	r1, [pc, #488]	@ (8003448 <Data_Logging+0x24c>)
 8003260:	4618      	mov	r0, r3
 8003262:	f00d f977 	bl	8010554 <memcpy>
		Last_Pressure = Pressure[PRESS_FULL_SAMPLES - 1];
 8003266:	4b76      	ldr	r3, [pc, #472]	@ (8003440 <Data_Logging+0x244>)
 8003268:	f8b3 2f9e 	ldrh.w	r2, [r3, #3998]	@ 0xf9e
 800326c:	4b75      	ldr	r3, [pc, #468]	@ (8003444 <Data_Logging+0x248>)
 800326e:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8003270:	4875      	ldr	r0, [pc, #468]	@ (8003448 <Data_Logging+0x24c>)
 8003272:	f000 f903 	bl	800347c <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8003276:	4a6f      	ldr	r2, [pc, #444]	@ (8003434 <Data_Logging+0x238>)
 8003278:	7813      	ldrb	r3, [r2, #0]
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += PRESS_FULL_SAMPLES;
 8003280:	4b6d      	ldr	r3, [pc, #436]	@ (8003438 <Data_Logging+0x23c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003288:	4a6b      	ldr	r2, [pc, #428]	@ (8003438 <Data_Logging+0x23c>)
 800328a:	6013      	str	r3, [r2, #0]

	memcpy(Logging_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 800328c:	4b6a      	ldr	r3, [pc, #424]	@ (8003438 <Data_Logging+0x23c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <Data_Logging+0x240>)
 8003294:	4413      	add	r3, r2
 8003296:	2228      	movs	r2, #40	@ 0x28
 8003298:	496c      	ldr	r1, [pc, #432]	@ (800344c <Data_Logging+0x250>)
 800329a:	4618      	mov	r0, r3
 800329c:	f00d f95a 	bl	8010554 <memcpy>
	Last_Volume = Volume_Period[Period_cnt];
 80032a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003450 <Data_Logging+0x254>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b69      	ldr	r3, [pc, #420]	@ (800344c <Data_Logging+0x250>)
 80032a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80032ac:	4b69      	ldr	r3, [pc, #420]	@ (8003454 <Data_Logging+0x258>)
 80032ae:	801a      	strh	r2, [r3, #0]
	Period_cnt = 0;
 80032b0:	4b67      	ldr	r3, [pc, #412]	@ (8003450 <Data_Logging+0x254>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 80032b6:	4b60      	ldr	r3, [pc, #384]	@ (8003438 <Data_Logging+0x23c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3328      	adds	r3, #40	@ 0x28
 80032bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003438 <Data_Logging+0x23c>)
 80032be:	6013      	str	r3, [r2, #0]

	if(flags.ACC_Present)
 80032c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003434 <Data_Logging+0x238>)
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d017      	beq.n	80032fe <Data_Logging+0x102>
	{
		memcpy(Logging_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 80032ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003438 <Data_Logging+0x23c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b59      	ldr	r3, [pc, #356]	@ (800343c <Data_Logging+0x240>)
 80032d6:	4413      	add	r3, r2
 80032d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003458 <Data_Logging+0x25c>)
 80032da:	4618      	mov	r0, r3
 80032dc:	4611      	mov	r1, r2
 80032de:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80032e2:	461a      	mov	r2, r3
 80032e4:	f00d f936 	bl	8010554 <memcpy>
		Last_Acceleration = Acceleration[ACCELERATION_LEN - 1];
 80032e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003458 <Data_Logging+0x25c>)
 80032ea:	f893 32bb 	ldrb.w	r3, [r3, #699]	@ 0x2bb
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b5a      	ldr	r3, [pc, #360]	@ (800345c <Data_Logging+0x260>)
 80032f2:	801a      	strh	r2, [r3, #0]
		flags.ACC_Complete = 0;
 80032f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003434 <Data_Logging+0x238>)
 80032f6:	7853      	ldrb	r3, [r2, #1]
 80032f8:	f023 0302 	bic.w	r3, r3, #2
 80032fc:	7053      	strb	r3, [r2, #1]
	}
	Address_Offset += ACCELERATION_LEN;
 80032fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003438 <Data_Logging+0x23c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8003306:	4a4c      	ldr	r2, [pc, #304]	@ (8003438 <Data_Logging+0x23c>)
 8003308:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 800330a:	4855      	ldr	r0, [pc, #340]	@ (8003460 <Data_Logging+0x264>)
 800330c:	f7fd fa7f 	bl	800080e <INA3221_Read_Measure>
	memcpy(Logging_Buffer + Address_Offset, &Supply, SUPPLY_LEN);
 8003310:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <Data_Logging+0x23c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b49      	ldr	r3, [pc, #292]	@ (800343c <Data_Logging+0x240>)
 8003318:	4413      	add	r3, r2
 800331a:	220c      	movs	r2, #12
 800331c:	4950      	ldr	r1, [pc, #320]	@ (8003460 <Data_Logging+0x264>)
 800331e:	4618      	mov	r0, r3
 8003320:	f00d f918 	bl	8010554 <memcpy>
	Address_Offset += SUPPLY_LEN;
 8003324:	4b44      	ldr	r3, [pc, #272]	@ (8003438 <Data_Logging+0x23c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	4a43      	ldr	r2, [pc, #268]	@ (8003438 <Data_Logging+0x23c>)
 800332c:	6013      	str	r3, [r2, #0]

	Temperature = Read_Temperature();
 800332e:	f7fd fa1d 	bl	800076c <Read_Temperature>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	4b4b      	ldr	r3, [pc, #300]	@ (8003464 <Data_Logging+0x268>)
 8003338:	801a      	strh	r2, [r3, #0]
	memcpy(Logging_Buffer + Address_Offset, &Temperature, TEMP_LEN);
 800333a:	4b3f      	ldr	r3, [pc, #252]	@ (8003438 <Data_Logging+0x23c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	4b3e      	ldr	r3, [pc, #248]	@ (800343c <Data_Logging+0x240>)
 8003342:	4413      	add	r3, r2
 8003344:	4a47      	ldr	r2, [pc, #284]	@ (8003464 <Data_Logging+0x268>)
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	801a      	strh	r2, [r3, #0]

	RAM_Save_Measure(Logging_Buffer);
 800334a:	483c      	ldr	r0, [pc, #240]	@ (800343c <Data_Logging+0x240>)
 800334c:	f000 f8fa 	bl	8003544 <RAM_Save_Measure>

	sprintf(MQTT_Logging, "%u%u%u%u%u%u%u%u%u%u", Last_Pressure, Last_Volume, Last_Acceleration, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8003350:	4b3c      	ldr	r3, [pc, #240]	@ (8003444 <Data_Logging+0x248>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	469c      	mov	ip, r3
 8003356:	4b3f      	ldr	r3, [pc, #252]	@ (8003454 <Data_Logging+0x258>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	469e      	mov	lr, r3
 800335c:	4b3f      	ldr	r3, [pc, #252]	@ (800345c <Data_Logging+0x260>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <Data_Logging+0x264>)
 8003364:	88db      	ldrh	r3, [r3, #6]
 8003366:	4619      	mov	r1, r3
 8003368:	4b3d      	ldr	r3, [pc, #244]	@ (8003460 <Data_Logging+0x264>)
 800336a:	891b      	ldrh	r3, [r3, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	4b3c      	ldr	r3, [pc, #240]	@ (8003460 <Data_Logging+0x264>)
 8003370:	895b      	ldrh	r3, [r3, #10]
 8003372:	461c      	mov	r4, r3
 8003374:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <Data_Logging+0x264>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	461d      	mov	r5, r3
 800337a:	4b39      	ldr	r3, [pc, #228]	@ (8003460 <Data_Logging+0x264>)
 800337c:	885b      	ldrh	r3, [r3, #2]
 800337e:	461e      	mov	r6, r3
 8003380:	4b37      	ldr	r3, [pc, #220]	@ (8003460 <Data_Logging+0x264>)
 8003382:	889b      	ldrh	r3, [r3, #4]
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <Data_Logging+0x268>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	9307      	str	r3, [sp, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	9306      	str	r3, [sp, #24]
 8003390:	9605      	str	r6, [sp, #20]
 8003392:	9504      	str	r5, [sp, #16]
 8003394:	9403      	str	r4, [sp, #12]
 8003396:	9002      	str	r0, [sp, #8]
 8003398:	9101      	str	r1, [sp, #4]
 800339a:	9200      	str	r2, [sp, #0]
 800339c:	4673      	mov	r3, lr
 800339e:	4662      	mov	r2, ip
 80033a0:	4931      	ldr	r1, [pc, #196]	@ (8003468 <Data_Logging+0x26c>)
 80033a2:	4832      	ldr	r0, [pc, #200]	@ (800346c <Data_Logging+0x270>)
 80033a4:	f00d f84c 	bl	8010440 <siprintf>
	LTE_publish_MQTT_Message(sys.MQTT.topic, MQTT_Logging);
 80033a8:	4930      	ldr	r1, [pc, #192]	@ (800346c <Data_Logging+0x270>)
 80033aa:	4831      	ldr	r0, [pc, #196]	@ (8003470 <Data_Logging+0x274>)
 80033ac:	f7fd fc78 	bl	8000ca0 <LTE_publish_MQTT_Message>
	flags.ADC_Complete = 0;
 80033b0:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <Data_Logging+0x238>)
 80033b2:	7813      	ldrb	r3, [r2, #0]
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	7013      	strb	r3, [r2, #0]
	Address_Offset = 0;
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <Data_Logging+0x23c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 80033c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <Data_Logging+0x238>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <Data_Logging+0x1e0>
 80033ce:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <Data_Logging+0x238>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d027      	beq.n	800342c <Data_Logging+0x230>
	{
		Seconds_After_Warning++;
 80033dc:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <Data_Logging+0x278>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <Data_Logging+0x278>)
 80033e6:	801a      	strh	r2, [r3, #0]
		if(Seconds_After_Warning == 30)
 80033e8:	4b22      	ldr	r3, [pc, #136]	@ (8003474 <Data_Logging+0x278>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	2b1e      	cmp	r3, #30
 80033ee:	d11d      	bne.n	800342c <Data_Logging+0x230>
		{
			state = SEND_RECORDING_STATE;
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <Data_Logging+0x27c>)
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
			Seconds_After_Warning = 0;
 80033f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003474 <Data_Logging+0x278>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	801a      	strh	r2, [r3, #0]
			if(flags.Hammer_Detected)
 80033fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <Data_Logging+0x238>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <Data_Logging+0x218>
			{
				flags.Hammer_Detected = 0;
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <Data_Logging+0x238>)
 800340c:	7813      	ldrb	r3, [r2, #0]
 800340e:	f023 0320 	bic.w	r3, r3, #32
 8003412:	7013      	strb	r3, [r2, #0]
			}
			if(flags.Threshold_Detected)
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <Data_Logging+0x238>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <Data_Logging+0x230>
			{
				flags.Threshold_Detected = 0;
 8003422:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <Data_Logging+0x238>)
 8003424:	7813      	ldrb	r3, [r2, #0]
 8003426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800342a:	7013      	strb	r3, [r2, #0]
			}
		}
	}

}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003434:	20003880 	.word	0x20003880
 8003438:	200076b0 	.word	0x200076b0
 800343c:	20006bec 	.word	0x20006bec
 8003440:	200058fc 	.word	0x200058fc
 8003444:	20006b80 	.word	0x20006b80
 8003448:	200060cc 	.word	0x200060cc
 800344c:	2000689c 	.word	0x2000689c
 8003450:	200058f8 	.word	0x200058f8
 8003454:	20006b82 	.word	0x20006b82
 8003458:	200068c4 	.word	0x200068c4
 800345c:	20006b84 	.word	0x20006b84
 8003460:	200058ec 	.word	0x200058ec
 8003464:	20006b86 	.word	0x20006b86
 8003468:	08010fd8 	.word	0x08010fd8
 800346c:	20006b88 	.word	0x20006b88
 8003470:	20003818 	.word	0x20003818
 8003474:	20007718 	.word	0x20007718
 8003478:	20000524 	.word	0x20000524

0800347c <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8003490:	2301      	movs	r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	e03c      	b.n	8003510 <Warning_Detection+0x94>
	{
		if(Data[i] > max)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	89fa      	ldrh	r2, [r7, #14]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d206      	bcs.n	80034b4 <Warning_Detection+0x38>
		{
			max = Data[i];
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	81fb      	strh	r3, [r7, #14]
 80034b2:	e00d      	b.n	80034d0 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	89ba      	ldrh	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d905      	bls.n	80034d0 <Warning_Detection+0x54>
		{
			min = Data[i];
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	4b18      	ldr	r3, [pc, #96]	@ (800353c <Warning_Detection+0xc0>)
 80034dc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80034e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d30b      	bcc.n	8003500 <Warning_Detection+0x84>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	4b12      	ldr	r3, [pc, #72]	@ (800353c <Warning_Detection+0xc0>)
 80034f4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80034f8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d904      	bls.n	800350a <Warning_Detection+0x8e>
		{
			flags.Threshold_Detected= 1;
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <Warning_Detection+0xc4>)
 8003502:	7813      	ldrb	r3, [r2, #0]
 8003504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003508:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003516:	dbbe      	blt.n	8003496 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= HAMMER_THRESHOLD)
 8003518:	89fa      	ldrh	r2, [r7, #14]
 800351a:	89bb      	ldrh	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003522:	db04      	blt.n	800352e <Warning_Detection+0xb2>
	{
		flags.Hammer_Detected = 1;
 8003524:	4a06      	ldr	r2, [pc, #24]	@ (8003540 <Warning_Detection+0xc4>)
 8003526:	7813      	ldrb	r3, [r2, #0]
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	7013      	strb	r3, [r2, #0]
	}

}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000528 	.word	0x20000528
 8003540:	20003880 	.word	0x20003880

08003544 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(uint8_t* Buffer)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	UINT written = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]

	if(Saves_cnt == 0)
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <RAM_Save_Measure+0xf4>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d11a      	bne.n	800358e <RAM_Save_Measure+0x4a>
	{
		f_close(&sys.file_meas_1);
 8003558:	4838      	ldr	r0, [pc, #224]	@ (800363c <RAM_Save_Measure+0xf8>)
 800355a:	f003 f923 	bl	80067a4 <f_close>
		sys.file_meas_1_open = 0;
 800355e:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <RAM_Save_Measure+0xfc>)
 8003560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		f_unlink(MEASURE_FILE_NAME_1);
 800356a:	4836      	ldr	r0, [pc, #216]	@ (8003644 <RAM_Save_Measure+0x100>)
 800356c:	f003 f93a 	bl	80067e4 <f_unlink>
		res = f_open(&sys.file_meas_1, MEASURE_FILE_NAME_1, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8003570:	220b      	movs	r2, #11
 8003572:	4934      	ldr	r1, [pc, #208]	@ (8003644 <RAM_Save_Measure+0x100>)
 8003574:	4831      	ldr	r0, [pc, #196]	@ (800363c <RAM_Save_Measure+0xf8>)
 8003576:	f002 fd75 	bl	8006064 <f_open>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <RAM_Save_Measure+0x104>)
 8003580:	701a      	strb	r2, [r3, #0]
		sys.file_meas_1_open = 1;
 8003582:	4b2f      	ldr	r3, [pc, #188]	@ (8003640 <RAM_Save_Measure+0xfc>)
 8003584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}

	if(Saves_cnt == 30)
 800358e:	4b2a      	ldr	r3, [pc, #168]	@ (8003638 <RAM_Save_Measure+0xf4>)
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	2b1e      	cmp	r3, #30
 8003594:	d11a      	bne.n	80035cc <RAM_Save_Measure+0x88>
	{
		f_close(&sys.file_meas_2);
 8003596:	482d      	ldr	r0, [pc, #180]	@ (800364c <RAM_Save_Measure+0x108>)
 8003598:	f003 f904 	bl	80067a4 <f_close>
		sys.file_meas_2_open = 0;
 800359c:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <RAM_Save_Measure+0xfc>)
 800359e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		f_unlink(MEASURE_FILE_NAME_2);
 80035a8:	4829      	ldr	r0, [pc, #164]	@ (8003650 <RAM_Save_Measure+0x10c>)
 80035aa:	f003 f91b 	bl	80067e4 <f_unlink>
		res = f_open(&sys.file_meas_2, MEASURE_FILE_NAME_2, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80035ae:	220b      	movs	r2, #11
 80035b0:	4927      	ldr	r1, [pc, #156]	@ (8003650 <RAM_Save_Measure+0x10c>)
 80035b2:	4826      	ldr	r0, [pc, #152]	@ (800364c <RAM_Save_Measure+0x108>)
 80035b4:	f002 fd56 	bl	8006064 <f_open>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <RAM_Save_Measure+0x104>)
 80035be:	701a      	strb	r2, [r3, #0]
		sys.file_meas_2_open = 1;
 80035c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <RAM_Save_Measure+0xfc>)
 80035c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	}

	if(Saves_cnt < 30)
 80035cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <RAM_Save_Measure+0xf4>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	2b1d      	cmp	r3, #29
 80035d2:	d812      	bhi.n	80035fa <RAM_Save_Measure+0xb6>
	{
		res = f_write(&sys.file_meas_1, (uint8_t *)&Buffer, LOGGING_BUFFER_LEN, &written);
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	1d39      	adds	r1, r7, #4
 80035da:	f640 22c2 	movw	r2, #2754	@ 0xac2
 80035de:	4817      	ldr	r0, [pc, #92]	@ (800363c <RAM_Save_Measure+0xf8>)
 80035e0:	f002 fed8 	bl	8006394 <f_write>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <RAM_Save_Measure+0x104>)
 80035ea:	701a      	strb	r2, [r3, #0]
		Saves_cnt++;
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <RAM_Save_Measure+0xf4>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <RAM_Save_Measure+0xf4>)
 80035f6:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		Saves_cnt = 0;
	}
}
 80035f8:	e019      	b.n	800362e <RAM_Save_Measure+0xea>
	else if(Saves_cnt < 60)
 80035fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <RAM_Save_Measure+0xf4>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8003600:	d812      	bhi.n	8003628 <RAM_Save_Measure+0xe4>
		res = f_write(&sys.file_meas_2, (uint8_t *)&Buffer, LOGGING_BUFFER_LEN, &written);
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	1d39      	adds	r1, r7, #4
 8003608:	f640 22c2 	movw	r2, #2754	@ 0xac2
 800360c:	480f      	ldr	r0, [pc, #60]	@ (800364c <RAM_Save_Measure+0x108>)
 800360e:	f002 fec1 	bl	8006394 <f_write>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <RAM_Save_Measure+0x104>)
 8003618:	701a      	strb	r2, [r3, #0]
		Saves_cnt++;
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <RAM_Save_Measure+0xf4>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <RAM_Save_Measure+0xf4>)
 8003624:	801a      	strh	r2, [r3, #0]
}
 8003626:	e002      	b.n	800362e <RAM_Save_Measure+0xea>
		Saves_cnt = 0;
 8003628:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <RAM_Save_Measure+0xf4>)
 800362a:	2200      	movs	r2, #0
 800362c:	801a      	strh	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000771a 	.word	0x2000771a
 800363c:	2000155c 	.word	0x2000155c
 8003640:	20000528 	.word	0x20000528
 8003644:	08010ff0 	.word	0x08010ff0
 8003648:	2000771c 	.word	0x2000771c
 800364c:	20002588 	.word	0x20002588
 8003650:	08011000 	.word	0x08011000

08003654 <Send_Measure>:

/*-----INVIO MISURA COMPLETA-----*/
void Send_Measure(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0

}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	@ 0x38
 8003668:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 800366a:	463b      	mov	r3, r7
 800366c:	2238      	movs	r2, #56	@ 0x38
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f00c ff17 	bl	80104a4 <memset>

	sCommand.Instruction = 0x66;
 8003676:	2366      	movs	r3, #102	@ 0x66
 8003678:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800367a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800367e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003688:	463b      	mov	r3, r7
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4619      	mov	r1, r3
 8003690:	480e      	ldr	r0, [pc, #56]	@ (80036cc <psram_reset+0x68>)
 8003692:	f006 ffd3 	bl	800a63c <HAL_QSPI_Command>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <psram_reset+0x3e>
	{
		return -1;
 800369c:	f04f 33ff 	mov.w	r3, #4294967295
 80036a0:	e00f      	b.n	80036c2 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 80036a2:	2399      	movs	r3, #153	@ 0x99
 80036a4:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036a6:	463b      	mov	r3, r7
 80036a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ac:	4619      	mov	r1, r3
 80036ae:	4807      	ldr	r0, [pc, #28]	@ (80036cc <psram_reset+0x68>)
 80036b0:	f006 ffc4 	bl	800a63c <HAL_QSPI_Command>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <psram_reset+0x5c>
	{
		return -1;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	e000      	b.n	80036c2 <psram_reset+0x5e>
	}

	return 0;
 80036c0:	2300      	movs	r3, #0

}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3738      	adds	r7, #56	@ 0x38
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200001b4 	.word	0x200001b4

080036d0 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b090      	sub	sp, #64	@ 0x40
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 80036da:	f107 0308 	add.w	r3, r7, #8
 80036de:	2238      	movs	r2, #56	@ 0x38
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00c fede 	bl	80104a4 <memset>

	if(!psramInitDone)return -1;
 80036e8:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <psram_qpi_mode+0x8c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <psram_qpi_mode+0x26>
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	e02d      	b.n	8003752 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 80036f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <psram_qpi_mode+0x90>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <psram_qpi_mode+0x40>
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8003704:	23f5      	movs	r3, #245	@ 0xf5
 8003706:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003708:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	e00e      	b.n	800372e <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <psram_qpi_mode+0x90>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <psram_qpi_mode+0x5a>
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 800371e:	2335      	movs	r3, #53	@ 0x35
 8003720:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003722:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	e001      	b.n	800372e <psram_qpi_mode+0x5e>

	}else{

		return 0;
 800372a:	2300      	movs	r3, #0
 800372c:	e011      	b.n	8003752 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4619      	mov	r1, r3
 8003738:	480a      	ldr	r0, [pc, #40]	@ (8003764 <psram_qpi_mode+0x94>)
 800373a:	f006 ff7f 	bl	800a63c <HAL_QSPI_Command>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <psram_qpi_mode+0x7a>
	{
		return -1;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	e003      	b.n	8003752 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 800374a:	4a05      	ldr	r2, [pc, #20]	@ (8003760 <psram_qpi_mode+0x90>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	7013      	strb	r3, [r2, #0]

	return 0;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3740      	adds	r7, #64	@ 0x40
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20007790 	.word	0x20007790
 8003760:	20007791 	.word	0x20007791
 8003764:	200001b4 	.word	0x200001b4

08003768 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b090      	sub	sp, #64	@ 0x40
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	2238      	movs	r2, #56	@ 0x38
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f00c fe92 	bl	80104a4 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <psram_read_id+0x24>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b07      	cmp	r3, #7
 800378a:	dc02      	bgt.n	8003792 <psram_read_id+0x2a>
 800378c:	f06f 0301 	mvn.w	r3, #1
 8003790:	e034      	b.n	80037fc <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8003792:	239f      	movs	r3, #159	@ 0x9f
 8003794:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800379a:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80037a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037a4:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80037a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 80037ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 80037b2:	2308      	movs	r3, #8
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80037be:	2300      	movs	r3, #0
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037c2:	2300      	movs	r3, #0
 80037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ce:	4619      	mov	r1, r3
 80037d0:	480c      	ldr	r0, [pc, #48]	@ (8003804 <psram_read_id+0x9c>)
 80037d2:	f006 ff33 	bl	800a63c <HAL_QSPI_Command>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <psram_read_id+0x7a>
	{
		return -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	e00c      	b.n	80037fc <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4806      	ldr	r0, [pc, #24]	@ (8003804 <psram_read_id+0x9c>)
 80037ea:	f007 f81c 	bl	800a826 <HAL_QSPI_Receive>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <psram_read_id+0x92>
	{
		return -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	e000      	b.n	80037fc <psram_read_id+0x94>
	}


	return 0;
 80037fa:	2300      	movs	r3, #0

}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3740      	adds	r7, #64	@ 0x40
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	200001b4 	.word	0x200001b4

08003808 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b092      	sub	sp, #72	@ 0x48
 800380c:	af00      	add	r7, sp, #0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	4603      	mov	r3, r0
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	4613      	mov	r3, r2
 8003818:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 800381a:	f107 0310 	add.w	r3, r7, #16
 800381e:	2238      	movs	r2, #56	@ 0x38
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f00c fe3e 	bl	80104a4 <memset>

	sCommand.Address = address;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800382c:	2300      	movs	r3, #0
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003834:	2300      	movs	r3, #0
 8003836:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003838:	2300      	movs	r3, #0
 800383a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 800383c:	89bb      	ldrh	r3, [r7, #12]
 800383e:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8003840:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <psram_internal_read_write+0x108>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <psram_internal_read_write+0x4a>
 800384e:	2338      	movs	r3, #56	@ 0x38
 8003850:	e000      	b.n	8003854 <psram_internal_read_write+0x4c>
 8003852:	23eb      	movs	r3, #235	@ 0xeb
 8003854:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003856:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800385a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800385c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003860:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8003862:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8003868:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800386c:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <psram_internal_read_write+0x70>
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <psram_internal_read_write+0x72>
 8003878:	2306      	movs	r3, #6
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
 800387c:	e019      	b.n	80038b2 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <psram_internal_read_write+0x80>
 8003884:	2302      	movs	r3, #2
 8003886:	e000      	b.n	800388a <psram_internal_read_write+0x82>
 8003888:	230b      	movs	r3, #11
 800388a:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800388c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8003892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003896:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8003898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 800389e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <psram_internal_read_write+0xa6>
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <psram_internal_read_write+0xa8>
 80038ae:	2308      	movs	r3, #8
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038b2:	f107 0310 	add.w	r3, r7, #16
 80038b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ba:	4619      	mov	r1, r3
 80038bc:	4815      	ldr	r0, [pc, #84]	@ (8003914 <psram_internal_read_write+0x10c>)
 80038be:	f006 febd 	bl	800a63c <HAL_QSPI_Command>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <psram_internal_read_write+0xc6>
	{
		return -1;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	e01b      	b.n	8003906 <psram_internal_read_write+0xfe>
	}

	if(write)
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	480e      	ldr	r0, [pc, #56]	@ (8003914 <psram_internal_read_write+0x10c>)
 80038dc:	f006 ff0c 	bl	800a6f8 <HAL_QSPI_Transmit>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <psram_internal_read_write+0xfc>
		{
			return -1;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e00c      	b.n	8003906 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4808      	ldr	r0, [pc, #32]	@ (8003914 <psram_internal_read_write+0x10c>)
 80038f4:	f006 ff97 	bl	800a826 <HAL_QSPI_Receive>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <psram_internal_read_write+0xfc>
		{
			return -1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	e000      	b.n	8003906 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3748      	adds	r7, #72	@ 0x48
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20007791 	.word	0x20007791
 8003914:	200001b4 	.word	0x200001b4

08003918 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	029b      	lsls	r3, r3, #10
 8003934:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8003936:	e018      	b.n	800396a <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8003938:	7bf8      	ldrb	r0, [r7, #15]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003940:	69b9      	ldr	r1, [r7, #24]
 8003942:	f7ff ff61 	bl	8003808 <psram_internal_read_write>
 8003946:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	da02      	bge.n	8003954 <psram_sector_read_write+0x3c>
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e00e      	b.n	8003972 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800395a:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003962:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e3      	bne.n	8003938 <psram_sector_read_write+0x20>
	}

	return 0;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <psram_is_initialized>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int psram_is_initialized()
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
	return psramInitDone;
 8003980:	4b03      	ldr	r3, [pc, #12]	@ (8003990 <psram_is_initialized+0x14>)
 8003982:	781b      	ldrb	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20007790 	.word	0x20007790

08003994 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8003998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
	return psramNumPages;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <psram_get_sector_count+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200077a0 	.word	0x200077a0

080039c0 <psram_init>:
{
	return psramSize;
}

int psram_init()
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 80039c6:	23ff      	movs	r3, #255	@ 0xff
 80039c8:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 80039ca:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <psram_init+0xac>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 80039d0:	f7ff fe48 	bl	8003664 <psram_reset>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da02      	bge.n	80039e0 <psram_init+0x20>
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	e040      	b.n	8003a62 <psram_init+0xa2>

	memset(psramId, 0xFF, sizeof(psramId));
 80039e0:	2208      	movs	r2, #8
 80039e2:	21ff      	movs	r1, #255	@ 0xff
 80039e4:	4822      	ldr	r0, [pc, #136]	@ (8003a70 <psram_init+0xb0>)
 80039e6:	f00c fd5d 	bl	80104a4 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 80039ea:	2108      	movs	r1, #8
 80039ec:	4820      	ldr	r0, [pc, #128]	@ (8003a70 <psram_init+0xb0>)
 80039ee:	f7ff febb 	bl	8003768 <psram_read_id>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da02      	bge.n	80039fe <psram_init+0x3e>
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	e031      	b.n	8003a62 <psram_init+0xa2>

	density = psramId[2] >> 5;
 80039fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <psram_init+0xb0>)
 8003a00:	789b      	ldrb	r3, [r3, #2]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_32MB)
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <psram_init+0xb0>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b9d      	cmp	r3, #157	@ 0x9d
 8003a0c:	d127      	bne.n	8003a5e <psram_init+0x9e>
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <psram_init+0xb0>)
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b5d      	cmp	r3, #93	@ 0x5d
 8003a14:	d123      	bne.n	8003a5e <psram_init+0x9e>
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d820      	bhi.n	8003a5e <psram_init+0x9e>
	{
		if(density == PSRAM_DENSITY_32MB)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d104      	bne.n	8003a2c <psram_init+0x6c>
		{
			psramSize = PSRAM_DENSITY_32MB_EADDR;
 8003a22:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <psram_init+0xb4>)
 8003a24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e00b      	b.n	8003a44 <psram_init+0x84>
		}else if(density == PSRAM_DENSITY_16MB)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d104      	bne.n	8003a3c <psram_init+0x7c>
		{
			psramSize = PSRAM_DENSITY_16MB_EADDR;
 8003a32:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <psram_init+0xb4>)
 8003a34:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e003      	b.n	8003a44 <psram_init+0x84>
		}else{
			psramSize = PSRAM_DENSITY_8MB_EADDR;
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <psram_init+0xb4>)
 8003a3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a42:	601a      	str	r2, [r3, #0]
		}

		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <psram_init+0xb4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0a9b      	lsrs	r3, r3, #10
 8003a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a78 <psram_init+0xb8>)
 8003a4c:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f7ff fe3e 	bl	80036d0 <psram_qpi_mode>

		psramInitDone = 1;
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <psram_init+0xac>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
		return 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e001      	b.n	8003a62 <psram_init+0xa2>
	}else{
		return -1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20007790 	.word	0x20007790
 8003a70:	20007794 	.word	0x20007794
 8003a74:	2000779c 	.word	0x2000779c
 8003a78:	200077a0 	.word	0x200077a0

08003a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <HAL_MspInit+0x44>)
 8003a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac0 <HAL_MspInit+0x44>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_MspInit+0x44>)
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_MspInit+0x44>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <HAL_MspInit+0x44>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_MspInit+0x44>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b0ac      	sub	sp, #176	@ 0xb0
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	2288      	movs	r2, #136	@ 0x88
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00c fcdd 	bl	80104a4 <memset>
  if(hadc->Instance==ADC1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3d      	ldr	r2, [pc, #244]	@ (8003be4 <HAL_ADC_MspInit+0x120>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d172      	bne.n	8003bda <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003af4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003af8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003afa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003b02:	2303      	movs	r3, #3
 8003b04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003b0e:	2307      	movs	r3, #7
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003b12:	2302      	movs	r3, #2
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b16:	2302      	movs	r3, #2
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4618      	mov	r0, r3
 8003b26:	f007 ff75 	bl	800ba14 <HAL_RCCEx_PeriphCLKConfig>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003b30:	f7ff fb5e 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b34:	4b2c      	ldr	r3, [pc, #176]	@ (8003be8 <HAL_ADC_MspInit+0x124>)
 8003b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_ADC_MspInit+0x124>)
 8003b3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b40:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <HAL_ADC_MspInit+0x124>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4c:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <HAL_ADC_MspInit+0x124>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b50:	4a25      	ldr	r2, [pc, #148]	@ (8003be8 <HAL_ADC_MspInit+0x124>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b58:	4b23      	ldr	r3, [pc, #140]	@ (8003be8 <HAL_ADC_MspInit+0x124>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b64:	2310      	movs	r3, #16
 8003b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b6a:	230b      	movs	r3, #11
 8003b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b80:	f005 fcd8 	bl	8009534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b84:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003b86:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <HAL_ADC_MspInit+0x12c>)
 8003b88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003b8a:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b90:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003b9e:	2280      	movs	r2, #128	@ 0x80
 8003ba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003baa:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003bac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003bbe:	480b      	ldr	r0, [pc, #44]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003bc0:	f005 fa82 	bl	80090c8 <HAL_DMA_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8003bca:	f7ff fb11 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a06      	ldr	r2, [pc, #24]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003bd4:	4a05      	ldr	r2, [pc, #20]	@ (8003bec <HAL_ADC_MspInit+0x128>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003bda:	bf00      	nop
 8003bdc:	37b0      	adds	r7, #176	@ 0xb0
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	50040000 	.word	0x50040000
 8003be8:	40021000 	.word	0x40021000
 8003bec:	200000f4 	.word	0x200000f4
 8003bf0:	40020008 	.word	0x40020008

08003bf4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_CRC_MspInit+0x38>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10b      	bne.n	8003c1e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_CRC_MspInit+0x3c>)
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_CRC_MspInit+0x3c>)
 8003c0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c10:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <HAL_CRC_MspInit+0x3c>)
 8003c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023000 	.word	0x40023000
 8003c30:	40021000 	.word	0x40021000

08003c34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0ac      	sub	sp, #176	@ 0xb0
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2288      	movs	r2, #136	@ 0x88
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f00c fc25 	bl	80104a4 <memset>
  if(hi2c->Instance==I2C3)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ce4 <HAL_I2C_MspInit+0xb0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d13b      	bne.n	8003cdc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4618      	mov	r0, r3
 8003c74:	f007 fece 	bl	800ba14 <HAL_RCCEx_PeriphCLKConfig>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c7e:	f7ff fab7 	bl	80031f0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c82:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <HAL_I2C_MspInit+0xb4>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_I2C_MspInit+0xb4>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <HAL_I2C_MspInit+0xb4>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ca0:	2312      	movs	r3, #18
 8003ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cac:	2303      	movs	r3, #3
 8003cae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	480b      	ldr	r0, [pc, #44]	@ (8003cec <HAL_I2C_MspInit+0xb8>)
 8003cc0:	f005 fc38 	bl	8009534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cc4:	4b08      	ldr	r3, [pc, #32]	@ (8003ce8 <HAL_I2C_MspInit+0xb4>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	4a07      	ldr	r2, [pc, #28]	@ (8003ce8 <HAL_I2C_MspInit+0xb4>)
 8003cca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd0:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_I2C_MspInit+0xb4>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003cdc:	bf00      	nop
 8003cde:	37b0      	adds	r7, #176	@ 0xb0
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40005c00 	.word	0x40005c00
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	48000800 	.word	0x48000800

08003cf0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	@ (8003da8 <HAL_QSPI_MspInit+0xb8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d145      	bne.n	8003d9e <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003d12:	4b26      	ldr	r3, [pc, #152]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d16:	4a25      	ldr	r2, [pc, #148]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d1e:	4b23      	ldr	r3, [pc, #140]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d36:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d42:	4b1a      	ldr	r3, [pc, #104]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	4a19      	ldr	r2, [pc, #100]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4e:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <HAL_QSPI_MspInit+0xbc>)
 8003d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d5a:	23c0      	movs	r3, #192	@ 0xc0
 8003d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d66:	2303      	movs	r3, #3
 8003d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d78:	f005 fbdc 	bl	8009534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8003d7c:	f640 4303 	movw	r3, #3075	@ 0xc03
 8003d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003d8e:	230a      	movs	r3, #10
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d92:	f107 0314 	add.w	r3, r7, #20
 8003d96:	4619      	mov	r1, r3
 8003d98:	4805      	ldr	r0, [pc, #20]	@ (8003db0 <HAL_QSPI_MspInit+0xc0>)
 8003d9a:	f005 fbcb 	bl	8009534 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003d9e:	bf00      	nop
 8003da0:	3728      	adds	r7, #40	@ 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	a0001000 	.word	0xa0001000
 8003dac:	40021000 	.word	0x40021000
 8003db0:	48000400 	.word	0x48000400

08003db4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b0a4      	sub	sp, #144	@ 0x90
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	2288      	movs	r2, #136	@ 0x88
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f00c fb6d 	bl	80104a4 <memset>
  if(hrtc->Instance==RTC)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <HAL_RTC_MspInit+0x6c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d120      	bne.n	8003e16 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003dd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dd8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003dda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4618      	mov	r0, r3
 8003de8:	f007 fe14 	bl	800ba14 <HAL_RCCEx_PeriphCLKConfig>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003df2:	f7ff f9fd 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003df6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <HAL_RTC_MspInit+0x70>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <HAL_RTC_MspInit+0x70>)
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2029      	movs	r0, #41	@ 0x29
 8003e0c:	f005 f833 	bl	8008e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003e10:	2029      	movs	r0, #41	@ 0x29
 8003e12:	f005 f84c 	bl	8008eae <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003e16:	bf00      	nop
 8003e18:	3790      	adds	r7, #144	@ 0x90
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40002800 	.word	0x40002800
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	@ 0x30
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <HAL_SPI_MspInit+0xdc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d129      	bne.n	8003e9e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e56:	4b2c      	ldr	r3, [pc, #176]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	4b29      	ldr	r3, [pc, #164]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e6e:	4b26      	ldr	r3, [pc, #152]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e7a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e8c:	2305      	movs	r3, #5
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e90:	f107 031c 	add.w	r3, r7, #28
 8003e94:	4619      	mov	r1, r3
 8003e96:	481d      	ldr	r0, [pc, #116]	@ (8003f0c <HAL_SPI_MspInit+0xe4>)
 8003e98:	f005 fb4c 	bl	8009534 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003e9c:	e02d      	b.n	8003efa <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f10 <HAL_SPI_MspInit+0xe8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d128      	bne.n	8003efa <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ea8:	4b17      	ldr	r3, [pc, #92]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eac:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb4:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec4:	4a10      	ldr	r2, [pc, #64]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003ec6:	f043 0304 	orr.w	r3, r3, #4
 8003eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <HAL_SPI_MspInit+0xe0>)
 8003ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003ed8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003eea:	2306      	movs	r3, #6
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eee:	f107 031c 	add.w	r3, r7, #28
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4807      	ldr	r0, [pc, #28]	@ (8003f14 <HAL_SPI_MspInit+0xec>)
 8003ef6:	f005 fb1d 	bl	8009534 <HAL_GPIO_Init>
}
 8003efa:	bf00      	nop
 8003efc:	3730      	adds	r7, #48	@ 0x30
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40003800 	.word	0x40003800
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	48000400 	.word	0x48000400
 8003f10:	40003c00 	.word	0x40003c00
 8003f14:	48000800 	.word	0x48000800

08003f18 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <HAL_TIM_OC_MspInit+0x38>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10b      	bne.n	8003f42 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_TIM_OC_MspInit+0x3c>)
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <HAL_TIM_OC_MspInit+0x3c>)
 8003f30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <HAL_TIM_OC_MspInit+0x3c>)
 8003f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	@ 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d128      	bne.n	8003fcc <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f7a:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <HAL_TIM_IC_MspInit+0x7c>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <HAL_TIM_IC_MspInit+0x7c>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f86:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <HAL_TIM_IC_MspInit+0x7c>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f92:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <HAL_TIM_IC_MspInit+0x7c>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f96:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <HAL_TIM_IC_MspInit+0x7c>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_TIM_IC_MspInit+0x7c>)
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003faa:	2320      	movs	r3, #32
 8003fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc8:	f005 fab4 	bl	8009534 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003fcc:	bf00      	nop
 8003fce:	3728      	adds	r7, #40	@ 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	@ (8004034 <HAL_TIM_Base_MspInit+0x5c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10c      	bne.n	8004004 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fea:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <HAL_TIM_Base_MspInit+0x60>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	4a12      	ldr	r2, [pc, #72]	@ (8004038 <HAL_TIM_Base_MspInit+0x60>)
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <HAL_TIM_Base_MspInit+0x60>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004002:	e010      	b.n	8004026 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <HAL_TIM_Base_MspInit+0x64>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10b      	bne.n	8004026 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800400e:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <HAL_TIM_Base_MspInit+0x60>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	4a09      	ldr	r2, [pc, #36]	@ (8004038 <HAL_TIM_Base_MspInit+0x60>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	6593      	str	r3, [r2, #88]	@ 0x58
 800401a:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <HAL_TIM_Base_MspInit+0x60>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40000400 	.word	0x40000400
 8004038:	40021000 	.word	0x40021000
 800403c:	40000800 	.word	0x40000800

08004040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	@ 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a23      	ldr	r2, [pc, #140]	@ (80040ec <HAL_TIM_MspPostInit+0xac>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d11e      	bne.n	80040a0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	4b23      	ldr	r3, [pc, #140]	@ (80040f0 <HAL_TIM_MspPostInit+0xb0>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	4a22      	ldr	r2, [pc, #136]	@ (80040f0 <HAL_TIM_MspPostInit+0xb0>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_TIM_MspPostInit+0xb0>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800407a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800407e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800408c:	2301      	movs	r3, #1
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	4619      	mov	r1, r3
 8004096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800409a:	f005 fa4b 	bl	8009534 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800409e:	e021      	b.n	80040e4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a13      	ldr	r2, [pc, #76]	@ (80040f4 <HAL_TIM_MspPostInit+0xb4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d11c      	bne.n	80040e4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040aa:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <HAL_TIM_MspPostInit+0xb0>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	4a10      	ldr	r2, [pc, #64]	@ (80040f0 <HAL_TIM_MspPostInit+0xb0>)
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b6:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <HAL_TIM_MspPostInit+0xb0>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040d4:	2302      	movs	r3, #2
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	4806      	ldr	r0, [pc, #24]	@ (80040f8 <HAL_TIM_MspPostInit+0xb8>)
 80040e0:	f005 fa28 	bl	8009534 <HAL_GPIO_Init>
}
 80040e4:	bf00      	nop
 80040e6:	3728      	adds	r7, #40	@ 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40000400 	.word	0x40000400
 80040f8:	48000800 	.word	0x48000800

080040fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b0ae      	sub	sp, #184	@ 0xb8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004114:	f107 031c 	add.w	r3, r7, #28
 8004118:	2288      	movs	r2, #136	@ 0x88
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f00c f9c1 	bl	80104a4 <memset>
  if(huart->Instance==UART4)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a42      	ldr	r2, [pc, #264]	@ (8004230 <HAL_UART_MspInit+0x134>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d13c      	bne.n	80041a6 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800412c:	2308      	movs	r3, #8
 800412e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004130:	2300      	movs	r3, #0
 8004132:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004134:	f107 031c 	add.w	r3, r7, #28
 8004138:	4618      	mov	r0, r3
 800413a:	f007 fc6b 	bl	800ba14 <HAL_RCCEx_PeriphCLKConfig>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004144:	f7ff f854 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004148:	4b3a      	ldr	r3, [pc, #232]	@ (8004234 <HAL_UART_MspInit+0x138>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	4a39      	ldr	r2, [pc, #228]	@ (8004234 <HAL_UART_MspInit+0x138>)
 800414e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
 8004154:	4b37      	ldr	r3, [pc, #220]	@ (8004234 <HAL_UART_MspInit+0x138>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004158:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	4b34      	ldr	r3, [pc, #208]	@ (8004234 <HAL_UART_MspInit+0x138>)
 8004162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004164:	4a33      	ldr	r2, [pc, #204]	@ (8004234 <HAL_UART_MspInit+0x138>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800416c:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <HAL_UART_MspInit+0x138>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004178:	2301      	movs	r3, #1
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800417e:	2312      	movs	r3, #18
 8004180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004184:	2301      	movs	r3, #1
 8004186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418a:	2303      	movs	r3, #3
 800418c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004190:	2308      	movs	r3, #8
 8004192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800419a:	4619      	mov	r1, r3
 800419c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041a0:	f005 f9c8 	bl	8009534 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80041a4:	e03f      	b.n	8004226 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <HAL_UART_MspInit+0x13c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d13a      	bne.n	8004226 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041b4:	2300      	movs	r3, #0
 80041b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b8:	f107 031c 	add.w	r3, r7, #28
 80041bc:	4618      	mov	r0, r3
 80041be:	f007 fc29 	bl	800ba14 <HAL_RCCEx_PeriphCLKConfig>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80041c8:	f7ff f812 	bl	80031f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80041cc:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <HAL_UART_MspInit+0x138>)
 80041ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d0:	4a18      	ldr	r2, [pc, #96]	@ (8004234 <HAL_UART_MspInit+0x138>)
 80041d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041d8:	4b16      	ldr	r3, [pc, #88]	@ (8004234 <HAL_UART_MspInit+0x138>)
 80041da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e4:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <HAL_UART_MspInit+0x138>)
 80041e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e8:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <HAL_UART_MspInit+0x138>)
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_UART_MspInit+0x138>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80041fc:	23d8      	movs	r3, #216	@ 0xd8
 80041fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420e:	2303      	movs	r3, #3
 8004210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004214:	2307      	movs	r3, #7
 8004216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800421e:	4619      	mov	r1, r3
 8004220:	4806      	ldr	r0, [pc, #24]	@ (800423c <HAL_UART_MspInit+0x140>)
 8004222:	f005 f987 	bl	8009534 <HAL_GPIO_Init>
}
 8004226:	bf00      	nop
 8004228:	37b8      	adds	r7, #184	@ 0xb8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40004c00 	.word	0x40004c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40013800 	.word	0x40013800
 800423c:	48000400 	.word	0x48000400

08004240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <NMI_Handler+0x4>

08004248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <HardFault_Handler+0x4>

08004250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <MemManage_Handler+0x4>

08004258 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <BusFault_Handler+0x4>

08004260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <UsageFault_Handler+0x4>

08004268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004296:	f003 f935 	bl	8007504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042a4:	4802      	ldr	r0, [pc, #8]	@ (80042b0 <DMA1_Channel1_IRQHandler+0x10>)
 80042a6:	f005 f865 	bl	8009374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200000f4 	.word	0x200000f4

080042b4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80042b8:	4802      	ldr	r0, [pc, #8]	@ (80042c4 <RTC_Alarm_IRQHandler+0x10>)
 80042ba:	f008 fbab 	bl	800ca14 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200001f8 	.word	0x200001f8

080042c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <_sbrk+0x5c>)
 80042d2:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <_sbrk+0x60>)
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042dc:	4b13      	ldr	r3, [pc, #76]	@ (800432c <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e4:	4b11      	ldr	r3, [pc, #68]	@ (800432c <_sbrk+0x64>)
 80042e6:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <_sbrk+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f8:	f00c f900 	bl	80104fc <__errno>
 80042fc:	4603      	mov	r3, r0
 80042fe:	220c      	movs	r2, #12
 8004300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e009      	b.n	800431c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004308:	4b08      	ldr	r3, [pc, #32]	@ (800432c <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	4a05      	ldr	r2, [pc, #20]	@ (800432c <_sbrk+0x64>)
 8004318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20018000 	.word	0x20018000
 8004328:	00000400 	.word	0x00000400
 800432c:	200077a4 	.word	0x200077a4
 8004330:	20007900 	.word	0x20007900

08004334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <SystemInit+0x20>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	4a05      	ldr	r2, [pc, #20]	@ (8004354 <SystemInit+0x20>)
 8004340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <disk_status+0x16>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d00c      	beq.n	8004386 <disk_status+0x2e>
 800436c:	e017      	b.n	800439e <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 800436e:	f7ff fb05 	bl	800397c <psram_is_initialized>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e001      	b.n	8004382 <disk_status+0x2a>
		}else{
			stat = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	e00c      	b.n	80043a0 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8004386:	f7fd f92d 	bl	80015e4 <extflash_is_initialized>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <disk_status+0x42>
		}else{
			stat = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	e000      	b.n	80043a0 <disk_status+0x48>

	}
	return STA_NOINIT;
 800439e:	2301      	movs	r3, #1
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <disk_initialize+0x16>
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d00c      	beq.n	80043d6 <disk_initialize+0x2e>
 80043bc:	e017      	b.n	80043ee <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 80043be:	f7ff faff 	bl	80039c0 <psram_init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da02      	bge.n	80043ce <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 80043c8:	2302      	movs	r3, #2
 80043ca:	73fb      	strb	r3, [r7, #15]
 80043cc:	e001      	b.n	80043d2 <disk_initialize+0x2a>
		}else{
			stat = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	e00c      	b.n	80043f0 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 80043d6:	f7fd f911 	bl	80015fc <extflash_init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da02      	bge.n	80043e6 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 80043e0:	2302      	movs	r3, #2
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e001      	b.n	80043ea <disk_initialize+0x42>
		}else{
			stat = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	e000      	b.n	80043f0 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <disk_read+0x1c>
 800440e:	2b01      	cmp	r3, #1
 8004410:	d010      	beq.n	8004434 <disk_read+0x3c>
 8004412:	e01e      	b.n	8004452 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	2000      	movs	r0, #0
 800441c:	f7ff fa7c 	bl	8003918 <psram_sector_read_write>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	da02      	bge.n	800442c <disk_read+0x34>
		{
			res = RES_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
 800442a:	e001      	b.n	8004430 <disk_read+0x38>
		}else{

			res = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	e00f      	b.n	8004454 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fc ffb7 	bl	80013ac <extflash_sector_read>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	da02      	bge.n	800444a <disk_read+0x52>
		{
			res = RES_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
 8004448:	e001      	b.n	800444e <disk_read+0x56>
		}else{

			res = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	e000      	b.n	8004454 <disk_read+0x5c>

	}

	return RES_PARERR;
 8004452:	2304      	movs	r3, #4
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <disk_write+0x20>
 8004476:	2b01      	cmp	r3, #1
 8004478:	d010      	beq.n	800449c <disk_write+0x40>
 800447a:	e01e      	b.n	80044ba <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	2001      	movs	r0, #1
 8004484:	f7ff fa48 	bl	8003918 <psram_sector_read_write>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	da02      	bge.n	8004494 <disk_write+0x38>
		{
			res = RES_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
 8004492:	e001      	b.n	8004498 <disk_write+0x3c>
		}else{

			res = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	e00f      	b.n	80044bc <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fd f818 	bl	80014d6 <extflash_sector_write>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	da02      	bge.n	80044b2 <disk_write+0x56>
		{
			res = RES_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
 80044b0:	e001      	b.n	80044b6 <disk_write+0x5a>
		}else{

			res = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	e000      	b.n	80044bc <disk_write+0x60>

	}

	return RES_PARERR;
 80044ba:	2304      	movs	r3, #4
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	603a      	str	r2, [r7, #0]
 80044ce:	71fb      	strb	r3, [r7, #7]
 80044d0:	460b      	mov	r3, r1
 80044d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 80044d4:	2304      	movs	r3, #4
 80044d6:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <disk_ioctl+0x20>
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d036      	beq.n	8004550 <disk_ioctl+0x8c>
 80044e2:	e06b      	b.n	80045bc <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 80044e4:	f7ff fa4a 	bl	800397c <psram_is_initialized>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <disk_ioctl+0x2e>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e065      	b.n	80045be <disk_ioctl+0xfa>

		switch(cmd)
 80044f2:	79bb      	ldrb	r3, [r7, #6]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d826      	bhi.n	8004546 <disk_ioctl+0x82>
 80044f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <disk_ioctl+0x3c>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004541 	.word	0x08004541
 8004504:	08004515 	.word	0x08004515
 8004508:	08004525 	.word	0x08004525
 800450c:	08004535 	.word	0x08004535
 8004510:	08004541 	.word	0x08004541
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8004514:	f7ff fa48 	bl	80039a8 <psram_get_sector_count>
 8004518:	4602      	mov	r2, r0
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	601a      	str	r2, [r3, #0]
				res = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
				break;
 8004522:	e013      	b.n	800454c <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8004524:	f7ff fa36 	bl	8003994 <psram_get_sector_size>
 8004528:	4602      	mov	r2, r0
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	601a      	str	r2, [r3, #0]
				res = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
				break;
 8004532:	e00b      	b.n	800454c <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
				res = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
				break;
 800453e:	e005      	b.n	800454c <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	73fb      	strb	r3, [r7, #15]
				break;
 8004544:	e002      	b.n	800454c <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8004546:	2304      	movs	r3, #4
 8004548:	73fb      	strb	r3, [r7, #15]
				break;
 800454a:	bf00      	nop
		}

		return res;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	e036      	b.n	80045be <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8004550:	f7fd f848 	bl	80015e4 <extflash_is_initialized>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <disk_ioctl+0x9a>
 800455a:	2303      	movs	r3, #3
 800455c:	e02f      	b.n	80045be <disk_ioctl+0xfa>

		switch(cmd)
 800455e:	79bb      	ldrb	r3, [r7, #6]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d826      	bhi.n	80045b2 <disk_ioctl+0xee>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <disk_ioctl+0xa8>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045ad 	.word	0x080045ad
 8004570:	08004581 	.word	0x08004581
 8004574:	08004591 	.word	0x08004591
 8004578:	080045a1 	.word	0x080045a1
 800457c:	080045ad 	.word	0x080045ad
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8004580:	f7fd f824 	bl	80015cc <extflash_get_sector_count>
 8004584:	4602      	mov	r2, r0
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
				res = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
				break;
 800458e:	e013      	b.n	80045b8 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8004590:	f7fd f813 	bl	80015ba <extflash_get_sector_size>
 8004594:	4602      	mov	r2, r0
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]
				res = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
				break;
 800459e:	e00b      	b.n	80045b8 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
				res = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
				break;
 80045aa:	e005      	b.n	80045b8 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]
				break;
 80045b0:	e002      	b.n	80045b8 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 80045b2:	2304      	movs	r3, #4
 80045b4:	73fb      	strb	r3, [r7, #15]
				break;
 80045b6:	bf00      	nop
		}

		return res;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	e000      	b.n	80045be <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 80045bc:	2304      	movs	r3, #4
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop

080045c8 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3301      	adds	r3, #1
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80045d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	b21a      	sxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	4313      	orrs	r3, r2
 80045e8:	b21b      	sxth	r3, r3
 80045ea:	81fb      	strh	r3, [r7, #14]
	return rv;
 80045ec:	89fb      	ldrh	r3, [r7, #14]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3303      	adds	r3, #3
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	3202      	adds	r2, #2
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	3201      	adds	r2, #1
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
	return rv;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <dbc_1st+0x14>
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <dbc_1st+0x16>
#endif
	return 0;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <dbc_2nd+0x14>
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <dbc_2nd+0x16>
#endif
	return 0;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	791b      	ldrb	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02c      	beq.n	8004780 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7858      	ldrb	r0, [r3, #1]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004734:	2301      	movs	r3, #1
 8004736:	f7ff fe91 	bl	800445c <disk_write>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11d      	bne.n	800477c <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1ad2      	subs	r2, r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	d213      	bcs.n	8004780 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	78db      	ldrb	r3, [r3, #3]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d10f      	bne.n	8004780 <sync_window+0x6e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7858      	ldrb	r0, [r3, #1]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	441a      	add	r2, r3
 8004774:	2301      	movs	r3, #1
 8004776:	f7ff fe71 	bl	800445c <disk_write>
 800477a:	e001      	b.n	8004780 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d01b      	beq.n	80047da <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ffb5 	bl	8004712 <sync_window>
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d113      	bne.n	80047da <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7858      	ldrb	r0, [r3, #1]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80047bc:	2301      	movs	r3, #1
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	f7ff fe1a 	bl	80043f8 <disk_read>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff90 	bl	8004712 <sync_window>
 80047f2:	4603      	mov	r3, r0
 80047f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d158      	bne.n	80048ae <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d148      	bne.n	8004896 <sync_fs+0xb2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	795b      	ldrb	r3, [r3, #5]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d144      	bne.n	8004896 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3334      	adds	r3, #52	@ 0x34
 8004810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f00b fe44 	bl	80104a4 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3334      	adds	r3, #52	@ 0x34
 8004820:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004824:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff09 	bl	8004640 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3334      	adds	r3, #52	@ 0x34
 8004832:	4921      	ldr	r1, [pc, #132]	@ (80048b8 <sync_fs+0xd4>)
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff1e 	bl	8004676 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3334      	adds	r3, #52	@ 0x34
 800483e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004842:	491e      	ldr	r1, [pc, #120]	@ (80048bc <sync_fs+0xd8>)
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff16 	bl	8004676 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3334      	adds	r3, #52	@ 0x34
 800484e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7ff ff0c 	bl	8004676 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3334      	adds	r3, #52	@ 0x34
 8004862:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f7ff ff02 	bl	8004676 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	7858      	ldrb	r0, [r3, #1]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800488a:	2301      	movs	r3, #1
 800488c:	f7ff fde6 	bl	800445c <disk_write>
			fs->fsi_flag = 0;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fe10 	bl	80044c4 <disk_ioctl>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <sync_fs+0xca>
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	41615252 	.word	0x41615252
 80048bc:	61417272 	.word	0x61417272

080048c0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	3b02      	subs	r3, #2
 80048ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	3b02      	subs	r3, #2
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d301      	bcc.n	80048e0 <clst2sect+0x20>
 80048dc:	2300      	movs	r3, #0
 80048de:	e008      	b.n	80048f2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	895b      	ldrh	r3, [r3, #10]
 80048e8:	4619      	mov	r1, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d904      	bls.n	800491e <get_fat+0x20>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <get_fat+0x26>
		val = 1;	/* Internal error */
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e0ba      	b.n	8004a9a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b03      	cmp	r3, #3
 8004930:	f000 8082 	beq.w	8004a38 <get_fat+0x13a>
 8004934:	2b03      	cmp	r3, #3
 8004936:	f300 80a6 	bgt.w	8004a86 <get_fat+0x188>
 800493a:	2b01      	cmp	r3, #1
 800493c:	d002      	beq.n	8004944 <get_fat+0x46>
 800493e:	2b02      	cmp	r3, #2
 8004940:	d055      	beq.n	80049ee <get_fat+0xf0>
 8004942:	e0a0      	b.n	8004a86 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	899b      	ldrh	r3, [r3, #12]
 800495a:	4619      	mov	r1, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004962:	4413      	add	r3, r2
 8004964:	4619      	mov	r1, r3
 8004966:	6938      	ldr	r0, [r7, #16]
 8004968:	f7ff ff0f 	bl	800478a <move_window>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 808c 	bne.w	8004a8c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	60fa      	str	r2, [r7, #12]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	8992      	ldrh	r2, [r2, #12]
 800497e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004982:	fb01 f202 	mul.w	r2, r1, r2
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004990:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	899b      	ldrh	r3, [r3, #12]
 800499a:	4619      	mov	r1, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	fbb3 f3f1 	udiv	r3, r3, r1
 80049a2:	4413      	add	r3, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	6938      	ldr	r0, [r7, #16]
 80049a8:	f7ff feef 	bl	800478a <move_window>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d16e      	bne.n	8004a90 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	899b      	ldrh	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80049be:	fb01 f202 	mul.w	r2, r1, r2
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <get_fat+0xe6>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	e002      	b.n	80049ea <get_fat+0xec>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	617b      	str	r3, [r7, #20]
			break;
 80049ec:	e055      	b.n	8004a9a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	899b      	ldrh	r3, [r3, #12]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a02:	4413      	add	r3, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	6938      	ldr	r0, [r7, #16]
 8004a08:	f7ff febf 	bl	800478a <move_window>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d140      	bne.n	8004a94 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	8992      	ldrh	r2, [r2, #12]
 8004a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a24:	fb00 f202 	mul.w	r2, r0, r2
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fdcb 	bl	80045c8 <ld_word>
 8004a32:	4603      	mov	r3, r0
 8004a34:	617b      	str	r3, [r7, #20]
			break;
 8004a36:	e030      	b.n	8004a9a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	899b      	ldrh	r3, [r3, #12]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4619      	mov	r1, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6938      	ldr	r0, [r7, #16]
 8004a52:	f7ff fe9a 	bl	800478a <move_window>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d11d      	bne.n	8004a98 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	8992      	ldrh	r2, [r2, #12]
 8004a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a6e:	fb00 f202 	mul.w	r2, r0, r2
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	440b      	add	r3, r1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fdbf 	bl	80045fa <ld_dword>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004a82:	617b      	str	r3, [r7, #20]
			break;
 8004a84:	e009      	b.n	8004a9a <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8004a86:	2301      	movs	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e006      	b.n	8004a9a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a8c:	bf00      	nop
 8004a8e:	e004      	b.n	8004a9a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a90:	bf00      	nop
 8004a92:	e002      	b.n	8004a9a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a98:	bf00      	nop
		}
	}

	return val;
 8004a9a:	697b      	ldr	r3, [r7, #20]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b089      	sub	sp, #36	@ 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	f240 8109 	bls.w	8004cce <put_fat+0x22a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	f080 8103 	bcs.w	8004cce <put_fat+0x22a>
		switch (fs->fs_type) {
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	f000 80b6 	beq.w	8004c3e <put_fat+0x19a>
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	f300 80fb 	bgt.w	8004cce <put_fat+0x22a>
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d003      	beq.n	8004ae4 <put_fat+0x40>
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	f000 8083 	beq.w	8004be8 <put_fat+0x144>
 8004ae2:	e0f4      	b.n	8004cce <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4413      	add	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	899b      	ldrh	r3, [r3, #12]
 8004afa:	4619      	mov	r1, r3
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	4413      	add	r3, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fe3f 	bl	800478a <move_window>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b10:	7ffb      	ldrb	r3, [r7, #31]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 80d4 	bne.w	8004cc0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	61ba      	str	r2, [r7, #24]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	8992      	ldrh	r2, [r2, #12]
 8004b28:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b2c:	fb00 f202 	mul.w	r2, r0, r2
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	440b      	add	r3, r1
 8004b34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <put_fat+0xb8>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	b25a      	sxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	b25b      	sxtb	r3, r3
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b25b      	sxtb	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e001      	b.n	8004b60 <put_fat+0xbc>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	899b      	ldrh	r3, [r3, #12]
 8004b72:	4619      	mov	r1, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fe03 	bl	800478a <move_window>
 8004b84:	4603      	mov	r3, r0
 8004b86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b88:	7ffb      	ldrb	r3, [r7, #31]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 809a 	bne.w	8004cc4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	899b      	ldrh	r3, [r3, #12]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ba2:	fb00 f202 	mul.w	r2, r0, r2
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <put_fat+0x11a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e00e      	b.n	8004bdc <put_fat+0x138>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b25b      	sxtb	r3, r3
 8004bc4:	f023 030f 	bic.w	r3, r3, #15
 8004bc8:	b25a      	sxtb	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	711a      	strb	r2, [r3, #4]
			break;
 8004be6:	e072      	b.n	8004cce <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	899b      	ldrh	r3, [r3, #12]
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff fdc2 	bl	800478a <move_window>
 8004c06:	4603      	mov	r3, r0
 8004c08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d15b      	bne.n	8004cc8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	8992      	ldrh	r2, [r2, #12]
 8004c1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c22:	fb00 f202 	mul.w	r2, r0, r2
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	440b      	add	r3, r1
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	b292      	uxth	r2, r2
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fd05 	bl	8004640 <st_word>
			fs->wflag = 1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	711a      	strb	r2, [r3, #4]
			break;
 8004c3c:	e047      	b.n	8004cce <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	899b      	ldrh	r3, [r3, #12]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c52:	4413      	add	r3, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fd97 	bl	800478a <move_window>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d132      	bne.n	8004ccc <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	8992      	ldrh	r2, [r2, #12]
 8004c7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c7e:	fb00 f202 	mul.w	r2, r0, r2
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	440b      	add	r3, r1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fcb7 	bl	80045fa <ld_dword>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004c92:	4323      	orrs	r3, r4
 8004c94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	8992      	ldrh	r2, [r2, #12]
 8004ca4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ca8:	fb00 f202 	mul.w	r2, r0, r2
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	440b      	add	r3, r1
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fcdf 	bl	8004676 <st_dword>
			fs->wflag = 1;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	711a      	strb	r2, [r3, #4]
			break;
 8004cbe:	e006      	b.n	8004cce <put_fat+0x22a>
			if (res != FR_OK) break;
 8004cc0:	bf00      	nop
 8004cc2:	e004      	b.n	8004cce <put_fat+0x22a>
			if (res != FR_OK) break;
 8004cc4:	bf00      	nop
 8004cc6:	e002      	b.n	8004cce <put_fat+0x22a>
			if (res != FR_OK) break;
 8004cc8:	bf00      	nop
 8004cca:	e000      	b.n	8004cce <put_fat+0x22a>
			if (res != FR_OK) break;
 8004ccc:	bf00      	nop
		}
	}
	return res;
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3724      	adds	r7, #36	@ 0x24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}

08004cd8 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d904      	bls.n	8004cfe <remove_chain+0x26>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d301      	bcc.n	8004d02 <remove_chain+0x2a>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e04b      	b.n	8004d9a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	69b8      	ldr	r0, [r7, #24]
 8004d10:	f7ff fec8 	bl	8004aa4 <put_fat>
 8004d14:	4603      	mov	r3, r0
 8004d16:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <remove_chain+0x4a>
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	e03b      	b.n	8004d9a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fdea 	bl	80048fe <get_fat>
 8004d2a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d031      	beq.n	8004d96 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <remove_chain+0x64>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e02e      	b.n	8004d9a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d101      	bne.n	8004d48 <remove_chain+0x70>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e028      	b.n	8004d9a <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004d48:	2200      	movs	r2, #0
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	69b8      	ldr	r0, [r7, #24]
 8004d4e:	f7ff fea9 	bl	8004aa4 <put_fat>
 8004d52:	4603      	mov	r3, r0
 8004d54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004d56:	7ffb      	ldrb	r3, [r7, #31]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <remove_chain+0x88>
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	e01c      	b.n	8004d9a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	3b02      	subs	r3, #2
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20b      	bcs.n	8004d86 <remove_chain+0xae>
			fs->free_clst++;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	795b      	ldrb	r3, [r3, #5]
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3c6      	bcc.n	8004d22 <remove_chain+0x4a>
 8004d94:	e000      	b.n	8004d98 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004d96:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b088      	sub	sp, #32
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <create_chain+0x2c>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d31b      	bcc.n	8004e06 <create_chain+0x64>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e018      	b.n	8004e06 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff fd91 	bl	80048fe <get_fat>
 8004ddc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d801      	bhi.n	8004de8 <create_chain+0x46>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0a9      	b.n	8004f3c <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d101      	bne.n	8004df4 <create_chain+0x52>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	e0a3      	b.n	8004f3c <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d201      	bcs.n	8004e02 <create_chain+0x60>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	e09c      	b.n	8004f3c <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <create_chain+0x70>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e094      	b.n	8004f3c <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d129      	bne.n	8004e72 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	3301      	adds	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d301      	bcc.n	8004e32 <create_chain+0x90>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fd62 	bl	80048fe <get_fat>
 8004e3a:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d003      	beq.n	8004e4a <create_chain+0xa8>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d101      	bne.n	8004e4e <create_chain+0xac>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	e076      	b.n	8004f3c <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00e      	beq.n	8004e72 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d906      	bls.n	8004e6e <create_chain+0xcc>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d201      	bcs.n	8004e6e <create_chain+0xcc>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d129      	bne.n	8004ecc <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d307      	bcc.n	8004e9c <create_chain+0xfa>
					ncl = 2;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d901      	bls.n	8004e9c <create_chain+0xfa>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e04f      	b.n	8004f3c <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fd2d 	bl	80048fe <get_fat>
 8004ea4:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00e      	beq.n	8004eca <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d003      	beq.n	8004eba <create_chain+0x118>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d101      	bne.n	8004ebe <create_chain+0x11c>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	e03e      	b.n	8004f3c <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d1da      	bne.n	8004e7c <create_chain+0xda>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e038      	b.n	8004f3c <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8004eca:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69f9      	ldr	r1, [r7, #28]
 8004ed2:	6938      	ldr	r0, [r7, #16]
 8004ed4:	f7ff fde6 	bl	8004aa4 <put_fat>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <create_chain+0x154>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6938      	ldr	r0, [r7, #16]
 8004eee:	f7ff fdd9 	bl	8004aa4 <put_fat>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <create_chain+0x188>
		fs->last_clst = ncl;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	3b02      	subs	r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d804      	bhi.n	8004f1a <create_chain+0x178>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	795b      	ldrb	r3, [r3, #5]
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	715a      	strb	r2, [r3, #5]
 8004f28:	e007      	b.n	8004f3a <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <create_chain+0x194>
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	e000      	b.n	8004f38 <create_chain+0x196>
 8004f36:	2301      	movs	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004f3a:	69fb      	ldr	r3, [r7, #28]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3720      	adds	r7, #32
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fbdf 	bl	8004712 <sync_window>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <dir_clear+0x1a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e036      	b.n	8004fcc <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fcad 	bl	80048c0 <clst2sect>
 8004f66:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3334      	adds	r3, #52	@ 0x34
 8004f72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f00b fa93 	bl	80104a4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3334      	adds	r3, #52	@ 0x34
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	2301      	movs	r3, #1
 8004f86:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e003      	b.n	8004f96 <dir_clear+0x52>
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4413      	add	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	895b      	ldrh	r3, [r3, #10]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d20b      	bcs.n	8004fba <dir_clear+0x76>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7858      	ldrb	r0, [r3, #1]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	441a      	add	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	f7ff fa54 	bl	800445c <disk_write>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0e9      	beq.n	8004f8e <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	895b      	ldrh	r3, [r3, #10]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fea:	d204      	bcs.n	8004ff6 <dir_sdi+0x22>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e071      	b.n	80050de <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <dir_sdi+0x46>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d902      	bls.n	800501a <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10c      	bne.n	800503a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	8912      	ldrh	r2, [r2, #8]
 8005028:	4293      	cmp	r3, r2
 800502a:	d301      	bcc.n	8005030 <dir_sdi+0x5c>
 800502c:	2302      	movs	r3, #2
 800502e:	e056      	b.n	80050de <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	e02d      	b.n	8005096 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	895b      	ldrh	r3, [r3, #10]
 800503e:	461a      	mov	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	899b      	ldrh	r3, [r3, #12]
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800504a:	e019      	b.n	8005080 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fc54 	bl	80048fe <get_fat>
 8005056:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d101      	bne.n	8005064 <dir_sdi+0x90>
 8005060:	2301      	movs	r3, #1
 8005062:	e03c      	b.n	80050de <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d904      	bls.n	8005074 <dir_sdi+0xa0>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	429a      	cmp	r2, r3
 8005072:	d301      	bcc.n	8005078 <dir_sdi+0xa4>
 8005074:	2302      	movs	r3, #2
 8005076:	e032      	b.n	80050de <dir_sdi+0x10a>
			ofs -= csz;
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	429a      	cmp	r2, r3
 8005086:	d2e1      	bcs.n	800504c <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f7ff fc18 	bl	80048c0 <clst2sect>
 8005090:	4602      	mov	r2, r0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <dir_sdi+0xd4>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e01a      	b.n	80050de <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	899b      	ldrh	r3, [r3, #12]
 80050b0:	4619      	mov	r1, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b8:	441a      	add	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	899b      	ldrh	r3, [r3, #12]
 80050c8:	461a      	mov	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80050d0:	fb00 f202 	mul.w	r2, r0, r2
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	18ca      	adds	r2, r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	3320      	adds	r3, #32
 80050fc:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005104:	d302      	bcc.n	800510c <dir_next+0x26>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <dir_next+0x32>
 8005114:	2304      	movs	r3, #4
 8005116:	e088      	b.n	800522a <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	899b      	ldrh	r3, [r3, #12]
 800511c:	461a      	mov	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	fbb3 f1f2 	udiv	r1, r3, r2
 8005124:	fb01 f202 	mul.w	r2, r1, r2
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d16a      	bne.n	8005204 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	8912      	ldrh	r2, [r2, #8]
 8005148:	4293      	cmp	r3, r2
 800514a:	d35b      	bcc.n	8005204 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	619a      	str	r2, [r3, #24]
 8005152:	2304      	movs	r3, #4
 8005154:	e069      	b.n	800522a <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	899b      	ldrh	r3, [r3, #12]
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	8952      	ldrh	r2, [r2, #10]
 8005166:	3a01      	subs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d14a      	bne.n	8005204 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7ff fbc1 	bl	80048fe <get_fat>
 800517c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d801      	bhi.n	8005188 <dir_next+0xa2>
 8005184:	2302      	movs	r3, #2
 8005186:	e050      	b.n	800522a <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d101      	bne.n	8005194 <dir_next+0xae>
 8005190:	2301      	movs	r3, #1
 8005192:	e04a      	b.n	800522a <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	429a      	cmp	r2, r3
 800519c:	d328      	bcc.n	80051f0 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
 80051aa:	2304      	movs	r3, #4
 80051ac:	e03d      	b.n	800522a <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7ff fdf3 	bl	8004da2 <create_chain>
 80051bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <dir_next+0xe2>
 80051c4:	2307      	movs	r3, #7
 80051c6:	e030      	b.n	800522a <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <dir_next+0xec>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e02b      	b.n	800522a <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d101      	bne.n	80051de <dir_next+0xf8>
 80051da:	2301      	movs	r3, #1
 80051dc:	e025      	b.n	800522a <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80051de:	6979      	ldr	r1, [r7, #20]
 80051e0:	6938      	ldr	r0, [r7, #16]
 80051e2:	f7ff feaf 	bl	8004f44 <dir_clear>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <dir_next+0x10a>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e01c      	b.n	800522a <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	6938      	ldr	r0, [r7, #16]
 80051fa:	f7ff fb61 	bl	80048c0 <clst2sect>
 80051fe:	4602      	mov	r2, r0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	899b      	ldrh	r3, [r3, #12]
 8005214:	461a      	mov	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	fbb3 f0f2 	udiv	r0, r3, r2
 800521c:	fb00 f202 	mul.w	r2, r0, r2
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	18ca      	adds	r2, r1, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005242:	2100      	movs	r1, #0
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fec5 	bl	8004fd4 <dir_sdi>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d12b      	bne.n	80052ac <dir_alloc+0x7a>
		n = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	4619      	mov	r1, r3
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff fa93 	bl	800478a <move_window>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11d      	bne.n	80052aa <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2be5      	cmp	r3, #229	@ 0xe5
 8005276:	d004      	beq.n	8005282 <dir_alloc+0x50>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d102      	bne.n	8005296 <dir_alloc+0x64>
 8005290:	e00c      	b.n	80052ac <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8005296:	2101      	movs	r1, #1
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff24 	bl	80050e6 <dir_next>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0d7      	beq.n	8005258 <dir_alloc+0x26>
 80052a8:	e000      	b.n	80052ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80052aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d101      	bne.n	80052b6 <dir_alloc+0x84>
 80052b2:	2307      	movs	r3, #7
 80052b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	331a      	adds	r3, #26
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f97a 	bl	80045c8 <ld_word>
 80052d4:	4603      	mov	r3, r0
 80052d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d109      	bne.n	80052f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff f96f 	bl	80045c8 <ld_word>
 80052ea:	4603      	mov	r3, r0
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	331a      	adds	r3, #26
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	b292      	uxth	r2, r2
 8005312:	4611      	mov	r1, r2
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f993 	bl	8004640 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d109      	bne.n	8005336 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f103 0214 	add.w	r2, r3, #20
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	b29b      	uxth	r3, r3
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7ff f985 	bl	8004640 <st_word>
	}
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005348:	2304      	movs	r3, #4
 800534a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005352:	e03c      	b.n	80053ce <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	4619      	mov	r1, r3
 800535a:	6938      	ldr	r0, [r7, #16]
 800535c:	f7ff fa15 	bl	800478a <move_window>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d136      	bne.n	80053d8 <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005378:	2304      	movs	r3, #4
 800537a:	75fb      	strb	r3, [r7, #23]
 800537c:	e031      	b.n	80053e2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	330b      	adds	r3, #11
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800538a:	73bb      	strb	r3, [r7, #14]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7bba      	ldrb	r2, [r7, #14]
 8005390:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2be5      	cmp	r3, #229	@ 0xe5
 8005396:	d011      	beq.n	80053bc <dir_read+0x7e>
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b2e      	cmp	r3, #46	@ 0x2e
 800539c:	d00e      	beq.n	80053bc <dir_read+0x7e>
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d00b      	beq.n	80053bc <dir_read+0x7e>
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	f023 0320 	bic.w	r3, r3, #32
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00f      	beq.n	80053dc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80053bc:	2100      	movs	r1, #0
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff fe91 	bl	80050e6 <dir_next>
 80053c4:	4603      	mov	r3, r0
 80053c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <dir_read+0xa2>
	while (dp->sect) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1be      	bne.n	8005354 <dir_read+0x16>
 80053d6:	e004      	b.n	80053e2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80053d8:	bf00      	nop
 80053da:	e002      	b.n	80053e2 <dir_read+0xa4>
				break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80053e0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <dir_read+0xb0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
	return res;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005406:	2100      	movs	r1, #0
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fde3 	bl	8004fd4 <dir_sdi>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <dir_find+0x24>
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	e03e      	b.n	800549a <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	4619      	mov	r1, r3
 8005422:	6938      	ldr	r0, [r7, #16]
 8005424:	f7ff f9b1 	bl	800478a <move_window>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d12f      	bne.n	8005492 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <dir_find+0x4e>
 8005440:	2304      	movs	r3, #4
 8005442:	75fb      	strb	r3, [r7, #23]
 8005444:	e028      	b.n	8005498 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	330b      	adds	r3, #11
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005452:	b2da      	uxtb	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	330b      	adds	r3, #11
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <dir_find+0x86>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69d8      	ldr	r0, [r3, #28]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3320      	adds	r3, #32
 8005470:	220b      	movs	r2, #11
 8005472:	4619      	mov	r1, r3
 8005474:	f00b f806 	bl	8010484 <memcmp>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800547e:	2100      	movs	r1, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fe30 	bl	80050e6 <dir_next>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800548a:	7dfb      	ldrb	r3, [r7, #23]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0c5      	beq.n	800541c <dir_find+0x24>
 8005490:	e002      	b.n	8005498 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005496:	bf00      	nop

	return res;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80054b0:	2101      	movs	r1, #1
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff febd 	bl	8005232 <dir_alloc>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11c      	bne.n	80054fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	4619      	mov	r1, r3
 80054c8:	68b8      	ldr	r0, [r7, #8]
 80054ca:	f7ff f95e 	bl	800478a <move_window>
 80054ce:	4603      	mov	r3, r0
 80054d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d111      	bne.n	80054fc <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	2220      	movs	r2, #32
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f00a ffdf 	bl	80104a4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69d8      	ldr	r0, [r3, #28]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3320      	adds	r3, #32
 80054ee:	220b      	movs	r2, #11
 80054f0:	4619      	mov	r1, r3
 80054f2:	f00b f82f 	bl	8010554 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2201      	movs	r2, #1
 80054fa:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	4619      	mov	r1, r3
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff f935 	bl	800478a <move_window>
 8005520:	4603      	mov	r3, r0
 8005522:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005524:	7afb      	ldrb	r3, [r7, #11]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	22e5      	movs	r2, #229	@ 0xe5
 8005530:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	711a      	strb	r2, [r3, #4]
	}
#endif

	return res;
 8005538:	7afb      	ldrb	r3, [r7, #11]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	@ 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3320      	adds	r3, #32
 8005558:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 800555a:	220b      	movs	r2, #11
 800555c:	2120      	movs	r1, #32
 800555e:	6938      	ldr	r0, [r7, #16]
 8005560:	f00a ffa0 	bl	80104a4 <memset>
	si = i = 0; ni = 8;
 8005564:	2300      	movs	r3, #0
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	2308      	movs	r3, #8
 800556e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	61fa      	str	r2, [r7, #28]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005584:	2b20      	cmp	r3, #32
 8005586:	f240 8089 	bls.w	800569c <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800558a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800558e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005590:	d007      	beq.n	80055a2 <create_name+0x5e>
 8005592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005596:	2b5c      	cmp	r3, #92	@ 0x5c
 8005598:	d110      	bne.n	80055bc <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800559a:	e002      	b.n	80055a2 <create_name+0x5e>
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80055ac:	d0f6      	beq.n	800559c <create_name+0x58>
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80055b8:	d0f0      	beq.n	800559c <create_name+0x58>
			break;
 80055ba:	e070      	b.n	800569e <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80055bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80055c2:	d003      	beq.n	80055cc <create_name+0x88>
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d30d      	bcc.n	80055e8 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b0b      	cmp	r3, #11
 80055d0:	d003      	beq.n	80055da <create_name+0x96>
 80055d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d8:	d001      	beq.n	80055de <create_name+0x9a>
 80055da:	2306      	movs	r3, #6
 80055dc:	e081      	b.n	80056e2 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 80055de:	2308      	movs	r3, #8
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	230b      	movs	r3, #11
 80055e4:	623b      	str	r3, [r7, #32]
			continue;
 80055e6:	e058      	b.n	800569a <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 80055e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	da07      	bge.n	8005600 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 80055f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f8:	4a3c      	ldr	r2, [pc, #240]	@ (80056ec <create_name+0x1a8>)
 80055fa:	5cd3      	ldrb	r3, [r2, r3]
 80055fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8005600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff f862 	bl	80046ce <dbc_1st>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d024      	beq.n	800565a <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	61fa      	str	r2, [r7, #28]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff f865 	bl	80046f0 <dbc_2nd>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <create_name+0xf2>
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	3b01      	subs	r3, #1
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	429a      	cmp	r2, r3
 8005634:	d301      	bcc.n	800563a <create_name+0xf6>
 8005636:	2306      	movs	r3, #6
 8005638:	e053      	b.n	80056e2 <create_name+0x19e>
			sfn[i++] = c;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	61ba      	str	r2, [r7, #24]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005648:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	61ba      	str	r2, [r7, #24]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	7bfa      	ldrb	r2, [r7, #15]
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e78a      	b.n	8005570 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800565a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800565e:	4619      	mov	r1, r3
 8005660:	4823      	ldr	r0, [pc, #140]	@ (80056f0 <create_name+0x1ac>)
 8005662:	f00a ff27 	bl	80104b4 <strchr>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <create_name+0x12c>
 800566c:	2306      	movs	r3, #6
 800566e:	e038      	b.n	80056e2 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005674:	2b60      	cmp	r3, #96	@ 0x60
 8005676:	d908      	bls.n	800568a <create_name+0x146>
 8005678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800567c:	2b7a      	cmp	r3, #122	@ 0x7a
 800567e:	d804      	bhi.n	800568a <create_name+0x146>
 8005680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005684:	3b20      	subs	r3, #32
 8005686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	61ba      	str	r2, [r7, #24]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005698:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800569a:	e769      	b.n	8005570 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800569c:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	441a      	add	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <create_name+0x16e>
 80056ae:	2306      	movs	r3, #6
 80056b0:	e017      	b.n	80056e2 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2be5      	cmp	r3, #229	@ 0xe5
 80056b8:	d102      	bne.n	80056c0 <create_name+0x17c>
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2205      	movs	r2, #5
 80056be:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 80056c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d905      	bls.n	80056d4 <create_name+0x190>
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d801      	bhi.n	80056d8 <create_name+0x194>
 80056d4:	2204      	movs	r2, #4
 80056d6:	e000      	b.n	80056da <create_name+0x196>
 80056d8:	2200      	movs	r2, #0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	330b      	adds	r3, #11
 80056de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80056e0:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3728      	adds	r7, #40	@ 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	080110b4 	.word	0x080110b4
 80056f0:	0801101c 	.word	0x0801101c

080056f4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8005704:	e002      	b.n	800570c <follow_path+0x18>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b2f      	cmp	r3, #47	@ 0x2f
 8005712:	d0f8      	beq.n	8005706 <follow_path+0x12>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b5c      	cmp	r3, #92	@ 0x5c
 800571a:	d0f4      	beq.n	8005706 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b1f      	cmp	r3, #31
 8005728:	d80a      	bhi.n	8005740 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2280      	movs	r2, #128	@ 0x80
 800572e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8005732:	2100      	movs	r1, #0
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fc4d 	bl	8004fd4 <dir_sdi>
 800573a:	4603      	mov	r3, r0
 800573c:	75fb      	strb	r3, [r7, #23]
 800573e:	e048      	b.n	80057d2 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005740:	463b      	mov	r3, r7
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fefd 	bl	8005544 <create_name>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d139      	bne.n	80057c8 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff fe4f 	bl	80053f8 <dir_find>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8005764:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b04      	cmp	r3, #4
 8005770:	d12c      	bne.n	80057cc <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d127      	bne.n	80057cc <follow_path+0xd8>
 800577c:	2305      	movs	r3, #5
 800577e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005780:	e024      	b.n	80057cc <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d121      	bne.n	80057d0 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	799b      	ldrb	r3, [r3, #6]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8005798:	2305      	movs	r3, #5
 800579a:	75fb      	strb	r3, [r7, #23]
 800579c:	e019      	b.n	80057d2 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	8992      	ldrh	r2, [r2, #12]
 80057ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80057b0:	fb00 f202 	mul.w	r2, r0, r2
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	440b      	add	r3, r1
 80057b8:	4619      	mov	r1, r3
 80057ba:	6938      	ldr	r0, [r7, #16]
 80057bc:	f7ff fd80 	bl	80052c0 <ld_clust>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057c6:	e7bb      	b.n	8005740 <follow_path+0x4c>
			if (res != FR_OK) break;
 80057c8:	bf00      	nop
 80057ca:	e002      	b.n	80057d2 <follow_path+0xde>
				break;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80057d0:	bf00      	nop
			}
		}
	}

	return res;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80057dc:	b480      	push	{r7}
 80057de:	b08b      	sub	sp, #44	@ 0x2c
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295
 80057e8:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <get_ldnumber+0x22>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	e080      	b.n	8005900 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	623a      	str	r2, [r7, #32]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8005808:	7ffb      	ldrb	r3, [r7, #31]
 800580a:	2b20      	cmp	r3, #32
 800580c:	d902      	bls.n	8005814 <get_ldnumber+0x38>
 800580e:	7ffb      	ldrb	r3, [r7, #31]
 8005810:	2b3a      	cmp	r3, #58	@ 0x3a
 8005812:	d1f4      	bne.n	80057fe <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8005814:	7ffb      	ldrb	r3, [r7, #31]
 8005816:	2b3a      	cmp	r3, #58	@ 0x3a
 8005818:	d11c      	bne.n	8005854 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800581a:	2302      	movs	r3, #2
 800581c:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b2f      	cmp	r3, #47	@ 0x2f
 8005824:	d90c      	bls.n	8005840 <get_ldnumber+0x64>
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b39      	cmp	r3, #57	@ 0x39
 800582c:	d808      	bhi.n	8005840 <get_ldnumber+0x64>
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	3302      	adds	r3, #2
 8005832:	6a3a      	ldr	r2, [r7, #32]
 8005834:	429a      	cmp	r2, r3
 8005836:	d103      	bne.n	8005840 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	3b30      	subs	r3, #48	@ 0x30
 800583e:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	dc04      	bgt.n	8005850 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	e055      	b.n	8005900 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b2f      	cmp	r3, #47	@ 0x2f
 800585a:	d14e      	bne.n	80058fa <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 800585c:	e002      	b.n	8005864 <get_ldnumber+0x88>
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	3301      	adds	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	3301      	adds	r3, #1
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b2f      	cmp	r3, #47	@ 0x2f
 800586c:	d0f7      	beq.n	800585e <get_ldnumber+0x82>
		i = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	4a25      	ldr	r2, [pc, #148]	@ (800590c <get_ldnumber+0x130>)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800587e:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	613a      	str	r2, [r7, #16]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	3301      	adds	r3, #1
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b60      	cmp	r3, #96	@ 0x60
 800589a:	d905      	bls.n	80058a8 <get_ldnumber+0xcc>
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b7a      	cmp	r3, #122	@ 0x7a
 80058a0:	d802      	bhi.n	80058a8 <get_ldnumber+0xcc>
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	3b20      	subs	r3, #32
 80058a6:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 80058a8:	7ffb      	ldrb	r3, [r7, #31]
 80058aa:	2b60      	cmp	r3, #96	@ 0x60
 80058ac:	d905      	bls.n	80058ba <get_ldnumber+0xde>
 80058ae:	7ffb      	ldrb	r3, [r7, #31]
 80058b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80058b2:	d802      	bhi.n	80058ba <get_ldnumber+0xde>
 80058b4:	7ffb      	ldrb	r3, [r7, #31]
 80058b6:	3b20      	subs	r3, #32
 80058b8:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <get_ldnumber+0xec>
 80058c0:	7bfa      	ldrb	r2, [r7, #15]
 80058c2:	7ffb      	ldrb	r3, [r7, #31]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d0db      	beq.n	8005880 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d105      	bne.n	80058da <get_ldnumber+0xfe>
 80058ce:	7ffb      	ldrb	r3, [r7, #31]
 80058d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80058d2:	d008      	beq.n	80058e6 <get_ldnumber+0x10a>
 80058d4:	7ffb      	ldrb	r3, [r7, #31]
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d905      	bls.n	80058e6 <get_ldnumber+0x10a>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3301      	adds	r3, #1
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	ddc5      	ble.n	8005872 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	dc04      	bgt.n	80058f6 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a3a      	ldr	r2, [r7, #32]
 80058f4:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	e002      	b.n	8005900 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	372c      	adds	r7, #44	@ 0x2c
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000004 	.word	0x20000004

08005910 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	711a      	strb	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fe ff2d 	bl	800478a <move_window>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <check_fs+0x2a>
 8005936:	2304      	movs	r3, #4
 8005938:	e088      	b.n	8005a4c <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3334      	adds	r3, #52	@ 0x34
 800593e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fe40 	bl	80045c8 <ld_word>
 8005948:	4603      	mov	r3, r0
 800594a:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005952:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8005954:	7b7b      	ldrb	r3, [r7, #13]
 8005956:	2beb      	cmp	r3, #235	@ 0xeb
 8005958:	d005      	beq.n	8005966 <check_fs+0x56>
 800595a:	7b7b      	ldrb	r3, [r7, #13]
 800595c:	2be9      	cmp	r3, #233	@ 0xe9
 800595e:	d002      	beq.n	8005966 <check_fs+0x56>
 8005960:	7b7b      	ldrb	r3, [r7, #13]
 8005962:	2be8      	cmp	r3, #232	@ 0xe8
 8005964:	d16a      	bne.n	8005a3c <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800596c:	4293      	cmp	r3, r2
 800596e:	d10c      	bne.n	800598a <check_fs+0x7a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3334      	adds	r3, #52	@ 0x34
 8005974:	3352      	adds	r3, #82	@ 0x52
 8005976:	2208      	movs	r2, #8
 8005978:	4936      	ldr	r1, [pc, #216]	@ (8005a54 <check_fs+0x144>)
 800597a:	4618      	mov	r0, r3
 800597c:	f00a fd82 	bl	8010484 <memcmp>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8005986:	2300      	movs	r3, #0
 8005988:	e060      	b.n	8005a4c <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3334      	adds	r3, #52	@ 0x34
 800598e:	330b      	adds	r3, #11
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fe19 	bl	80045c8 <ld_word>
 8005996:	4603      	mov	r3, r0
 8005998:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a0:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80059a2:	897a      	ldrh	r2, [r7, #10]
 80059a4:	897b      	ldrh	r3, [r7, #10]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d146      	bne.n	8005a3c <check_fs+0x12c>
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059b4:	d342      	bcc.n	8005a3c <check_fs+0x12c>
 80059b6:	897b      	ldrh	r3, [r7, #10]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059bc:	d83e      	bhi.n	8005a3c <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80059be:	7b7b      	ldrb	r3, [r7, #13]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d03b      	beq.n	8005a3c <check_fs+0x12c>
 80059c4:	7b7a      	ldrb	r2, [r7, #13]
 80059c6:	7b7b      	ldrb	r3, [r7, #13]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d135      	bne.n	8005a3c <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3334      	adds	r3, #52	@ 0x34
 80059d4:	330e      	adds	r3, #14
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fdf6 	bl	80045c8 <ld_word>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02c      	beq.n	8005a3c <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059e8:	3b01      	subs	r3, #1
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d826      	bhi.n	8005a3c <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3334      	adds	r3, #52	@ 0x34
 80059f2:	3311      	adds	r3, #17
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fde7 	bl	80045c8 <ld_word>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01d      	beq.n	8005a3c <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3334      	adds	r3, #52	@ 0x34
 8005a04:	3313      	adds	r3, #19
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fdde 	bl	80045c8 <ld_word>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a10:	d809      	bhi.n	8005a26 <check_fs+0x116>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3334      	adds	r3, #52	@ 0x34
 8005a16:	3320      	adds	r3, #32
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fdee 	bl	80045fa <ld_dword>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a24:	d30a      	bcc.n	8005a3c <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3334      	adds	r3, #52	@ 0x34
 8005a2a:	3316      	adds	r3, #22
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fdcb 	bl	80045c8 <ld_word>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e007      	b.n	8005a4c <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8005a3c:	89fb      	ldrh	r3, [r7, #14]
 8005a3e:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <check_fs+0x13a>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e000      	b.n	8005a4c <check_fs+0x13c>
 8005a4a:	2303      	movs	r3, #3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	0801102c 	.word	0x0801102c

08005a58 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff53 	bl	8005910 <check_fs>
 8005a6a:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d007      	beq.n	8005a82 <find_volume+0x2a>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d802      	bhi.n	8005a7e <find_volume+0x26>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <find_volume+0x2a>
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	e045      	b.n	8005b0e <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	e014      	b.n	8005ab2 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8005a96:	4413      	add	r3, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe fdae 	bl	80045fa <ld_dword>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	3320      	adds	r3, #32
 8005aa6:	443b      	add	r3, r7
 8005aa8:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d9e7      	bls.n	8005a88 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <find_volume+0x6c>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <find_volume+0x6e>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	3320      	adds	r3, #32
 8005ace:	443b      	add	r3, r7
 8005ad0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <find_volume+0x98>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	3320      	adds	r3, #32
 8005ade:	443b      	add	r3, r7
 8005ae0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff12 	bl	8005910 <check_fs>
 8005aec:	4603      	mov	r3, r0
 8005aee:	e000      	b.n	8005af2 <find_volume+0x9a>
 8005af0:	2303      	movs	r3, #3
 8005af2:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <find_volume+0xb4>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d905      	bls.n	8005b0c <find_volume+0xb4>
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d9dd      	bls.n	8005ac8 <find_volume+0x70>
	return fmt;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b090      	sub	sp, #64	@ 0x40
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fe55 	bl	80057dc <get_ldnumber>
 8005b32:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da01      	bge.n	8005b3e <mount_volume+0x26>
 8005b3a:	230b      	movs	r3, #11
 8005b3c:	e207      	b.n	8005f4e <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005b3e:	4aa2      	ldr	r2, [pc, #648]	@ (8005dc8 <mount_volume+0x2b0>)
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <mount_volume+0x3a>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	e1fd      	b.n	8005f4e <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01a      	beq.n	8005b9e <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe fbf3 	bl	8004358 <disk_status>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10c      	bne.n	8005b9e <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <mount_volume+0x82>
 8005b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005b96:	230a      	movs	r3, #10
 8005b98:	e1d9      	b.n	8005f4e <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e1d7      	b.n	8005f4e <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fbfd 	bl	80043a8 <disk_initialize>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1c4      	b.n	8005f4e <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <mount_volume+0xc2>
 8005bca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8005bd6:	230a      	movs	r3, #10
 8005bd8:	e1b9      	b.n	8005f4e <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	7858      	ldrb	r0, [r3, #1]
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	330c      	adds	r3, #12
 8005be2:	461a      	mov	r2, r3
 8005be4:	2102      	movs	r1, #2
 8005be6:	f7fe fc6d 	bl	80044c4 <disk_ioctl>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <mount_volume+0xdc>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e1ac      	b.n	8005f4e <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf6:	899b      	ldrh	r3, [r3, #12]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bfc:	d80d      	bhi.n	8005c1a <mount_volume+0x102>
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	899b      	ldrh	r3, [r3, #12]
 8005c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c06:	d308      	bcc.n	8005c1a <mount_volume+0x102>
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	899b      	ldrh	r3, [r3, #12]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	899b      	ldrh	r3, [r3, #12]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <mount_volume+0x106>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e197      	b.n	8005f4e <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c22:	f7ff ff19 	bl	8005a58 <find_volume>
 8005c26:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d101      	bne.n	8005c32 <mount_volume+0x11a>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e18d      	b.n	8005f4e <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d901      	bls.n	8005c3c <mount_volume+0x124>
 8005c38:	230d      	movs	r3, #13
 8005c3a:	e188      	b.n	8005f4e <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c40:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	3334      	adds	r3, #52	@ 0x34
 8005c46:	330b      	adds	r3, #11
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fcbd 	bl	80045c8 <ld_word>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	899b      	ldrh	r3, [r3, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d001      	beq.n	8005c5e <mount_volume+0x146>
 8005c5a:	230d      	movs	r3, #13
 8005c5c:	e177      	b.n	8005f4e <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	3334      	adds	r3, #52	@ 0x34
 8005c62:	3316      	adds	r3, #22
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fcaf 	bl	80045c8 <ld_word>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <mount_volume+0x16a>
 8005c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c76:	3334      	adds	r3, #52	@ 0x34
 8005c78:	3324      	adds	r3, #36	@ 0x24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fcbd 	bl	80045fa <ld_dword>
 8005c80:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c86:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d005      	beq.n	8005ca6 <mount_volume+0x18e>
 8005c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d001      	beq.n	8005ca6 <mount_volume+0x18e>
 8005ca2:	230d      	movs	r3, #13
 8005ca4:	e153      	b.n	8005f4e <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	895b      	ldrh	r3, [r3, #10]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <mount_volume+0x1c2>
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	895b      	ldrh	r3, [r3, #10]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	895b      	ldrh	r3, [r3, #10]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <mount_volume+0x1c6>
 8005cda:	230d      	movs	r3, #13
 8005cdc:	e137      	b.n	8005f4e <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	3334      	adds	r3, #52	@ 0x34
 8005ce2:	3311      	adds	r3, #17
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe fc6f 	bl	80045c8 <ld_word>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf4:	891b      	ldrh	r3, [r3, #8]
 8005cf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cf8:	8992      	ldrh	r2, [r2, #12]
 8005cfa:	0952      	lsrs	r2, r2, #5
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d02:	fb01 f202 	mul.w	r2, r1, r2
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <mount_volume+0x1fa>
 8005d0e:	230d      	movs	r3, #13
 8005d10:	e11d      	b.n	8005f4e <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	3334      	adds	r3, #52	@ 0x34
 8005d16:	3313      	adds	r3, #19
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe fc55 	bl	80045c8 <ld_word>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <mount_volume+0x21e>
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	3334      	adds	r3, #52	@ 0x34
 8005d2c:	3320      	adds	r3, #32
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fc63 	bl	80045fa <ld_dword>
 8005d34:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	3334      	adds	r3, #52	@ 0x34
 8005d3a:	330e      	adds	r3, #14
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe fc43 	bl	80045c8 <ld_word>
 8005d42:	4603      	mov	r3, r0
 8005d44:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d46:	8bfb      	ldrh	r3, [r7, #30]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <mount_volume+0x238>
 8005d4c:	230d      	movs	r3, #13
 8005d4e:	e0fe      	b.n	8005f4e <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005d50:	8bfa      	ldrh	r2, [r7, #30]
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	4413      	add	r3, r2
 8005d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d58:	8911      	ldrh	r1, [r2, #8]
 8005d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d5c:	8992      	ldrh	r2, [r2, #12]
 8005d5e:	0952      	lsrs	r2, r2, #5
 8005d60:	b292      	uxth	r2, r2
 8005d62:	fbb1 f2f2 	udiv	r2, r1, r2
 8005d66:	b292      	uxth	r2, r2
 8005d68:	4413      	add	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d201      	bcs.n	8005d78 <mount_volume+0x260>
 8005d74:	230d      	movs	r3, #13
 8005d76:	e0ea      	b.n	8005f4e <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d80:	8952      	ldrh	r2, [r2, #10]
 8005d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <mount_volume+0x27a>
 8005d8e:	230d      	movs	r3, #13
 8005d90:	e0dd      	b.n	8005f4e <mount_volume+0x436>
		fmt = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4a0c      	ldr	r2, [pc, #48]	@ (8005dcc <mount_volume+0x2b4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d801      	bhi.n	8005da2 <mount_volume+0x28a>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d801      	bhi.n	8005db0 <mount_volume+0x298>
 8005dac:	2302      	movs	r3, #2
 8005dae:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d801      	bhi.n	8005dbe <mount_volume+0x2a6>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <mount_volume+0x2b8>
 8005dc4:	230d      	movs	r3, #13
 8005dc6:	e0c2      	b.n	8005f4e <mount_volume+0x436>
 8005dc8:	200077a8 	.word	0x200077a8
 8005dcc:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	1c9a      	adds	r2, r3, #2
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005dde:	8bfa      	ldrh	r2, [r7, #30]
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	441a      	add	r2, r3
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005de8:	6a3a      	ldr	r2, [r7, #32]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	441a      	add	r2, r3
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d11e      	bne.n	8005e36 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	3334      	adds	r3, #52	@ 0x34
 8005dfc:	332a      	adds	r3, #42	@ 0x2a
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fbe2 	bl	80045c8 <ld_word>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <mount_volume+0x2f6>
 8005e0a:	230d      	movs	r3, #13
 8005e0c:	e09f      	b.n	8005f4e <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e10:	891b      	ldrh	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <mount_volume+0x302>
 8005e16:	230d      	movs	r3, #13
 8005e18:	e099      	b.n	8005f4e <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	3334      	adds	r3, #52	@ 0x34
 8005e1e:	332c      	adds	r3, #44	@ 0x2c
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe fbea 	bl	80045fa <ld_dword>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e34:	e01e      	b.n	8005e74 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	891b      	ldrh	r3, [r3, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <mount_volume+0x32a>
 8005e3e:	230d      	movs	r3, #13
 8005e40:	e085      	b.n	8005f4e <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	441a      	add	r2, r3
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d103      	bne.n	8005e5c <mount_volume+0x344>
 8005e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	e00a      	b.n	8005e72 <mount_volume+0x35a>
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	085a      	lsrs	r2, r3, #1
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	899b      	ldrh	r3, [r3, #12]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	440b      	add	r3, r1
 8005e82:	3b01      	subs	r3, #1
 8005e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e86:	8989      	ldrh	r1, [r1, #12]
 8005e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d201      	bcs.n	8005e94 <mount_volume+0x37c>
 8005e90:	230d      	movs	r3, #13
 8005e92:	e05c      	b.n	8005f4e <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9a:	615a      	str	r2, [r3, #20]
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	2280      	movs	r2, #128	@ 0x80
 8005ea8:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d13f      	bne.n	8005f30 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	3334      	adds	r3, #52	@ 0x34
 8005eb4:	3330      	adds	r3, #48	@ 0x30
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fb86 	bl	80045c8 <ld_word>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d136      	bne.n	8005f30 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eca:	f7fe fc5e 	bl	800478a <move_window>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d12d      	bne.n	8005f30 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	3334      	adds	r3, #52	@ 0x34
 8005ede:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fb70 	bl	80045c8 <ld_word>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d11d      	bne.n	8005f30 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	3334      	adds	r3, #52	@ 0x34
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fb7e 	bl	80045fa <ld_dword>
 8005efe:	4603      	mov	r3, r0
 8005f00:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <mount_volume+0x440>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d114      	bne.n	8005f30 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	3334      	adds	r3, #52	@ 0x34
 8005f0a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fb73 	bl	80045fa <ld_dword>
 8005f14:	4603      	mov	r3, r0
 8005f16:	4a11      	ldr	r2, [pc, #68]	@ (8005f5c <mount_volume+0x444>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d109      	bne.n	8005f30 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	3334      	adds	r3, #52	@ 0x34
 8005f20:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fb68 	bl	80045fa <ld_dword>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <mount_volume+0x448>)
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	4b07      	ldr	r3, [pc, #28]	@ (8005f60 <mount_volume+0x448>)
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <mount_volume+0x448>)
 8005f46:	881a      	ldrh	r2, [r3, #0]
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3740      	adds	r7, #64	@ 0x40
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	41615252 	.word	0x41615252
 8005f5c:	61417272 	.word	0x61417272
 8005f60:	200077b0 	.word	0x200077b0

08005f64 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f6e:	2309      	movs	r3, #9
 8005f70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01c      	beq.n	8005fb2 <validate+0x4e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d018      	beq.n	8005fb2 <validate+0x4e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d013      	beq.n	8005fb2 <validate+0x4e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	889a      	ldrh	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	88db      	ldrh	r3, [r3, #6]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d10c      	bne.n	8005fb2 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe f9da 	bl	8004358 <disk_status>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <validate+0x4e>
			res = FR_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <validate+0x5a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	e000      	b.n	8005fc0 <validate+0x5c>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	6013      	str	r3, [r2, #0]
	return res;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fbf8 	bl	80057dc <get_ldnumber>
 8005fec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da01      	bge.n	8005ff8 <f_mount+0x28>
 8005ff4:	230b      	movs	r3, #11
 8005ff6:	e02e      	b.n	8006056 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8005ff8:	4a19      	ldr	r2, [pc, #100]	@ (8006060 <f_mount+0x90>)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006000:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <f_mount+0x48>
		FatFs[vol] = 0;
 8006008:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <f_mount+0x90>)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2100      	movs	r1, #0
 800600e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	490c      	ldr	r1, [pc, #48]	@ (8006060 <f_mount+0x90>)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <f_mount+0x70>
 800603c:	2300      	movs	r3, #0
 800603e:	e00a      	b.n	8006056 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006040:	f107 010c 	add.w	r1, r7, #12
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	2200      	movs	r2, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fd64 	bl	8005b18 <mount_volume>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006054:	7dfb      	ldrb	r3, [r7, #23]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200077a8 	.word	0x200077a8

08006064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b098      	sub	sp, #96	@ 0x60
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <f_open+0x18>
 8006078:	2309      	movs	r3, #9
 800607a:	e184      	b.n	8006386 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006082:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8006084:	79fa      	ldrb	r2, [r7, #7]
 8006086:	f107 0114 	add.w	r1, r7, #20
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fd42 	bl	8005b18 <mount_volume>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800609a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8168 	bne.w	8006374 <f_open+0x310>
		dj.obj.fs = fs;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	f107 0318 	add.w	r3, r7, #24
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fb1f 	bl	80056f4 <follow_path>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80060bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80060c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da02      	bge.n	80060d4 <f_open+0x70>
				res = FR_INVALID_NAME;
 80060ce:	2306      	movs	r3, #6
 80060d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	f003 031c 	and.w	r3, r3, #28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d077      	beq.n	80061ce <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 80060de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d010      	beq.n	8006108 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80060e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d107      	bne.n	80060fe <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80060ee:	f107 0318 	add.w	r3, r7, #24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f9d5 	bl	80054a2 <dir_register>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f043 0308 	orr.w	r3, r3, #8
 8006104:	71fb      	strb	r3, [r7, #7]
 8006106:	e010      	b.n	800612a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006108:	7fbb      	ldrb	r3, [r7, #30]
 800610a:	f003 0311 	and.w	r3, r3, #17
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <f_open+0xb6>
					res = FR_DENIED;
 8006112:	2307      	movs	r3, #7
 8006114:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006118:	e007      	b.n	800612a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <f_open+0xc6>
 8006124:	2308      	movs	r3, #8
 8006126:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800612a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800612e:	2b00      	cmp	r3, #0
 8006130:	d167      	bne.n	8006202 <f_open+0x19e>
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d062      	beq.n	8006202 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800613c:	4b94      	ldr	r3, [pc, #592]	@ (8006390 <f_open+0x32c>)
 800613e:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8006140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006142:	330e      	adds	r3, #14
 8006144:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fa95 	bl	8004676 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800614c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614e:	3316      	adds	r3, #22
 8006150:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fa8f 	bl	8004676 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff f8ae 	bl	80052c0 <ld_clust>
 8006164:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	330b      	adds	r3, #11
 800616a:	2220      	movs	r2, #32
 800616c:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006172:	2200      	movs	r2, #0
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff f8c2 	bl	80052fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617c:	331c      	adds	r3, #28
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fa78 	bl	8004676 <st_dword>
					fs->wflag = 1;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2201      	movs	r2, #1
 800618a:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800618c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d037      	beq.n	8006202 <f_open+0x19e>
						sc = fs->winsect;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8006198:	f107 0318 	add.w	r3, r7, #24
 800619c:	2200      	movs	r2, #0
 800619e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fd99 	bl	8004cd8 <remove_chain>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80061ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d126      	bne.n	8006202 <f_open+0x19e>
							res = move_window(fs, sc);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fae6 	bl	800478a <move_window>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c8:	3a01      	subs	r2, #1
 80061ca:	611a      	str	r2, [r3, #16]
 80061cc:	e019      	b.n	8006202 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 80061ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d115      	bne.n	8006202 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80061d6:	7fbb      	ldrb	r3, [r7, #30]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <f_open+0x184>
					res = FR_NO_FILE;
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80061e6:	e00c      	b.n	8006202 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <f_open+0x19e>
 80061f2:	7fbb      	ldrb	r3, [r7, #30]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <f_open+0x19e>
						res = FR_DENIED;
 80061fc:	2307      	movs	r3, #7
 80061fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006202:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10f      	bne.n	800622a <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <f_open+0x1b8>
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800621a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8006224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800622a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 80a0 	bne.w	8006374 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f840 	bl	80052c0 <ld_clust>
 8006240:	4602      	mov	r2, r0
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006248:	331c      	adds	r3, #28
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe f9d5 	bl	80045fa <ld_dword>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	88da      	ldrh	r2, [r3, #6]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	79fa      	ldrb	r2, [r7, #7]
 8006268:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3328      	adds	r3, #40	@ 0x28
 8006280:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f00a f90c 	bl	80104a4 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d06e      	beq.n	8006374 <f_open+0x310>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d06a      	beq.n	8006374 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	895b      	ldrh	r3, [r3, #10]
 80062aa:	461a      	mov	r2, r3
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	899b      	ldrh	r3, [r3, #12]
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062c2:	e016      	b.n	80062f2 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fb18 	bl	80048fe <get_fat>
 80062ce:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80062d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d802      	bhi.n	80062dc <f_open+0x278>
 80062d6:	2302      	movs	r3, #2
 80062d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80062dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d102      	bne.n	80062ea <f_open+0x286>
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80062ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <f_open+0x29e>
 80062fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062fe:	429a      	cmp	r2, r3
 8006300:	d8e0      	bhi.n	80062c4 <f_open+0x260>
				}
				fp->clust = clst;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006306:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006308:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800630c:	2b00      	cmp	r3, #0
 800630e:	d131      	bne.n	8006374 <f_open+0x310>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	899b      	ldrh	r3, [r3, #12]
 8006314:	461a      	mov	r2, r3
 8006316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006318:	fbb3 f1f2 	udiv	r1, r3, r2
 800631c:	fb01 f202 	mul.w	r2, r1, r2
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d026      	beq.n	8006374 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fac8 	bl	80048c0 <clst2sect>
 8006330:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8006332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <f_open+0x2dc>
						res = FR_INT_ERR;
 8006338:	2302      	movs	r3, #2
 800633a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800633e:	e019      	b.n	8006374 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	899b      	ldrh	r3, [r3, #12]
 8006344:	461a      	mov	r2, r3
 8006346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006348:	fbb3 f2f2 	udiv	r2, r3, r2
 800634c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	7858      	ldrb	r0, [r3, #1]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	69da      	ldr	r2, [r3, #28]
 8006362:	2301      	movs	r3, #1
 8006364:	f7fe f848 	bl	80043f8 <disk_read>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <f_open+0x310>
 800636e:	2301      	movs	r3, #1
 8006370:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006374:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <f_open+0x31e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006382:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006386:	4618      	mov	r0, r3
 8006388:	3760      	adds	r7, #96	@ 0x60
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	54210000 	.word	0x54210000

08006394 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08c      	sub	sp, #48	@ 0x30
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f107 0210 	add.w	r2, r7, #16
 80063b2:	4611      	mov	r1, r2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fdd5 	bl	8005f64 <validate>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80063c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d107      	bne.n	80063d8 <f_write+0x44>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	7c5b      	ldrb	r3, [r3, #17]
 80063cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80063d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <f_write+0x4a>
 80063d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063dc:	e15e      	b.n	800669c <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	7c1b      	ldrb	r3, [r3, #16]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <f_write+0x5a>
 80063ea:	2307      	movs	r3, #7
 80063ec:	e156      	b.n	800669c <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f080 8140 	bcs.w	8006680 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	43db      	mvns	r3, r3
 8006406:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8006408:	e13a      	b.n	8006680 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	8992      	ldrh	r2, [r2, #12]
 8006412:	fbb3 f1f2 	udiv	r1, r3, r2
 8006416:	fb01 f202 	mul.w	r2, r1, r2
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 80e5 	bne.w	80065ec <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	8992      	ldrh	r2, [r2, #12]
 800642a:	fbb3 f3f2 	udiv	r3, r3, r2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	8952      	ldrh	r2, [r2, #10]
 8006432:	3a01      	subs	r2, #1
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d137      	bne.n	80064ae <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10c      	bne.n	8006460 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10e      	bne.n	8006470 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fca3 	bl	8004da2 <create_chain>
 800645c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800645e:	e007      	b.n	8006470 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f7fe fc9a 	bl	8004da2 <create_chain>
 800646e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 8109 	beq.w	800668a <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	2b01      	cmp	r3, #1
 800647c:	d104      	bne.n	8006488 <f_write+0xf4>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2202      	movs	r2, #2
 8006482:	745a      	strb	r2, [r3, #17]
 8006484:	2302      	movs	r3, #2
 8006486:	e109      	b.n	800669c <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d104      	bne.n	800649a <f_write+0x106>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	745a      	strb	r2, [r3, #17]
 8006496:	2301      	movs	r3, #1
 8006498:	e100      	b.n	800669c <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800649e:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <f_write+0x11a>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064ac:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	7c1b      	ldrb	r3, [r3, #16]
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da18      	bge.n	80064ea <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	7858      	ldrb	r0, [r3, #1]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	2301      	movs	r3, #1
 80064c8:	f7fd ffc8 	bl	800445c <disk_write>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <f_write+0x148>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	745a      	strb	r2, [r3, #17]
 80064d8:	2301      	movs	r3, #1
 80064da:	e0df      	b.n	800669c <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	7c1b      	ldrb	r3, [r3, #16]
 80064e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f7fe f9e4 	bl	80048c0 <clst2sect>
 80064f8:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <f_write+0x176>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2202      	movs	r2, #2
 8006504:	745a      	strb	r2, [r3, #17]
 8006506:	2302      	movs	r3, #2
 8006508:	e0c8      	b.n	800669c <f_write+0x308>
			sect += csect;
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	4413      	add	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	899b      	ldrh	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	fbb3 f3f2 	udiv	r3, r3, r2
 800651e:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d043      	beq.n	80065ae <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	4413      	add	r3, r2
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	8952      	ldrh	r2, [r2, #10]
 8006530:	4293      	cmp	r3, r2
 8006532:	d905      	bls.n	8006540 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	895b      	ldrh	r3, [r3, #10]
 8006538:	461a      	mov	r2, r3
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	7858      	ldrb	r0, [r3, #1]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	69f9      	ldr	r1, [r7, #28]
 800654a:	f7fd ff87 	bl	800445c <disk_write>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <f_write+0x1ca>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	745a      	strb	r2, [r3, #17]
 800655a:	2301      	movs	r3, #1
 800655c:	e09e      	b.n	800669c <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	6a3a      	ldr	r2, [r7, #32]
 8006568:	429a      	cmp	r2, r3
 800656a:	d918      	bls.n	800659e <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	8992      	ldrh	r2, [r2, #12]
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	18d1      	adds	r1, r2, r3
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	899b      	ldrh	r3, [r3, #12]
 800658a:	461a      	mov	r2, r3
 800658c:	f009 ffe2 	bl	8010554 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006598:	b2da      	uxtb	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	899b      	ldrh	r3, [r3, #12]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80065ac:	e04b      	b.n	8006646 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d016      	beq.n	80065e6 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d210      	bcs.n	80065e6 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	7858      	ldrb	r0, [r3, #1]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80065ce:	2301      	movs	r3, #1
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	f7fd ff11 	bl	80043f8 <disk_read>
 80065d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	745a      	strb	r2, [r3, #17]
 80065e2:	2301      	movs	r3, #1
 80065e4:	e05a      	b.n	800669c <f_write+0x308>
			}
#endif
			fp->sect = sect;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	899b      	ldrh	r3, [r3, #12]
 80065f0:	4618      	mov	r0, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	8992      	ldrh	r2, [r2, #12]
 80065fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80065fe:	fb01 f202 	mul.w	r2, r1, r2
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	1ac3      	subs	r3, r0, r3
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d901      	bls.n	8006614 <f_write+0x280>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	8992      	ldrh	r2, [r2, #12]
 8006622:	fbb3 f0f2 	udiv	r0, r3, r2
 8006626:	fb00 f202 	mul.w	r2, r0, r2
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	440b      	add	r3, r1
 800662e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	4618      	mov	r0, r3
 8006634:	f009 ff8e 	bl	8010554 <memcpy>
		fp->flag |= FA_DIRTY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	7c1b      	ldrb	r3, [r3, #16]
 800663c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	441a      	add	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	4413      	add	r3, r2
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	441a      	add	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	615a      	str	r2, [r3, #20]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	429a      	cmp	r2, r3
 8006678:	bf38      	it	cc
 800667a:	461a      	movcc	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	60da      	str	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f47f aec1 	bne.w	800640a <f_write+0x76>
 8006688:	e000      	b.n	800668c <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800668a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	7c1b      	ldrb	r3, [r3, #16]
 8006690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3730      	adds	r7, #48	@ 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f107 0208 	add.w	r2, r7, #8
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fc55 	bl	8005f64 <validate>
 80066ba:	4603      	mov	r3, r0
 80066bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d167      	bne.n	8006794 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7c1b      	ldrb	r3, [r3, #16]
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d061      	beq.n	8006794 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	7c1b      	ldrb	r3, [r3, #16]
 80066d4:	b25b      	sxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da15      	bge.n	8006706 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	7858      	ldrb	r0, [r3, #1]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	2301      	movs	r3, #1
 80066ea:	f7fd feb7 	bl	800445c <disk_write>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <f_sync+0x54>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e04e      	b.n	8006796 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	7c1b      	ldrb	r3, [r3, #16]
 80066fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006706:	4b26      	ldr	r3, [pc, #152]	@ (80067a0 <f_sync+0xfc>)
 8006708:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7fe f839 	bl	800478a <move_window>
 8006718:	4603      	mov	r3, r0
 800671a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d138      	bne.n	8006794 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	330b      	adds	r3, #11
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	330b      	adds	r3, #11
 8006732:	f042 0220 	orr.w	r2, r2, #32
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	461a      	mov	r2, r3
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	f7fe fdda 	bl	80052fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f103 021c 	add.w	r2, r3, #28
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7fd ff8d 	bl	8004676 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3316      	adds	r3, #22
 8006760:	6939      	ldr	r1, [r7, #16]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fd ff87 	bl	8004676 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3312      	adds	r3, #18
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f7fd ff66 	bl	8004640 <st_word>
					fs->wflag = 1;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2201      	movs	r2, #1
 8006778:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe f831 	bl	80047e4 <sync_fs>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7c1b      	ldrb	r3, [r3, #16]
 800678a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800678e:	b2da      	uxtb	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006794:	7dfb      	ldrb	r3, [r7, #23]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	54210000 	.word	0x54210000

080067a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff79 	bl	80066a4 <f_sync>
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10e      	bne.n	80067da <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f107 0208 	add.w	r2, r7, #8
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fbcd 	bl	8005f64 <validate>
 80067ca:	4603      	mov	r3, r0
 80067cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b09c      	sub	sp, #112	@ 0x70
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	66bb      	str	r3, [r7, #104]	@ 0x68
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 80067f0:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80067f4:	1d3b      	adds	r3, r7, #4
 80067f6:	2202      	movs	r2, #2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff f98d 	bl	8005b18 <mount_volume>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8006804:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006808:	2b00      	cmp	r3, #0
 800680a:	f040 8083 	bne.w	8006914 <f_unlink+0x130>
		dj.obj.fs = fs;
 800680e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006810:	63bb      	str	r3, [r7, #56]	@ 0x38
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe ff6a 	bl	80056f4 <follow_path>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006826:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800682a:	2b00      	cmp	r3, #0
 800682c:	d172      	bne.n	8006914 <f_unlink+0x130>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800682e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8006832:	b25b      	sxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	da03      	bge.n	8006840 <f_unlink+0x5c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006838:	2306      	movs	r3, #6
 800683a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800683e:	e008      	b.n	8006852 <f_unlink+0x6e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006840:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <f_unlink+0x6e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800684c:	2307      	movs	r3, #7
 800684e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
			}
			if (res == FR_OK) {
 8006852:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006856:	2b00      	cmp	r3, #0
 8006858:	d134      	bne.n	80068c4 <f_unlink+0xe0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800685a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800685c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe fd2d 	bl	80052c0 <ld_clust>
 8006866:	66b8      	str	r0, [r7, #104]	@ 0x68
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006868:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d027      	beq.n	80068c4 <f_unlink+0xe0>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
 8006874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006876:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 8006878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800687a:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	2100      	movs	r1, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fba6 	bl	8004fd4 <dir_sdi>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800688e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <f_unlink+0xe0>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe fd4e 	bl	800533e <dir_read>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80068a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <f_unlink+0xd2>
 80068b0:	2307      	movs	r3, #7
 80068b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80068b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d102      	bne.n	80068c4 <f_unlink+0xe0>
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						}
					}
				}
			}
			if (res == FR_OK) {
 80068c4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d123      	bne.n	8006914 <f_unlink+0x130>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80068cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fe18 	bl	8005506 <dir_remove>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 80068dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10c      	bne.n	80068fe <f_unlink+0x11a>
 80068e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <f_unlink+0x11a>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80068ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80068ee:	2200      	movs	r2, #0
 80068f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe f9f0 	bl	8004cd8 <remove_chain>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80068fe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <f_unlink+0x130>
 8006906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006908:	4618      	mov	r0, r3
 800690a:	f7fd ff6b 	bl	80047e4 <sync_fs>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006914:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006918:	4618      	mov	r0, r3
 800691a:	3770      	adds	r7, #112	@ 0x70
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	@ 0x38
 8006924:	af00      	add	r7, sp, #0
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607b      	str	r3, [r7, #4]
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
 800692e:	4613      	mov	r3, r2
 8006930:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8006932:	f107 0210 	add.w	r2, r7, #16
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd fdc2 	bl	80044c4 <disk_ioctl>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <create_partition+0x2a>
 8006946:	2301      	movs	r3, #1
 8006948:	e108      	b.n	8006b5c <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800694e:	233f      	movs	r3, #63	@ 0x3f
 8006950:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8006952:	2308      	movs	r3, #8
 8006954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006958:	e004      	b.n	8006964 <create_partition+0x44>
 800695a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <create_partition+0x62>
 800696c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	fbb2 f2f3 	udiv	r2, r2, r3
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006980:	d8eb      	bhi.n	800695a <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8006982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <create_partition+0x70>
 800698a:	23ff      	movs	r3, #255	@ 0xff
 800698c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8006990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006994:	2100      	movs	r1, #0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f009 fd84 	bl	80104a4 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80069a2:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80069a4:	2300      	movs	r3, #0
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
 80069aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ac:	e0b5      	b.n	8006b1a <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 80069ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80069ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069bc:	2b64      	cmp	r3, #100	@ 0x64
 80069be:	d80d      	bhi.n	80069dc <create_partition+0xbc>
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d008      	beq.n	80069d8 <create_partition+0xb8>
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	4a66      	ldr	r2, [pc, #408]	@ (8006b64 <create_partition+0x244>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	e000      	b.n	80069da <create_partition+0xba>
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80069dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e0:	4413      	add	r3, r2
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d305      	bcc.n	80069f4 <create_partition+0xd4>
 80069e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	4413      	add	r3, r2
 80069ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <create_partition+0xdc>
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8097 	beq.w	8006b32 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	3308      	adds	r3, #8
 8006a08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd fe33 	bl	8004676 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	330c      	adds	r3, #12
 8006a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fd fe2d 	bl	8004676 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	3304      	adds	r3, #4
 8006a20:	7bba      	ldrb	r2, [r7, #14]
 8006a22:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 8006a24:	7ffb      	ldrb	r3, [r7, #31]
 8006a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 8006a36:	7ffb      	ldrb	r3, [r7, #31]
 8006a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a46:	fb01 f202 	mul.w	r2, r1, r2
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 8006a4e:	7ffa      	ldrb	r2, [r7, #31]
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a56:	fb01 f202 	mul.w	r2, r1, r2
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	3301      	adds	r3, #1
 8006a66:	7dfa      	ldrb	r2, [r7, #23]
 8006a68:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a74:	b2d9      	uxtb	r1, r3
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	3302      	adds	r3, #2
 8006a7a:	7dba      	ldrb	r2, [r7, #22]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	3303      	adds	r3, #3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 8006a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a90:	4413      	add	r3, r2
 8006a92:	1e5a      	subs	r2, r3, #1
 8006a94:	7ffb      	ldrb	r3, [r7, #31]
 8006a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa2:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa8:	4413      	add	r3, r2
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	7ffb      	ldrb	r3, [r7, #31]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aba:	fb01 f202 	mul.w	r2, r1, r2
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	7ffa      	ldrb	r2, [r7, #31]
 8006acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad0:	fb01 f202 	mul.w	r2, r1, r2
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	3301      	adds	r3, #1
 8006ada:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	3305      	adds	r3, #5
 8006ae0:	7dfa      	ldrb	r2, [r7, #23]
 8006ae2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	089b      	lsrs	r3, r3, #2
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006aee:	b2d9      	uxtb	r1, r3
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	3306      	adds	r3, #6
 8006af4:	7dba      	ldrb	r2, [r7, #22]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	3307      	adds	r3, #7
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 8006b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b08:	3310      	adds	r3, #16
 8006b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	3301      	adds	r3, #1
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	4413      	add	r3, r2
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d809      	bhi.n	8006b34 <create_partition+0x214>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <create_partition+0x214>
 8006b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	f4ff af3f 	bcc.w	80069ae <create_partition+0x8e>
 8006b30:	e000      	b.n	8006b34 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8006b32:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b3a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd fd7e 	bl	8004640 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8006b44:	7bf8      	ldrb	r0, [r7, #15]
 8006b46:	2301      	movs	r3, #1
 8006b48:	2200      	movs	r2, #0
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	f7fd fc86 	bl	800445c <disk_write>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <create_partition+0x23a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <create_partition+0x23c>
	}

	return FR_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3738      	adds	r7, #56	@ 0x38
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	51eb851f 	.word	0x51eb851f

08006b68 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b09e      	sub	sp, #120	@ 0x78
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006b76:	f107 030c 	add.w	r3, r7, #12
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fe2e 	bl	80057dc <get_ldnumber>
 8006b80:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da02      	bge.n	8006b8e <f_mkfs+0x26>
 8006b88:	230b      	movs	r3, #11
 8006b8a:	f000 bc39 	b.w	8007400 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8006b8e:	4a90      	ldr	r2, [pc, #576]	@ (8006dd0 <f_mkfs+0x268>)
 8006b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <f_mkfs+0x3e>
 8006b9a:	4a8d      	ldr	r2, [pc, #564]	@ (8006dd0 <f_mkfs+0x268>)
 8006b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8006ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8006bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd fbf6 	bl	80043a8 <disk_initialize>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8006bc2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <f_mkfs+0x6c>
 8006bce:	2303      	movs	r3, #3
 8006bd0:	f000 bc16 	b.w	8007400 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006bd4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <f_mkfs+0x7e>
 8006be0:	230a      	movs	r3, #10
 8006be2:	f000 bc0d 	b.w	8007400 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <f_mkfs+0x88>
 8006bec:	4b79      	ldr	r3, [pc, #484]	@ (8006dd4 <f_mkfs+0x26c>)
 8006bee:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d107      	bne.n	8006c0c <f_mkfs+0xa4>
 8006bfc:	f107 021c 	add.w	r2, r7, #28
 8006c00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c04:	2103      	movs	r1, #3
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fd fc5c 	bl	80044c4 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <f_mkfs+0xbe>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c18:	d805      	bhi.n	8006c26 <f_mkfs+0xbe>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	1e5a      	subs	r2, r3, #1
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <f_mkfs+0xc2>
 8006c26:	2301      	movs	r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8006c2a:	f107 0220 	add.w	r2, r7, #32
 8006c2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd fc45 	bl	80044c4 <disk_ioctl>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <f_mkfs+0xdc>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e3dd      	b.n	8007400 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8006c44:	8c3b      	ldrh	r3, [r7, #32]
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4a:	d80a      	bhi.n	8006c62 <f_mkfs+0xfa>
 8006c4c:	8c3b      	ldrh	r3, [r7, #32]
 8006c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c52:	d306      	bcc.n	8006c62 <f_mkfs+0xfa>
 8006c54:	8c3b      	ldrh	r3, [r7, #32]
 8006c56:	461a      	mov	r2, r3
 8006c58:	8c3b      	ldrh	r3, [r7, #32]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <f_mkfs+0xfe>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e3cc      	b.n	8007400 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <f_mkfs+0x120>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d802      	bhi.n	8006c88 <f_mkfs+0x120>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	e000      	b.n	8006c8a <f_mkfs+0x122>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d013      	beq.n	8006cbc <f_mkfs+0x154>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9c:	d80e      	bhi.n	8006cbc <f_mkfs+0x154>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	8c3a      	ldrh	r2, [r7, #32]
 8006ca4:	0952      	lsrs	r2, r2, #5
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cac:	fb01 f202 	mul.w	r2, r1, r2
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <f_mkfs+0x154>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	e001      	b.n	8006cc0 <f_mkfs+0x158>
 8006cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cca:	d80a      	bhi.n	8006ce2 <f_mkfs+0x17a>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <f_mkfs+0x17a>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	e000      	b.n	8006ce4 <f_mkfs+0x17c>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 8006ce6:	8c3b      	ldrh	r3, [r7, #32]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8006cf2:	8c3b      	ldrh	r3, [r7, #32]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <f_mkfs+0x1a0>
 8006d04:	2311      	movs	r3, #17
 8006d06:	e37b      	b.n	8007400 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <f_mkfs+0x1ae>
 8006d12:	2311      	movs	r3, #17
 8006d14:	e374      	b.n	8007400 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006d1e:	f107 0218 	add.w	r2, r7, #24
 8006d22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d26:	2101      	movs	r1, #1
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd fbcb 	bl	80044c4 <disk_ioctl>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <f_mkfs+0x1d0>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e363      	b.n	8007400 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8006d38:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d48:	d905      	bls.n	8006d56 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8006d4a:	233f      	movs	r3, #63	@ 0x3f
 8006d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d5a:	d801      	bhi.n	8006d60 <f_mkfs+0x1f8>
 8006d5c:	230e      	movs	r3, #14
 8006d5e:	e34f      	b.n	8007400 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8006d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d62:	2b80      	cmp	r3, #128	@ 0x80
 8006d64:	d901      	bls.n	8006d6a <f_mkfs+0x202>
 8006d66:	2380      	movs	r3, #128	@ 0x80
 8006d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8006d6a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8006d76:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 8006d82:	2303      	movs	r3, #3
 8006d84:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006d88:	e00a      	b.n	8006da0 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8006d8a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <f_mkfs+0x232>
 8006d96:	2313      	movs	r3, #19
 8006d98:	e332      	b.n	8007400 <f_mkfs+0x898>
		fsty = FS_FAT16;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 8006da6:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8006dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dae:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8006db0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d141      	bne.n	8006e3c <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8006db8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d120      	bne.n	8006e00 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	0c5b      	lsrs	r3, r3, #17
 8006dc2:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dc8:	2301      	movs	r3, #1
 8006dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dcc:	e00a      	b.n	8006de4 <f_mkfs+0x27c>
 8006dce:	bf00      	nop
 8006dd0:	200077a8 	.word	0x200077a8
 8006dd4:	08011134 	.word	0x08011134
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dda:	3301      	adds	r3, #1
 8006ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de4:	4a95      	ldr	r2, [pc, #596]	@ (800703c <f_mkfs+0x4d4>)
 8006de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <f_mkfs+0x298>
 8006df0:	4a92      	ldr	r2, [pc, #584]	@ (800703c <f_mkfs+0x4d4>)
 8006df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d2eb      	bcs.n	8006dd8 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	8c3a      	ldrh	r2, [r7, #32]
 8006e12:	4413      	add	r3, r2
 8006e14:	3b01      	subs	r3, #1
 8006e16:	8c3a      	ldrh	r2, [r7, #32]
 8006e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8006e1e:	2320      	movs	r3, #32
 8006e20:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 8006e22:	2300      	movs	r3, #0
 8006e24:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d903      	bls.n	8006e38 <f_mkfs+0x2d0>
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	4a83      	ldr	r2, [pc, #524]	@ (8007040 <f_mkfs+0x4d8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d94b      	bls.n	8006ed0 <f_mkfs+0x368>
 8006e38:	230e      	movs	r3, #14
 8006e3a:	e2e1      	b.n	8007400 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8006e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d11b      	bne.n	8006e7a <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	0b1b      	lsrs	r3, r3, #12
 8006e46:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e50:	e005      	b.n	8006e5e <f_mkfs+0x2f6>
 8006e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e54:	3301      	adds	r3, #1
 8006e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e5e:	4a79      	ldr	r2, [pc, #484]	@ (8007044 <f_mkfs+0x4dc>)
 8006e60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <f_mkfs+0x312>
 8006e6a:	4a76      	ldr	r2, [pc, #472]	@ (8007044 <f_mkfs+0x4dc>)
 8006e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d2eb      	bcs.n	8006e52 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d904      	bls.n	8006e98 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	3302      	adds	r3, #2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e96:	e00a      	b.n	8006eae <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	3303      	adds	r3, #3
 8006eac:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006eae:	8c3b      	ldrh	r3, [r7, #32]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	8c3a      	ldrh	r2, [r7, #32]
 8006eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ebe:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	015b      	lsls	r3, r3, #5
 8006ec8:	8c3a      	ldrh	r2, [r7, #32]
 8006eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ece:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006ed0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ed4:	4413      	add	r3, r2
 8006ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8006ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006edc:	fb03 f202 	mul.w	r2, r3, r2
 8006ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ee2:	4413      	add	r3, r2
 8006ee4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ee6:	4413      	add	r3, r2
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	4413      	add	r3, r2
 8006ef0:	1e5a      	subs	r2, r3, #1
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	425b      	negs	r3, r3
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8006efe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d108      	bne.n	8006f18 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 8006f06:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f0a:	4413      	add	r3, r2
 8006f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f12:	4413      	add	r3, r2
 8006f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f16:	e019      	b.n	8006f4c <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8006f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f22:	fb01 f202 	mul.w	r2, r1, r2
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d008      	beq.n	8006f3e <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8006f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f34:	3301      	adds	r3, #1
 8006f36:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8006f3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f48:	4413      	add	r3, r2
 8006f4a:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8006f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f4e:	011a      	lsls	r2, r3, #4
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	441a      	add	r2, r3
 8006f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d901      	bls.n	8006f62 <f_mkfs+0x3fa>
 8006f5e:	230e      	movs	r3, #14
 8006f60:	e24e      	b.n	8007400 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8006f7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d10f      	bne.n	8006fa6 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8006f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f88:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d80a      	bhi.n	8006fa6 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d105      	bne.n	8006fa2 <f_mkfs+0x43a>
 8006f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d145      	bne.n	800702e <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8006fa2:	230e      	movs	r3, #14
 8006fa4:	e22c      	b.n	8007400 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8006fa6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d134      	bne.n	8007018 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8006fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d91f      	bls.n	8006ff8 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <f_mkfs+0x466>
 8006fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	2b40      	cmp	r3, #64	@ 0x40
 8006fc4:	d803      	bhi.n	8006fce <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8006fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fcc:	e034      	b.n	8007038 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 8006fce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8006fda:	2303      	movs	r3, #3
 8006fdc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006fe0:	e02a      	b.n	8007038 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <f_mkfs+0x48c>
 8006fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff0:	2b80      	cmp	r3, #128	@ 0x80
 8006ff2:	d91e      	bls.n	8007032 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8006ff4:	230e      	movs	r3, #14
 8006ff6:	e203      	b.n	8007400 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d80a      	bhi.n	8007018 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <f_mkfs+0x4ac>
 8007008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800700e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	d910      	bls.n	8007036 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8007014:	230e      	movs	r3, #14
 8007016:	e1f3      	b.n	8007400 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8007018:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800701c:	2b01      	cmp	r3, #1
 800701e:	d113      	bne.n	8007048 <f_mkfs+0x4e0>
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007026:	4293      	cmp	r3, r2
 8007028:	d90e      	bls.n	8007048 <f_mkfs+0x4e0>
 800702a:	230e      	movs	r3, #14
 800702c:	e1e8      	b.n	8007400 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800702e:	bf00      	nop
 8007030:	e6bc      	b.n	8006dac <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007032:	bf00      	nop
 8007034:	e6ba      	b.n	8006dac <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007036:	bf00      	nop
			pau = sz_au;
 8007038:	e6b8      	b.n	8006dac <f_mkfs+0x244>
 800703a:	bf00      	nop
 800703c:	08011144 	.word	0x08011144
 8007040:	0ffffff5 	.word	0x0ffffff5
 8007044:	08011154 	.word	0x08011154

			/* Ok, it is the valid cluster configuration */
			break;
 8007048:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800704a:	8c3b      	ldrh	r3, [r7, #32]
 800704c:	461a      	mov	r2, r3
 800704e:	2100      	movs	r1, #0
 8007050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007052:	f009 fa27 	bl	80104a4 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007056:	220b      	movs	r2, #11
 8007058:	49b1      	ldr	r1, [pc, #708]	@ (8007320 <f_mkfs+0x7b8>)
 800705a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800705c:	f009 fa7a 	bl	8010554 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	330b      	adds	r3, #11
 8007064:	8c3a      	ldrh	r2, [r7, #32]
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd fae9 	bl	8004640 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	330d      	adds	r3, #13
 8007072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	330e      	adds	r3, #14
 800707c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800707e:	b292      	uxth	r2, r2
 8007080:	4611      	mov	r1, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f7fd fadc 	bl	8004640 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	3310      	adds	r3, #16
 800708c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	f103 0211 	add.w	r2, r3, #17
 8007098:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800709c:	2b03      	cmp	r3, #3
 800709e:	d002      	beq.n	80070a6 <f_mkfs+0x53e>
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	e000      	b.n	80070a8 <f_mkfs+0x540>
 80070a6:	2300      	movs	r3, #0
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f7fd fac8 	bl	8004640 <st_word>
		if (sz_vol < 0x10000) {
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b6:	d208      	bcs.n	80070ca <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	3313      	adds	r3, #19
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	b292      	uxth	r2, r2
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fabc 	bl	8004640 <st_word>
 80070c8:	e006      	b.n	80070d8 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	3320      	adds	r3, #32
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd facf 	bl	8004676 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	3315      	adds	r3, #21
 80070dc:	22f8      	movs	r2, #248	@ 0xf8
 80070de:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	3318      	adds	r3, #24
 80070e4:	213f      	movs	r1, #63	@ 0x3f
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fd faaa 	bl	8004640 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	331a      	adds	r3, #26
 80070f0:	21ff      	movs	r1, #255	@ 0xff
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd faa4 	bl	8004640 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	331c      	adds	r3, #28
 80070fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fd fab9 	bl	8004676 <st_dword>
		if (fsty == FS_FAT32) {
 8007104:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007108:	2b03      	cmp	r3, #3
 800710a:	d12d      	bne.n	8007168 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	3343      	adds	r3, #67	@ 0x43
 8007110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd faaf 	bl	8004676 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	3324      	adds	r3, #36	@ 0x24
 800711c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd faa9 	bl	8004676 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	332c      	adds	r3, #44	@ 0x2c
 8007128:	2102      	movs	r1, #2
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd faa3 	bl	8004676 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	3330      	adds	r3, #48	@ 0x30
 8007134:	2101      	movs	r1, #1
 8007136:	4618      	mov	r0, r3
 8007138:	f7fd fa82 	bl	8004640 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	3332      	adds	r3, #50	@ 0x32
 8007140:	2106      	movs	r1, #6
 8007142:	4618      	mov	r0, r3
 8007144:	f7fd fa7c 	bl	8004640 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	3340      	adds	r3, #64	@ 0x40
 800714c:	2280      	movs	r2, #128	@ 0x80
 800714e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	3342      	adds	r3, #66	@ 0x42
 8007154:	2229      	movs	r2, #41	@ 0x29
 8007156:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	3347      	adds	r3, #71	@ 0x47
 800715c:	2213      	movs	r2, #19
 800715e:	4971      	ldr	r1, [pc, #452]	@ (8007324 <f_mkfs+0x7bc>)
 8007160:	4618      	mov	r0, r3
 8007162:	f009 f9f7 	bl	8010554 <memcpy>
 8007166:	e01c      	b.n	80071a2 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	3327      	adds	r3, #39	@ 0x27
 800716c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800716e:	4618      	mov	r0, r3
 8007170:	f7fd fa81 	bl	8004676 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	3316      	adds	r3, #22
 8007178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800717a:	b292      	uxth	r2, r2
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7fd fa5e 	bl	8004640 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	3324      	adds	r3, #36	@ 0x24
 8007188:	2280      	movs	r2, #128	@ 0x80
 800718a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	3326      	adds	r3, #38	@ 0x26
 8007190:	2229      	movs	r2, #41	@ 0x29
 8007192:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	332b      	adds	r3, #43	@ 0x2b
 8007198:	2213      	movs	r2, #19
 800719a:	4963      	ldr	r1, [pc, #396]	@ (8007328 <f_mkfs+0x7c0>)
 800719c:	4618      	mov	r0, r3
 800719e:	f009 f9d9 	bl	8010554 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80071a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fd fa47 	bl	8004640 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 80071b2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80071b6:	2301      	movs	r3, #1
 80071b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071bc:	f7fd f94e 	bl	800445c <disk_write>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <f_mkfs+0x662>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e11a      	b.n	8007400 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 80071ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d140      	bne.n	8007254 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80071d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d4:	1d9a      	adds	r2, r3, #6
 80071d6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80071da:	2301      	movs	r3, #1
 80071dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071de:	f7fd f93d 	bl	800445c <disk_write>
			memset(buf, 0, ss);
 80071e2:	8c3b      	ldrh	r3, [r7, #32]
 80071e4:	461a      	mov	r2, r3
 80071e6:	2100      	movs	r1, #0
 80071e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ea:	f009 f95b 	bl	80104a4 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80071ee:	494f      	ldr	r1, [pc, #316]	@ (800732c <f_mkfs+0x7c4>)
 80071f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071f2:	f7fd fa40 	bl	8004676 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80071fc:	494c      	ldr	r1, [pc, #304]	@ (8007330 <f_mkfs+0x7c8>)
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd fa39 	bl	8004676 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	3b01      	subs	r3, #1
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f7fd fa30 	bl	8004676 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800721c:	2102      	movs	r1, #2
 800721e:	4618      	mov	r0, r3
 8007220:	f7fd fa29 	bl	8004676 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800722a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd fa06 	bl	8004640 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007236:	1dda      	adds	r2, r3, #7
 8007238:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800723c:	2301      	movs	r3, #1
 800723e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007240:	f7fd f90c 	bl	800445c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800724c:	2301      	movs	r3, #1
 800724e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007250:	f7fd f904 	bl	800445c <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 8007254:	8c3b      	ldrh	r3, [r7, #32]
 8007256:	461a      	mov	r2, r3
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	461a      	mov	r2, r3
 8007260:	2100      	movs	r1, #0
 8007262:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007264:	f009 f91e 	bl	80104a4 <memset>
		sect = b_fat;		/* FAT start sector */
 8007268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800726a:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800726c:	2300      	movs	r3, #0
 800726e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007270:	e04b      	b.n	800730a <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 8007272:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007276:	2b03      	cmp	r3, #3
 8007278:	d113      	bne.n	80072a2 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800727a:	f06f 0107 	mvn.w	r1, #7
 800727e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007280:	f7fd f9f9 	bl	8004676 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	3304      	adds	r3, #4
 8007288:	f04f 31ff 	mov.w	r1, #4294967295
 800728c:	4618      	mov	r0, r3
 800728e:	f7fd f9f2 	bl	8004676 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	3308      	adds	r3, #8
 8007296:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800729a:	4618      	mov	r0, r3
 800729c:	f7fd f9eb 	bl	8004676 <st_dword>
 80072a0:	e00b      	b.n	80072ba <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 80072a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <f_mkfs+0x746>
 80072aa:	4b22      	ldr	r3, [pc, #136]	@ (8007334 <f_mkfs+0x7cc>)
 80072ac:	e001      	b.n	80072b2 <f_mkfs+0x74a>
 80072ae:	f06f 0307 	mvn.w	r3, #7
 80072b2:	4619      	mov	r1, r3
 80072b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072b6:	f7fd f9de 	bl	8004676 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80072ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80072be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80072c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c2:	4293      	cmp	r3, r2
 80072c4:	bf28      	it	cs
 80072c6:	4613      	movcs	r3, r2
 80072c8:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80072ca:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80072ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072d4:	f7fd f8c2 	bl	800445c <disk_write>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <f_mkfs+0x77a>
 80072de:	2301      	movs	r3, #1
 80072e0:	e08e      	b.n	8007400 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 80072e2:	8c3b      	ldrh	r3, [r7, #32]
 80072e4:	461a      	mov	r2, r3
 80072e6:	2100      	movs	r1, #0
 80072e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072ea:	f009 f8db 	bl	80104a4 <memset>
				sect += n; nsect -= n;
 80072ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f2:	4413      	add	r3, r2
 80072f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80072f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80072f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 80072fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1dc      	bne.n	80072be <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8007304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007306:	3301      	adds	r3, #1
 8007308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800730a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800730c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730e:	429a      	cmp	r2, r3
 8007310:	d3af      	bcc.n	8007272 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007312:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007316:	2b03      	cmp	r3, #3
 8007318:	d10e      	bne.n	8007338 <f_mkfs+0x7d0>
 800731a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800731c:	e00d      	b.n	800733a <f_mkfs+0x7d2>
 800731e:	bf00      	nop
 8007320:	08011038 	.word	0x08011038
 8007324:	08011044 	.word	0x08011044
 8007328:	08011058 	.word	0x08011058
 800732c:	41615252 	.word	0x41615252
 8007330:	61417272 	.word	0x61417272
 8007334:	00fffff8 	.word	0x00fffff8
 8007338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800733a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800733c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	4293      	cmp	r3, r2
 8007342:	bf28      	it	cs
 8007344:	4613      	movcs	r3, r2
 8007346:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007348:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800734c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800734e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007350:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007352:	f7fd f883 	bl	800445c <disk_write>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <f_mkfs+0x7f8>
 800735c:	2301      	movs	r3, #1
 800735e:	e04f      	b.n	8007400 <f_mkfs+0x898>
			sect += n; nsect -= n;
 8007360:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007364:	4413      	add	r3, r2
 8007366:	673b      	str	r3, [r7, #112]	@ 0x70
 8007368:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800736a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 8007370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e2      	bne.n	800733c <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 8007376:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800737a:	2b03      	cmp	r3, #3
 800737c:	d103      	bne.n	8007386 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800737e:	230c      	movs	r3, #12
 8007380:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8007384:	e012      	b.n	80073ac <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738c:	d303      	bcc.n	8007396 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800738e:	2306      	movs	r3, #6
 8007390:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8007394:	e00a      	b.n	80073ac <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8007396:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800739a:	2b02      	cmp	r3, #2
 800739c:	d103      	bne.n	80073a6 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800739e:	2304      	movs	r3, #4
 80073a0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80073a4:	e002      	b.n	80073ac <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 80073ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d116      	bne.n	80073e6 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 80073c0:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80073c4:	f107 0110 	add.w	r1, r7, #16
 80073c8:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	f7ff faa7 	bl	8006920 <create_partition>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 80073d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <f_mkfs+0x87e>
 80073e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073e4:	e00c      	b.n	8007400 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80073e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073ea:	2200      	movs	r2, #0
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd f868 	bl	80044c4 <disk_ioctl>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <f_mkfs+0x896>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3778      	adds	r7, #120	@ 0x78
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007408:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007440 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800740c:	f7fc ff92 	bl	8004334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007410:	480c      	ldr	r0, [pc, #48]	@ (8007444 <LoopForever+0x6>)
  ldr r1, =_edata
 8007412:	490d      	ldr	r1, [pc, #52]	@ (8007448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007414:	4a0d      	ldr	r2, [pc, #52]	@ (800744c <LoopForever+0xe>)
  movs r3, #0
 8007416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007418:	e002      	b.n	8007420 <LoopCopyDataInit>

0800741a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800741a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800741c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800741e:	3304      	adds	r3, #4

08007420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007424:	d3f9      	bcc.n	800741a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007426:	4a0a      	ldr	r2, [pc, #40]	@ (8007450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007428:	4c0a      	ldr	r4, [pc, #40]	@ (8007454 <LoopForever+0x16>)
  movs r3, #0
 800742a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800742c:	e001      	b.n	8007432 <LoopFillZerobss>

0800742e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800742e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007430:	3204      	adds	r2, #4

08007432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007434:	d3fb      	bcc.n	800742e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007436:	f009 f867 	bl	8010508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800743a:	f7fb f81d 	bl	8002478 <main>

0800743e <LoopForever>:

LoopForever:
    b LoopForever
 800743e:	e7fe      	b.n	800743e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007440:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8007444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007448:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800744c:	080111a8 	.word	0x080111a8
  ldr r2, =_sbss
 8007450:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8007454:	20007900 	.word	0x20007900

08007458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007458:	e7fe      	b.n	8007458 <ADC1_2_IRQHandler>

0800745a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007464:	2003      	movs	r0, #3
 8007466:	f001 fcfb 	bl	8008e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800746a:	200f      	movs	r0, #15
 800746c:	f000 f80e 	bl	800748c <HAL_InitTick>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	71fb      	strb	r3, [r7, #7]
 800747a:	e001      	b.n	8007480 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800747c:	f7fc fafe 	bl	8003a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007480:	79fb      	ldrb	r3, [r7, #7]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007498:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <HAL_InitTick+0x6c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d023      	beq.n	80074e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80074a0:	4b16      	ldr	r3, [pc, #88]	@ (80074fc <HAL_InitTick+0x70>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <HAL_InitTick+0x6c>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	4618      	mov	r0, r3
 80074b8:	f001 fd07 	bl	8008eca <HAL_SYSTICK_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10f      	bne.n	80074e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b0f      	cmp	r3, #15
 80074c6:	d809      	bhi.n	80074dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074c8:	2200      	movs	r2, #0
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	f001 fcd1 	bl	8008e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80074d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007500 <HAL_InitTick+0x74>)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e007      	b.n	80074ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
 80074e0:	e004      	b.n	80074ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]
 80074e6:	e001      	b.n	80074ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000010 	.word	0x20000010
 80074fc:	20000000 	.word	0x20000000
 8007500:	2000000c 	.word	0x2000000c

08007504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_IncTick+0x20>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_IncTick+0x24>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4413      	add	r3, r2
 8007514:	4a04      	ldr	r2, [pc, #16]	@ (8007528 <HAL_IncTick+0x24>)
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000010 	.word	0x20000010
 8007528:	200077b4 	.word	0x200077b4

0800752c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return uwTick;
 8007530:	4b03      	ldr	r3, [pc, #12]	@ (8007540 <HAL_GetTick+0x14>)
 8007532:	681b      	ldr	r3, [r3, #0]
}
 8007534:	4618      	mov	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	200077b4 	.word	0x200077b4

08007544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800754c:	f7ff ffee 	bl	800752c <HAL_GetTick>
 8007550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d005      	beq.n	800756a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800755e:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <HAL_Delay+0x44>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800756a:	bf00      	nop
 800756c:	f7ff ffde 	bl	800752c <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	429a      	cmp	r2, r3
 800757a:	d8f7      	bhi.n	800756c <HAL_Delay+0x28>
  {
  }
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000010 	.word	0x20000010

0800758c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	609a      	str	r2, [r3, #8]
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3360      	adds	r3, #96	@ 0x60
 8007606:	461a      	mov	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b08      	ldr	r3, [pc, #32]	@ (8007638 <LL_ADC_SetOffset+0x44>)
 8007616:	4013      	ands	r3, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	4313      	orrs	r3, r2
 8007624:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	03fff000 	.word	0x03fff000

0800763c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3360      	adds	r3, #96	@ 0x60
 800764a:	461a      	mov	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3360      	adds	r3, #96	@ 0x60
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	431a      	orrs	r2, r3
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3330      	adds	r3, #48	@ 0x30
 80076d4:	461a      	mov	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	f003 030c 	and.w	r3, r3, #12
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	211f      	movs	r1, #31
 80076f0:	fa01 f303 	lsl.w	r3, r1, r3
 80076f4:	43db      	mvns	r3, r3
 80076f6:	401a      	ands	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	0e9b      	lsrs	r3, r3, #26
 80076fc:	f003 011f 	and.w	r1, r3, #31
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	fa01 f303 	lsl.w	r3, r1, r3
 800770a:	431a      	orrs	r2, r3
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007710:	bf00      	nop
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3314      	adds	r3, #20
 800772c:	461a      	mov	r2, r3
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	0e5b      	lsrs	r3, r3, #25
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	4413      	add	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	0d1b      	lsrs	r3, r3, #20
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	2107      	movs	r1, #7
 800774a:	fa01 f303 	lsl.w	r3, r1, r3
 800774e:	43db      	mvns	r3, r3
 8007750:	401a      	ands	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	0d1b      	lsrs	r3, r3, #20
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	fa01 f303 	lsl.w	r3, r1, r3
 8007760:	431a      	orrs	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800778c:	43db      	mvns	r3, r3
 800778e:	401a      	ands	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0318 	and.w	r3, r3, #24
 8007796:	4908      	ldr	r1, [pc, #32]	@ (80077b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007798:	40d9      	lsrs	r1, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	400b      	ands	r3, r1
 800779e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	0007ffff 	.word	0x0007ffff

080077bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 031f 	and.w	r3, r3, #31
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80077e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6093      	str	r3, [r2, #8]
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800780c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007810:	d101      	bne.n	8007816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007838:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800785c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007860:	d101      	bne.n	8007866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007884:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007888:	f043 0201 	orr.w	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80078b0:	f043 0202 	orr.w	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <LL_ADC_IsEnabled+0x18>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <LL_ADC_IsEnabled+0x1a>
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d101      	bne.n	8007902 <LL_ADC_IsDisableOngoing+0x18>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <LL_ADC_IsDisableOngoing+0x1a>
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007924:	f043 0204 	orr.w	r2, r3, #4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800794c:	f043 0210 	orr.w	r2, r3, #16
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b04      	cmp	r3, #4
 8007972:	d101      	bne.n	8007978 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007996:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800799a:	f043 0220 	orr.w	r2, r3, #32
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d101      	bne.n	80079c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b089      	sub	sp, #36	@ 0x24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e130      	b.n	8007c50 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fc f861 	bl	8003ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fef1 	bl	80077fc <LL_ADC_IsDeepPowerDownEnabled>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fed7 	bl	80077d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff ff0c 	bl	800784c <LL_ADC_IsInternalRegulatorEnabled>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d115      	bne.n	8007a66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fef0 	bl	8007824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a44:	4b84      	ldr	r3, [pc, #528]	@ (8007c58 <HAL_ADC_Init+0x284>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	099b      	lsrs	r3, r3, #6
 8007a4a:	4a84      	ldr	r2, [pc, #528]	@ (8007c5c <HAL_ADC_Init+0x288>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	099b      	lsrs	r3, r3, #6
 8007a52:	3301      	adds	r3, #1
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007a58:	e002      	b.n	8007a60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f9      	bne.n	8007a5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff feee 	bl	800784c <LL_ADC_IsInternalRegulatorEnabled>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10d      	bne.n	8007a92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7a:	f043 0210 	orr.w	r2, r3, #16
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a86:	f043 0201 	orr.w	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff62 	bl	8007960 <LL_ADC_REG_IsConversionOngoing>
 8007a9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f040 80c9 	bne.w	8007c3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 80c5 	bne.w	8007c3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007abc:	f043 0202 	orr.w	r2, r3, #2
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff fefb 	bl	80078c4 <LL_ADC_IsEnabled>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d115      	bne.n	8007b00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ad4:	4862      	ldr	r0, [pc, #392]	@ (8007c60 <HAL_ADC_Init+0x28c>)
 8007ad6:	f7ff fef5 	bl	80078c4 <LL_ADC_IsEnabled>
 8007ada:	4604      	mov	r4, r0
 8007adc:	4861      	ldr	r0, [pc, #388]	@ (8007c64 <HAL_ADC_Init+0x290>)
 8007ade:	f7ff fef1 	bl	80078c4 <LL_ADC_IsEnabled>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	431c      	orrs	r4, r3
 8007ae6:	4860      	ldr	r0, [pc, #384]	@ (8007c68 <HAL_ADC_Init+0x294>)
 8007ae8:	f7ff feec 	bl	80078c4 <LL_ADC_IsEnabled>
 8007aec:	4603      	mov	r3, r0
 8007aee:	4323      	orrs	r3, r4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	4619      	mov	r1, r3
 8007afa:	485c      	ldr	r0, [pc, #368]	@ (8007c6c <HAL_ADC_Init+0x298>)
 8007afc:	f7ff fd46 	bl	800758c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7e5b      	ldrb	r3, [r3, #25]
 8007b04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007b10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007b16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d106      	bne.n	8007b3c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	3b01      	subs	r3, #1
 8007b34:	045b      	lsls	r3, r3, #17
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d009      	beq.n	8007b58 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	4b44      	ldr	r3, [pc, #272]	@ (8007c70 <HAL_ADC_Init+0x29c>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	69b9      	ldr	r1, [r7, #24]
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff ff1c 	bl	80079ae <LL_ADC_INJ_IsConversionOngoing>
 8007b76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d13d      	bne.n	8007bfa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d13a      	bne.n	8007bfa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007b88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ba0:	f023 0302 	bic.w	r3, r3, #2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	430b      	orrs	r3, r1
 8007bac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d118      	bne.n	8007bea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007bc2:	f023 0304 	bic.w	r3, r3, #4
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007bce:	4311      	orrs	r1, r2
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007bd4:	4311      	orrs	r1, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	611a      	str	r2, [r3, #16]
 8007be8:	e007      	b.n	8007bfa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d10c      	bne.n	8007c1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	f023 010f 	bic.w	r1, r3, #15
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	1e5a      	subs	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c1a:	e007      	b.n	8007c2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 020f 	bic.w	r2, r2, #15
 8007c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	f043 0201 	orr.w	r2, r3, #1
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c3c:	e007      	b.n	8007c4e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c42:	f043 0210 	orr.w	r2, r3, #16
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3724      	adds	r7, #36	@ 0x24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd90      	pop	{r4, r7, pc}
 8007c58:	20000000 	.word	0x20000000
 8007c5c:	053e2d63 	.word	0x053e2d63
 8007c60:	50040000 	.word	0x50040000
 8007c64:	50040100 	.word	0x50040100
 8007c68:	50040200 	.word	0x50040200
 8007c6c:	50040300 	.word	0x50040300
 8007c70:	fff0c007 	.word	0xfff0c007

08007c74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c80:	4853      	ldr	r0, [pc, #332]	@ (8007dd0 <HAL_ADC_Start_DMA+0x15c>)
 8007c82:	f7ff fd9b 	bl	80077bc <LL_ADC_GetMultimode>
 8007c86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fe67 	bl	8007960 <LL_ADC_REG_IsConversionOngoing>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f040 8093 	bne.w	8007dc0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_ADC_Start_DMA+0x34>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e08e      	b.n	8007dc6 <HAL_ADC_Start_DMA+0x152>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a47      	ldr	r2, [pc, #284]	@ (8007dd4 <HAL_ADC_Start_DMA+0x160>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d008      	beq.n	8007ccc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d002      	beq.n	8007ccc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d172      	bne.n	8007db2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fda7 	bl	8008820 <ADC_Enable>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d165      	bne.n	8007da8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a38      	ldr	r2, [pc, #224]	@ (8007dd8 <HAL_ADC_Start_DMA+0x164>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d002      	beq.n	8007d00 <HAL_ADC_Start_DMA+0x8c>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	e000      	b.n	8007d02 <HAL_ADC_Start_DMA+0x8e>
 8007d00:	4b36      	ldr	r3, [pc, #216]	@ (8007ddc <HAL_ADC_Start_DMA+0x168>)
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d002      	beq.n	8007d10 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d105      	bne.n	8007d1c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d2c:	f023 0206 	bic.w	r2, r3, #6
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d34:	e002      	b.n	8007d3c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d40:	4a27      	ldr	r2, [pc, #156]	@ (8007de0 <HAL_ADC_Start_DMA+0x16c>)
 8007d42:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d48:	4a26      	ldr	r2, [pc, #152]	@ (8007de4 <HAL_ADC_Start_DMA+0x170>)
 8007d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d50:	4a25      	ldr	r2, [pc, #148]	@ (8007de8 <HAL_ADC_Start_DMA+0x174>)
 8007d52:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	221c      	movs	r2, #28
 8007d5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0210 	orr.w	r2, r2, #16
 8007d72:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3340      	adds	r3, #64	@ 0x40
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f001 fa50 	bl	8009238 <HAL_DMA_Start_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fdb5 	bl	8007910 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007da6:	e00d      	b.n	8007dc4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8007db0:	e008      	b.n	8007dc4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007dbe:	e001      	b.n	8007dc4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	50040300 	.word	0x50040300
 8007dd4:	50040200 	.word	0x50040200
 8007dd8:	50040100 	.word	0x50040100
 8007ddc:	50040000 	.word	0x50040000
 8007de0:	080089eb 	.word	0x080089eb
 8007de4:	08008ac3 	.word	0x08008ac3
 8007de8:	08008adf 	.word	0x08008adf

08007dec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_ADC_Stop_DMA+0x16>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e051      	b.n	8007ea6 <HAL_ADC_Stop_DMA+0xba>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007e0a:	2103      	movs	r1, #3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc4b 	bl	80086a8 <ADC_ConversionStop>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d13f      	bne.n	8007e9c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d10f      	bne.n	8007e5a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 fa5a 	bl	80092f8 <HAL_DMA_Abort>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0210 	bic.w	r2, r2, #16
 8007e68:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fd5b 	bl	800892c <ADC_Disable>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	e002      	b.n	8007e82 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fd55 	bl	800892c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d109      	bne.n	8007e9c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	f043 0201 	orr.w	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b0b6      	sub	sp, #216	@ 0xd8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_ADC_ConfigChannel+0x22>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e3c9      	b.n	800867a <HAL_ADC_ConfigChannel+0x7b6>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fd34 	bl	8007960 <LL_ADC_REG_IsConversionOngoing>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 83aa 	bne.w	8008654 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b05      	cmp	r3, #5
 8007f0e:	d824      	bhi.n	8007f5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	3b02      	subs	r3, #2
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d81b      	bhi.n	8007f52 <HAL_ADC_ConfigChannel+0x8e>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <HAL_ADC_ConfigChannel+0x5c>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f39 	.word	0x08007f39
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	08007f49 	.word	0x08007f49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8007f30:	230c      	movs	r3, #12
 8007f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007f36:	e010      	b.n	8007f5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8007f38:	2312      	movs	r3, #18
 8007f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007f3e:	e00c      	b.n	8007f5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8007f40:	2318      	movs	r3, #24
 8007f42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007f46:	e008      	b.n	8007f5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8007f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007f50:	e003      	b.n	8007f5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8007f52:	2306      	movs	r3, #6
 8007f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007f58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8007f68:	f7ff fbac 	bl	80076c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fcf5 	bl	8007960 <LL_ADC_REG_IsConversionOngoing>
 8007f76:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fd15 	bl	80079ae <LL_ADC_INJ_IsConversionOngoing>
 8007f84:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f040 81a4 	bne.w	80082da <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f040 819f 	bne.w	80082da <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f7ff fbb7 	bl	800771c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	695a      	ldr	r2, [r3, #20]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d00a      	beq.n	8007fe6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6818      	ldr	r0, [r3, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	6919      	ldr	r1, [r3, #16]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fe0:	f7ff fb08 	bl	80075f4 <LL_ADC_SetOffset>
 8007fe4:	e179      	b.n	80082da <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2100      	movs	r1, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fb25 	bl	800763c <LL_ADC_GetOffsetChannel>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <HAL_ADC_ConfigChannel+0x14e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff fb1a 	bl	800763c <LL_ADC_GetOffsetChannel>
 8008008:	4603      	mov	r3, r0
 800800a:	0e9b      	lsrs	r3, r3, #26
 800800c:	f003 021f 	and.w	r2, r3, #31
 8008010:	e01e      	b.n	8008050 <HAL_ADC_ConfigChannel+0x18c>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff fb0f 	bl	800763c <LL_ADC_GetOffsetChannel>
 800801e:	4603      	mov	r3, r0
 8008020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008028:	fa93 f3a3 	rbit	r3, r3
 800802c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8008040:	2320      	movs	r3, #32
 8008042:	e004      	b.n	800804e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8008044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008048:	fab3 f383 	clz	r3, r3
 800804c:	b2db      	uxtb	r3, r3
 800804e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <HAL_ADC_ConfigChannel+0x1a4>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	0e9b      	lsrs	r3, r3, #26
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	e018      	b.n	800809a <HAL_ADC_ConfigChannel+0x1d6>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008074:	fa93 f3a3 	rbit	r3, r3
 8008078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800807c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8008084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800808c:	2320      	movs	r3, #32
 800808e:	e004      	b.n	800809a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8008090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008094:	fab3 f383 	clz	r3, r3
 8008098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800809a:	429a      	cmp	r2, r3
 800809c:	d106      	bne.n	80080ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fade 	bl	8007668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2101      	movs	r1, #1
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fac2 	bl	800763c <LL_ADC_GetOffsetChannel>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <HAL_ADC_ConfigChannel+0x214>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2101      	movs	r1, #1
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fab7 	bl	800763c <LL_ADC_GetOffsetChannel>
 80080ce:	4603      	mov	r3, r0
 80080d0:	0e9b      	lsrs	r3, r3, #26
 80080d2:	f003 021f 	and.w	r2, r3, #31
 80080d6:	e01e      	b.n	8008116 <HAL_ADC_ConfigChannel+0x252>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff faac 	bl	800763c <LL_ADC_GetOffsetChannel>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080ee:	fa93 f3a3 	rbit	r3, r3
 80080f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80080f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80080fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8008106:	2320      	movs	r3, #32
 8008108:	e004      	b.n	8008114 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800810a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800810e:	fab3 f383 	clz	r3, r3
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <HAL_ADC_ConfigChannel+0x26a>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	0e9b      	lsrs	r3, r3, #26
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	e018      	b.n	8008160 <HAL_ADC_ConfigChannel+0x29c>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008136:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800813a:	fa93 f3a3 	rbit	r3, r3
 800813e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8008142:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008146:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800814a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8008152:	2320      	movs	r3, #32
 8008154:	e004      	b.n	8008160 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8008156:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800815a:	fab3 f383 	clz	r3, r3
 800815e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008160:	429a      	cmp	r2, r3
 8008162:	d106      	bne.n	8008172 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2200      	movs	r2, #0
 800816a:	2101      	movs	r1, #1
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff fa7b 	bl	8007668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2102      	movs	r1, #2
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fa5f 	bl	800763c <LL_ADC_GetOffsetChannel>
 800817e:	4603      	mov	r3, r0
 8008180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <HAL_ADC_ConfigChannel+0x2da>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2102      	movs	r1, #2
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fa54 	bl	800763c <LL_ADC_GetOffsetChannel>
 8008194:	4603      	mov	r3, r0
 8008196:	0e9b      	lsrs	r3, r3, #26
 8008198:	f003 021f 	and.w	r2, r3, #31
 800819c:	e01e      	b.n	80081dc <HAL_ADC_ConfigChannel+0x318>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2102      	movs	r1, #2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff fa49 	bl	800763c <LL_ADC_GetOffsetChannel>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081b4:	fa93 f3a3 	rbit	r3, r3
 80081b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80081bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80081c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80081cc:	2320      	movs	r3, #32
 80081ce:	e004      	b.n	80081da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80081d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d4:	fab3 f383 	clz	r3, r3
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <HAL_ADC_ConfigChannel+0x330>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	0e9b      	lsrs	r3, r3, #26
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	e014      	b.n	800821e <HAL_ADC_ConfigChannel+0x35a>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081fc:	fa93 f3a3 	rbit	r3, r3
 8008200:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008208:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8008210:	2320      	movs	r3, #32
 8008212:	e004      	b.n	800821e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8008214:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008218:	fab3 f383 	clz	r3, r3
 800821c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800821e:	429a      	cmp	r2, r3
 8008220:	d106      	bne.n	8008230 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2200      	movs	r2, #0
 8008228:	2102      	movs	r1, #2
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fa1c 	bl	8007668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2103      	movs	r1, #3
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff fa00 	bl	800763c <LL_ADC_GetOffsetChannel>
 800823c:	4603      	mov	r3, r0
 800823e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <HAL_ADC_ConfigChannel+0x398>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2103      	movs	r1, #3
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff f9f5 	bl	800763c <LL_ADC_GetOffsetChannel>
 8008252:	4603      	mov	r3, r0
 8008254:	0e9b      	lsrs	r3, r3, #26
 8008256:	f003 021f 	and.w	r2, r3, #31
 800825a:	e017      	b.n	800828c <HAL_ADC_ConfigChannel+0x3c8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2103      	movs	r1, #3
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff f9ea 	bl	800763c <LL_ADC_GetOffsetChannel>
 8008268:	4603      	mov	r3, r0
 800826a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800826e:	fa93 f3a3 	rbit	r3, r3
 8008272:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8008274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008276:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800827e:	2320      	movs	r3, #32
 8008280:	e003      	b.n	800828a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8008282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008284:	fab3 f383 	clz	r3, r3
 8008288:	b2db      	uxtb	r3, r3
 800828a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <HAL_ADC_ConfigChannel+0x3e0>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	0e9b      	lsrs	r3, r3, #26
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	e011      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x404>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082ac:	fa93 f3a3 	rbit	r3, r3
 80082b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80082b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80082b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80082bc:	2320      	movs	r3, #32
 80082be:	e003      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80082c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082c2:	fab3 f383 	clz	r3, r3
 80082c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d106      	bne.n	80082da <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2103      	movs	r1, #3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff f9c7 	bl	8007668 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff faf0 	bl	80078c4 <LL_ADC_IsEnabled>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 8140 	bne.w	800856c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	461a      	mov	r2, r3
 80082fa:	f7ff fa3b 	bl	8007774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	4a8f      	ldr	r2, [pc, #572]	@ (8008540 <HAL_ADC_ConfigChannel+0x67c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	f040 8131 	bne.w	800856c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10b      	bne.n	8008332 <HAL_ADC_ConfigChannel+0x46e>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	0e9b      	lsrs	r3, r3, #26
 8008320:	3301      	adds	r3, #1
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2b09      	cmp	r3, #9
 8008328:	bf94      	ite	ls
 800832a:	2301      	movls	r3, #1
 800832c:	2300      	movhi	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	e019      	b.n	8008366 <HAL_ADC_ConfigChannel+0x4a2>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800833a:	fa93 f3a3 	rbit	r3, r3
 800833e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008342:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800834a:	2320      	movs	r3, #32
 800834c:	e003      	b.n	8008356 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800834e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008350:	fab3 f383 	clz	r3, r3
 8008354:	b2db      	uxtb	r3, r3
 8008356:	3301      	adds	r3, #1
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	2b09      	cmp	r3, #9
 800835e:	bf94      	ite	ls
 8008360:	2301      	movls	r3, #1
 8008362:	2300      	movhi	r3, #0
 8008364:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008366:	2b00      	cmp	r3, #0
 8008368:	d079      	beq.n	800845e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008372:	2b00      	cmp	r3, #0
 8008374:	d107      	bne.n	8008386 <HAL_ADC_ConfigChannel+0x4c2>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	0e9b      	lsrs	r3, r3, #26
 800837c:	3301      	adds	r3, #1
 800837e:	069b      	lsls	r3, r3, #26
 8008380:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008384:	e015      	b.n	80083b2 <HAL_ADC_ConfigChannel+0x4ee>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800838e:	fa93 f3a3 	rbit	r3, r3
 8008392:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008396:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8008398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800839e:	2320      	movs	r3, #32
 80083a0:	e003      	b.n	80083aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80083a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083a4:	fab3 f383 	clz	r3, r3
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	3301      	adds	r3, #1
 80083ac:	069b      	lsls	r3, r3, #26
 80083ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d109      	bne.n	80083d2 <HAL_ADC_ConfigChannel+0x50e>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	0e9b      	lsrs	r3, r3, #26
 80083c4:	3301      	adds	r3, #1
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	2101      	movs	r1, #1
 80083cc:	fa01 f303 	lsl.w	r3, r1, r3
 80083d0:	e017      	b.n	8008402 <HAL_ADC_ConfigChannel+0x53e>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083da:	fa93 f3a3 	rbit	r3, r3
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80083e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80083e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80083ea:	2320      	movs	r3, #32
 80083ec:	e003      	b.n	80083f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80083ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f0:	fab3 f383 	clz	r3, r3
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	3301      	adds	r3, #1
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	2101      	movs	r1, #1
 80083fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008402:	ea42 0103 	orr.w	r1, r2, r3
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <HAL_ADC_ConfigChannel+0x564>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	0e9b      	lsrs	r3, r3, #26
 8008418:	3301      	adds	r3, #1
 800841a:	f003 021f 	and.w	r2, r3, #31
 800841e:	4613      	mov	r3, r2
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	4413      	add	r3, r2
 8008424:	051b      	lsls	r3, r3, #20
 8008426:	e018      	b.n	800845a <HAL_ADC_ConfigChannel+0x596>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800842e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008430:	fa93 f3a3 	rbit	r3, r3
 8008434:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800843a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8008440:	2320      	movs	r3, #32
 8008442:	e003      	b.n	800844c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8008444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008446:	fab3 f383 	clz	r3, r3
 800844a:	b2db      	uxtb	r3, r3
 800844c:	3301      	adds	r3, #1
 800844e:	f003 021f 	and.w	r2, r3, #31
 8008452:	4613      	mov	r3, r2
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4413      	add	r3, r2
 8008458:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800845a:	430b      	orrs	r3, r1
 800845c:	e081      	b.n	8008562 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008466:	2b00      	cmp	r3, #0
 8008468:	d107      	bne.n	800847a <HAL_ADC_ConfigChannel+0x5b6>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	0e9b      	lsrs	r3, r3, #26
 8008470:	3301      	adds	r3, #1
 8008472:	069b      	lsls	r3, r3, #26
 8008474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008478:	e015      	b.n	80084a6 <HAL_ADC_ConfigChannel+0x5e2>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	fa93 f3a3 	rbit	r3, r3
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800848c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8008492:	2320      	movs	r3, #32
 8008494:	e003      	b.n	800849e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8008496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008498:	fab3 f383 	clz	r3, r3
 800849c:	b2db      	uxtb	r3, r3
 800849e:	3301      	adds	r3, #1
 80084a0:	069b      	lsls	r3, r3, #26
 80084a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x602>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	0e9b      	lsrs	r3, r3, #26
 80084b8:	3301      	adds	r3, #1
 80084ba:	f003 031f 	and.w	r3, r3, #31
 80084be:	2101      	movs	r1, #1
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	e017      	b.n	80084f6 <HAL_ADC_ConfigChannel+0x632>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	fa93 f3a3 	rbit	r3, r3
 80084d2:	61bb      	str	r3, [r7, #24]
  return result;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80084de:	2320      	movs	r3, #32
 80084e0:	e003      	b.n	80084ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	fab3 f383 	clz	r3, r3
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	3301      	adds	r3, #1
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f303 	lsl.w	r3, r1, r3
 80084f6:	ea42 0103 	orr.w	r1, r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10d      	bne.n	8008522 <HAL_ADC_ConfigChannel+0x65e>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	0e9b      	lsrs	r3, r3, #26
 800850c:	3301      	adds	r3, #1
 800850e:	f003 021f 	and.w	r2, r3, #31
 8008512:	4613      	mov	r3, r2
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	4413      	add	r3, r2
 8008518:	3b1e      	subs	r3, #30
 800851a:	051b      	lsls	r3, r3, #20
 800851c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008520:	e01e      	b.n	8008560 <HAL_ADC_ConfigChannel+0x69c>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	fa93 f3a3 	rbit	r3, r3
 800852e:	60fb      	str	r3, [r7, #12]
  return result;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800853a:	2320      	movs	r3, #32
 800853c:	e006      	b.n	800854c <HAL_ADC_ConfigChannel+0x688>
 800853e:	bf00      	nop
 8008540:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	fab3 f383 	clz	r3, r3
 800854a:	b2db      	uxtb	r3, r3
 800854c:	3301      	adds	r3, #1
 800854e:	f003 021f 	and.w	r2, r3, #31
 8008552:	4613      	mov	r3, r2
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	4413      	add	r3, r2
 8008558:	3b1e      	subs	r3, #30
 800855a:	051b      	lsls	r3, r3, #20
 800855c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008560:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008566:	4619      	mov	r1, r3
 8008568:	f7ff f8d8 	bl	800771c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4b44      	ldr	r3, [pc, #272]	@ (8008684 <HAL_ADC_ConfigChannel+0x7c0>)
 8008572:	4013      	ands	r3, r2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d07a      	beq.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008578:	4843      	ldr	r0, [pc, #268]	@ (8008688 <HAL_ADC_ConfigChannel+0x7c4>)
 800857a:	f7ff f82d 	bl	80075d8 <LL_ADC_GetCommonPathInternalCh>
 800857e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a41      	ldr	r2, [pc, #260]	@ (800868c <HAL_ADC_ConfigChannel+0x7c8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d12c      	bne.n	80085e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800858c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d126      	bne.n	80085e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a3c      	ldr	r2, [pc, #240]	@ (8008690 <HAL_ADC_ConfigChannel+0x7cc>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_ADC_ConfigChannel+0x6e8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a3b      	ldr	r2, [pc, #236]	@ (8008694 <HAL_ADC_ConfigChannel+0x7d0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d15d      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80085ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80085b4:	4619      	mov	r1, r3
 80085b6:	4834      	ldr	r0, [pc, #208]	@ (8008688 <HAL_ADC_ConfigChannel+0x7c4>)
 80085b8:	f7fe fffb 	bl	80075b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80085bc:	4b36      	ldr	r3, [pc, #216]	@ (8008698 <HAL_ADC_ConfigChannel+0x7d4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	099b      	lsrs	r3, r3, #6
 80085c2:	4a36      	ldr	r2, [pc, #216]	@ (800869c <HAL_ADC_ConfigChannel+0x7d8>)
 80085c4:	fba2 2303 	umull	r2, r3, r2, r3
 80085c8:	099b      	lsrs	r3, r3, #6
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	4613      	mov	r3, r2
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80085d6:	e002      	b.n	80085de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3b01      	subs	r3, #1
 80085dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f9      	bne.n	80085d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80085e4:	e040      	b.n	8008668 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a2d      	ldr	r2, [pc, #180]	@ (80086a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d118      	bne.n	8008622 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80085f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d112      	bne.n	8008622 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a23      	ldr	r2, [pc, #140]	@ (8008690 <HAL_ADC_ConfigChannel+0x7cc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_ADC_ConfigChannel+0x74c>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a22      	ldr	r2, [pc, #136]	@ (8008694 <HAL_ADC_ConfigChannel+0x7d0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d12d      	bne.n	800866c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008618:	4619      	mov	r1, r3
 800861a:	481b      	ldr	r0, [pc, #108]	@ (8008688 <HAL_ADC_ConfigChannel+0x7c4>)
 800861c:	f7fe ffc9 	bl	80075b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008620:	e024      	b.n	800866c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1f      	ldr	r2, [pc, #124]	@ (80086a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d120      	bne.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800862c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11a      	bne.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a14      	ldr	r2, [pc, #80]	@ (8008690 <HAL_ADC_ConfigChannel+0x7cc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d115      	bne.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008646:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800864a:	4619      	mov	r1, r3
 800864c:	480e      	ldr	r0, [pc, #56]	@ (8008688 <HAL_ADC_ConfigChannel+0x7c4>)
 800864e:	f7fe ffb0 	bl	80075b2 <LL_ADC_SetCommonPathInternalCh>
 8008652:	e00c      	b.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008658:	f043 0220 	orr.w	r2, r3, #32
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008666:	e002      	b.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800866c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008676:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800867a:	4618      	mov	r0, r3
 800867c:	37d8      	adds	r7, #216	@ 0xd8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	80080000 	.word	0x80080000
 8008688:	50040300 	.word	0x50040300
 800868c:	c7520000 	.word	0xc7520000
 8008690:	50040000 	.word	0x50040000
 8008694:	50040200 	.word	0x50040200
 8008698:	20000000 	.word	0x20000000
 800869c:	053e2d63 	.word	0x053e2d63
 80086a0:	cb840000 	.word	0xcb840000
 80086a4:	80000001 	.word	0x80000001

080086a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff f94e 	bl	8007960 <LL_ADC_REG_IsConversionOngoing>
 80086c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff f96f 	bl	80079ae <LL_ADC_INJ_IsConversionOngoing>
 80086d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8098 	beq.w	8008810 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02a      	beq.n	8008744 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7e5b      	ldrb	r3, [r3, #25]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d126      	bne.n	8008744 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7e1b      	ldrb	r3, [r3, #24]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d122      	bne.n	8008744 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80086fe:	2301      	movs	r3, #1
 8008700:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008702:	e014      	b.n	800872e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4a45      	ldr	r2, [pc, #276]	@ (800881c <ADC_ConversionStop+0x174>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d90d      	bls.n	8008728 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008710:	f043 0210 	orr.w	r2, r3, #16
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800871c:	f043 0201 	orr.w	r2, r3, #1
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e074      	b.n	8008812 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	3301      	adds	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008738:	2b40      	cmp	r3, #64	@ 0x40
 800873a:	d1e3      	bne.n	8008704 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2240      	movs	r2, #64	@ 0x40
 8008742:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d014      	beq.n	8008774 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff f906 	bl	8007960 <LL_ADC_REG_IsConversionOngoing>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff f8c3 	bl	80078ea <LL_ADC_IsDisableOngoing>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d104      	bne.n	8008774 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff f8e2 	bl	8007938 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d014      	beq.n	80087a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff f915 	bl	80079ae <LL_ADC_INJ_IsConversionOngoing>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00c      	beq.n	80087a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff f8ab 	bl	80078ea <LL_ADC_IsDisableOngoing>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff f8f1 	bl	8007986 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d005      	beq.n	80087b6 <ADC_ConversionStop+0x10e>
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d105      	bne.n	80087bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80087b0:	230c      	movs	r3, #12
 80087b2:	617b      	str	r3, [r7, #20]
        break;
 80087b4:	e005      	b.n	80087c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80087b6:	2308      	movs	r3, #8
 80087b8:	617b      	str	r3, [r7, #20]
        break;
 80087ba:	e002      	b.n	80087c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80087bc:	2304      	movs	r3, #4
 80087be:	617b      	str	r3, [r7, #20]
        break;
 80087c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80087c2:	f7fe feb3 	bl	800752c <HAL_GetTick>
 80087c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80087c8:	e01b      	b.n	8008802 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80087ca:	f7fe feaf 	bl	800752c <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b05      	cmp	r3, #5
 80087d6:	d914      	bls.n	8008802 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	4013      	ands	r3, r2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ea:	f043 0210 	orr.w	r2, r3, #16
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f6:	f043 0201 	orr.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e007      	b.n	8008812 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1dc      	bne.n	80087ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	a33fffff 	.word	0xa33fffff

08008820 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008828:	2300      	movs	r3, #0
 800882a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff f847 	bl	80078c4 <LL_ADC_IsEnabled>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d169      	bne.n	8008910 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	4b36      	ldr	r3, [pc, #216]	@ (800891c <ADC_Enable+0xfc>)
 8008844:	4013      	ands	r3, r2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00d      	beq.n	8008866 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884e:	f043 0210 	orr.w	r2, r3, #16
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800885a:	f043 0201 	orr.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e055      	b.n	8008912 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff f802 	bl	8007874 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008870:	482b      	ldr	r0, [pc, #172]	@ (8008920 <ADC_Enable+0x100>)
 8008872:	f7fe feb1 	bl	80075d8 <LL_ADC_GetCommonPathInternalCh>
 8008876:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008880:	4b28      	ldr	r3, [pc, #160]	@ (8008924 <ADC_Enable+0x104>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	099b      	lsrs	r3, r3, #6
 8008886:	4a28      	ldr	r2, [pc, #160]	@ (8008928 <ADC_Enable+0x108>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	099b      	lsrs	r3, r3, #6
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800889a:	e002      	b.n	80088a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	3b01      	subs	r3, #1
 80088a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f9      	bne.n	800889c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80088a8:	f7fe fe40 	bl	800752c <HAL_GetTick>
 80088ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088ae:	e028      	b.n	8008902 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff f805 	bl	80078c4 <LL_ADC_IsEnabled>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d104      	bne.n	80088ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe ffd5 	bl	8007874 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80088ca:	f7fe fe2f 	bl	800752c <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d914      	bls.n	8008902 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d00d      	beq.n	8008902 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ea:	f043 0210 	orr.w	r2, r3, #16
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088f6:	f043 0201 	orr.w	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e007      	b.n	8008912 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	d1cf      	bne.n	80088b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	8000003f 	.word	0x8000003f
 8008920:	50040300 	.word	0x50040300
 8008924:	20000000 	.word	0x20000000
 8008928:	053e2d63 	.word	0x053e2d63

0800892c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe ffd6 	bl	80078ea <LL_ADC_IsDisableOngoing>
 800893e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe ffbd 	bl	80078c4 <LL_ADC_IsEnabled>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d047      	beq.n	80089e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d144      	bne.n	80089e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 030d 	and.w	r3, r3, #13
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10c      	bne.n	800897e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe ff97 	bl	800789c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2203      	movs	r2, #3
 8008974:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008976:	f7fe fdd9 	bl	800752c <HAL_GetTick>
 800897a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800897c:	e029      	b.n	80089d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008982:	f043 0210 	orr.w	r2, r3, #16
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898e:	f043 0201 	orr.w	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e023      	b.n	80089e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800899a:	f7fe fdc7 	bl	800752c <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d914      	bls.n	80089d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00d      	beq.n	80089d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ba:	f043 0210 	orr.w	r2, r3, #16
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c6:	f043 0201 	orr.w	r2, r3, #1
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e007      	b.n	80089e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1dc      	bne.n	800899a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d14b      	bne.n	8008a9c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d021      	beq.n	8008a62 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fe3b 	bl	800769e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d032      	beq.n	8008a94 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d12b      	bne.n	8008a94 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11f      	bne.n	8008a94 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a58:	f043 0201 	orr.w	r2, r3, #1
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008a60:	e018      	b.n	8008a94 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d111      	bne.n	8008a94 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d105      	bne.n	8008a94 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7f8 fabd 	bl	8001014 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a9a:	e00e      	b.n	8008aba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff fa00 	bl	8007eae <HAL_ADC_ErrorCallback>
}
 8008aae:	e004      	b.n	8008aba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7f8 fa83 	bl	8000fdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b084      	sub	sp, #16
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008afc:	f043 0204 	orr.w	r2, r3, #4
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff f9d2 	bl	8007eae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <LL_ADC_IsEnabled>:
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d101      	bne.n	8008b2a <LL_ADC_IsEnabled+0x18>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <LL_ADC_IsEnabled+0x1a>
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <LL_ADC_REG_IsConversionOngoing>:
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d101      	bne.n	8008b50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008b60:	b590      	push	{r4, r7, lr}
 8008b62:	b09f      	sub	sp, #124	@ 0x7c
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e093      	b.n	8008ca6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008b86:	2300      	movs	r3, #0
 8008b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a47      	ldr	r2, [pc, #284]	@ (8008cb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d102      	bne.n	8008b9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008b98:	4b46      	ldr	r3, [pc, #280]	@ (8008cb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008b9a:	60bb      	str	r3, [r7, #8]
 8008b9c:	e001      	b.n	8008ba2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10b      	bne.n	8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bac:	f043 0220 	orr.w	r2, r3, #32
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e072      	b.n	8008ca6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ffb8 	bl	8008b38 <LL_ADC_REG_IsConversionOngoing>
 8008bc8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff ffb2 	bl	8008b38 <LL_ADC_REG_IsConversionOngoing>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d154      	bne.n	8008c84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d151      	bne.n	8008c84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008be0:	4b35      	ldr	r3, [pc, #212]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8008be2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02c      	beq.n	8008c46 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	6859      	ldr	r1, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008bfe:	035b      	lsls	r3, r3, #13
 8008c00:	430b      	orrs	r3, r1
 8008c02:	431a      	orrs	r2, r3
 8008c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c08:	4829      	ldr	r0, [pc, #164]	@ (8008cb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008c0a:	f7ff ff82 	bl	8008b12 <LL_ADC_IsEnabled>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4828      	ldr	r0, [pc, #160]	@ (8008cb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008c12:	f7ff ff7e 	bl	8008b12 <LL_ADC_IsEnabled>
 8008c16:	4603      	mov	r3, r0
 8008c18:	431c      	orrs	r4, r3
 8008c1a:	4828      	ldr	r0, [pc, #160]	@ (8008cbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8008c1c:	f7ff ff79 	bl	8008b12 <LL_ADC_IsEnabled>
 8008c20:	4603      	mov	r3, r0
 8008c22:	4323      	orrs	r3, r4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d137      	bne.n	8008c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008c30:	f023 030f 	bic.w	r3, r3, #15
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	6811      	ldr	r1, [r2, #0]
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	6892      	ldr	r2, [r2, #8]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c42:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008c44:	e028      	b.n	8008c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c52:	4817      	ldr	r0, [pc, #92]	@ (8008cb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008c54:	f7ff ff5d 	bl	8008b12 <LL_ADC_IsEnabled>
 8008c58:	4604      	mov	r4, r0
 8008c5a:	4816      	ldr	r0, [pc, #88]	@ (8008cb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008c5c:	f7ff ff59 	bl	8008b12 <LL_ADC_IsEnabled>
 8008c60:	4603      	mov	r3, r0
 8008c62:	431c      	orrs	r4, r3
 8008c64:	4815      	ldr	r0, [pc, #84]	@ (8008cbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8008c66:	f7ff ff54 	bl	8008b12 <LL_ADC_IsEnabled>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4323      	orrs	r3, r4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d112      	bne.n	8008c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008c7a:	f023 030f 	bic.w	r3, r3, #15
 8008c7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008c82:	e009      	b.n	8008c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c88:	f043 0220 	orr.w	r2, r3, #32
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008c96:	e000      	b.n	8008c9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008c98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008ca2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	377c      	adds	r7, #124	@ 0x7c
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd90      	pop	{r4, r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	50040000 	.word	0x50040000
 8008cb4:	50040100 	.word	0x50040100
 8008cb8:	50040300 	.word	0x50040300
 8008cbc:	50040200 	.word	0x50040200

08008cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d04 <__NVIC_SetPriorityGrouping+0x44>)
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008cdc:	4013      	ands	r3, r2
 8008cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cf2:	4a04      	ldr	r2, [pc, #16]	@ (8008d04 <__NVIC_SetPriorityGrouping+0x44>)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	60d3      	str	r3, [r2, #12]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	e000ed00 	.word	0xe000ed00

08008d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d0c:	4b04      	ldr	r3, [pc, #16]	@ (8008d20 <__NVIC_GetPriorityGrouping+0x18>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	0a1b      	lsrs	r3, r3, #8
 8008d12:	f003 0307 	and.w	r3, r3, #7
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	e000ed00 	.word	0xe000ed00

08008d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	db0b      	blt.n	8008d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	f003 021f 	and.w	r2, r3, #31
 8008d3c:	4907      	ldr	r1, [pc, #28]	@ (8008d5c <__NVIC_EnableIRQ+0x38>)
 8008d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d42:	095b      	lsrs	r3, r3, #5
 8008d44:	2001      	movs	r0, #1
 8008d46:	fa00 f202 	lsl.w	r2, r0, r2
 8008d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	e000e100 	.word	0xe000e100

08008d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db0a      	blt.n	8008d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	490c      	ldr	r1, [pc, #48]	@ (8008dac <__NVIC_SetPriority+0x4c>)
 8008d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7e:	0112      	lsls	r2, r2, #4
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	440b      	add	r3, r1
 8008d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d88:	e00a      	b.n	8008da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	4908      	ldr	r1, [pc, #32]	@ (8008db0 <__NVIC_SetPriority+0x50>)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	3b04      	subs	r3, #4
 8008d98:	0112      	lsls	r2, r2, #4
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	761a      	strb	r2, [r3, #24]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	e000e100 	.word	0xe000e100
 8008db0:	e000ed00 	.word	0xe000ed00

08008db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b089      	sub	sp, #36	@ 0x24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f1c3 0307 	rsb	r3, r3, #7
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	bf28      	it	cs
 8008dd2:	2304      	movcs	r3, #4
 8008dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	2b06      	cmp	r3, #6
 8008ddc:	d902      	bls.n	8008de4 <NVIC_EncodePriority+0x30>
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	3b03      	subs	r3, #3
 8008de2:	e000      	b.n	8008de6 <NVIC_EncodePriority+0x32>
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	43da      	mvns	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	401a      	ands	r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	fa01 f303 	lsl.w	r3, r1, r3
 8008e06:	43d9      	mvns	r1, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e0c:	4313      	orrs	r3, r2
         );
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3724      	adds	r7, #36	@ 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e2c:	d301      	bcc.n	8008e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e00f      	b.n	8008e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e32:	4a0a      	ldr	r2, [pc, #40]	@ (8008e5c <SysTick_Config+0x40>)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e3a:	210f      	movs	r1, #15
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	f7ff ff8e 	bl	8008d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e44:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <SysTick_Config+0x40>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e4a:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <SysTick_Config+0x40>)
 8008e4c:	2207      	movs	r2, #7
 8008e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	e000e010 	.word	0xe000e010

08008e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff ff29 	bl	8008cc0 <__NVIC_SetPriorityGrouping>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008e88:	f7ff ff3e 	bl	8008d08 <__NVIC_GetPriorityGrouping>
 8008e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	6978      	ldr	r0, [r7, #20]
 8008e94:	f7ff ff8e 	bl	8008db4 <NVIC_EncodePriority>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff ff5d 	bl	8008d60 <__NVIC_SetPriority>
}
 8008ea6:	bf00      	nop
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff ff31 	bl	8008d24 <__NVIC_EnableIRQ>
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff ffa2 	bl	8008e1c <SysTick_Config>
 8008ed8:	4603      	mov	r3, r0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e054      	b.n	8008fa0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7f5b      	ldrb	r3, [r3, #29]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d105      	bne.n	8008f0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7fa fe74 	bl	8003bf4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10c      	bne.n	8008f34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a22      	ldr	r2, [pc, #136]	@ (8008fa8 <HAL_CRC_Init+0xc4>)
 8008f20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0218 	bic.w	r2, r2, #24
 8008f30:	609a      	str	r2, [r3, #8]
 8008f32:	e00c      	b.n	8008f4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6899      	ldr	r1, [r3, #8]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f834 	bl	8008fac <HAL_CRCEx_Polynomial_Set>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e028      	b.n	8008fa0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	795b      	ldrb	r3, [r3, #5]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5e:	611a      	str	r2, [r3, #16]
 8008f60:	e004      	b.n	8008f6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6912      	ldr	r2, [r2, #16]
 8008f6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699a      	ldr	r2, [r3, #24]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	04c11db7 	.word	0x04c11db7

08008fac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008fbc:	231f      	movs	r3, #31
 8008fbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	75fb      	strb	r3, [r7, #23]
 8008fce:	e063      	b.n	8009098 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008fd0:	bf00      	nop
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1e5a      	subs	r2, r3, #1
 8008fd6:	613a      	str	r2, [r7, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <HAL_CRCEx_Polynomial_Set+0x44>
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b18      	cmp	r3, #24
 8008ff4:	d846      	bhi.n	8009084 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ffc <HAL_CRCEx_Polynomial_Set+0x50>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	0800908b 	.word	0x0800908b
 8009000:	08009085 	.word	0x08009085
 8009004:	08009085 	.word	0x08009085
 8009008:	08009085 	.word	0x08009085
 800900c:	08009085 	.word	0x08009085
 8009010:	08009085 	.word	0x08009085
 8009014:	08009085 	.word	0x08009085
 8009018:	08009085 	.word	0x08009085
 800901c:	08009079 	.word	0x08009079
 8009020:	08009085 	.word	0x08009085
 8009024:	08009085 	.word	0x08009085
 8009028:	08009085 	.word	0x08009085
 800902c:	08009085 	.word	0x08009085
 8009030:	08009085 	.word	0x08009085
 8009034:	08009085 	.word	0x08009085
 8009038:	08009085 	.word	0x08009085
 800903c:	0800906d 	.word	0x0800906d
 8009040:	08009085 	.word	0x08009085
 8009044:	08009085 	.word	0x08009085
 8009048:	08009085 	.word	0x08009085
 800904c:	08009085 	.word	0x08009085
 8009050:	08009085 	.word	0x08009085
 8009054:	08009085 	.word	0x08009085
 8009058:	08009085 	.word	0x08009085
 800905c:	08009061 	.word	0x08009061
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b06      	cmp	r3, #6
 8009064:	d913      	bls.n	800908e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800906a:	e010      	b.n	800908e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b07      	cmp	r3, #7
 8009070:	d90f      	bls.n	8009092 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009076:	e00c      	b.n	8009092 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	2b0f      	cmp	r3, #15
 800907c:	d90b      	bls.n	8009096 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009082:	e008      	b.n	8009096 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]
        break;
 8009088:	e006      	b.n	8009098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800908a:	bf00      	nop
 800908c:	e004      	b.n	8009098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800908e:	bf00      	nop
 8009090:	e002      	b.n	8009098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009092:	bf00      	nop
 8009094:	e000      	b.n	8009098 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009096:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f023 0118 	bic.w	r1, r3, #24
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e098      	b.n	800920c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009218 <HAL_DMA_Init+0x150>)
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d80f      	bhi.n	8009106 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	4b4b      	ldr	r3, [pc, #300]	@ (800921c <HAL_DMA_Init+0x154>)
 80090ee:	4413      	add	r3, r2
 80090f0:	4a4b      	ldr	r2, [pc, #300]	@ (8009220 <HAL_DMA_Init+0x158>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	009a      	lsls	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a48      	ldr	r2, [pc, #288]	@ (8009224 <HAL_DMA_Init+0x15c>)
 8009102:	641a      	str	r2, [r3, #64]	@ 0x40
 8009104:	e00e      	b.n	8009124 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	4b46      	ldr	r3, [pc, #280]	@ (8009228 <HAL_DMA_Init+0x160>)
 800910e:	4413      	add	r3, r2
 8009110:	4a43      	ldr	r2, [pc, #268]	@ (8009220 <HAL_DMA_Init+0x158>)
 8009112:	fba2 2303 	umull	r2, r3, r2, r3
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	009a      	lsls	r2, r3, #2
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a42      	ldr	r2, [pc, #264]	@ (800922c <HAL_DMA_Init+0x164>)
 8009122:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800913a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800913e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800917e:	d039      	beq.n	80091f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009184:	4a27      	ldr	r2, [pc, #156]	@ (8009224 <HAL_DMA_Init+0x15c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d11a      	bne.n	80091c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800918a:	4b29      	ldr	r3, [pc, #164]	@ (8009230 <HAL_DMA_Init+0x168>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	f003 031c 	and.w	r3, r3, #28
 8009196:	210f      	movs	r1, #15
 8009198:	fa01 f303 	lsl.w	r3, r1, r3
 800919c:	43db      	mvns	r3, r3
 800919e:	4924      	ldr	r1, [pc, #144]	@ (8009230 <HAL_DMA_Init+0x168>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80091a4:	4b22      	ldr	r3, [pc, #136]	@ (8009230 <HAL_DMA_Init+0x168>)
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6859      	ldr	r1, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091b0:	f003 031c 	and.w	r3, r3, #28
 80091b4:	fa01 f303 	lsl.w	r3, r1, r3
 80091b8:	491d      	ldr	r1, [pc, #116]	@ (8009230 <HAL_DMA_Init+0x168>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	600b      	str	r3, [r1, #0]
 80091be:	e019      	b.n	80091f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80091c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009234 <HAL_DMA_Init+0x16c>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c8:	f003 031c 	and.w	r3, r3, #28
 80091cc:	210f      	movs	r1, #15
 80091ce:	fa01 f303 	lsl.w	r3, r1, r3
 80091d2:	43db      	mvns	r3, r3
 80091d4:	4917      	ldr	r1, [pc, #92]	@ (8009234 <HAL_DMA_Init+0x16c>)
 80091d6:	4013      	ands	r3, r2
 80091d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80091da:	4b16      	ldr	r3, [pc, #88]	@ (8009234 <HAL_DMA_Init+0x16c>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6859      	ldr	r1, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e6:	f003 031c 	and.w	r3, r3, #28
 80091ea:	fa01 f303 	lsl.w	r3, r1, r3
 80091ee:	4911      	ldr	r1, [pc, #68]	@ (8009234 <HAL_DMA_Init+0x16c>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	40020407 	.word	0x40020407
 800921c:	bffdfff8 	.word	0xbffdfff8
 8009220:	cccccccd 	.word	0xcccccccd
 8009224:	40020000 	.word	0x40020000
 8009228:	bffdfbf8 	.word	0xbffdfbf8
 800922c:	40020400 	.word	0x40020400
 8009230:	400200a8 	.word	0x400200a8
 8009234:	400204a8 	.word	0x400204a8

08009238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_DMA_Start_IT+0x20>
 8009254:	2302      	movs	r3, #2
 8009256:	e04b      	b.n	80092f0 <HAL_DMA_Start_IT+0xb8>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	d13a      	bne.n	80092e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0201 	bic.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f91e 	bl	80094d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929a:	2b00      	cmp	r3, #0
 800929c:	d008      	beq.n	80092b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 020e 	orr.w	r2, r2, #14
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	e00f      	b.n	80092d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0204 	bic.w	r2, r2, #4
 80092be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 020a 	orr.w	r2, r2, #10
 80092ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0201 	orr.w	r2, r2, #1
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	e005      	b.n	80092ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80092ea:	2302      	movs	r3, #2
 80092ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d008      	beq.n	8009322 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2204      	movs	r2, #4
 8009314:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e022      	b.n	8009368 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 020e 	bic.w	r2, r2, #14
 8009330:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0201 	bic.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009346:	f003 021c 	and.w	r2, r3, #28
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934e:	2101      	movs	r1, #1
 8009350:	fa01 f202 	lsl.w	r2, r1, r2
 8009354:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009390:	f003 031c 	and.w	r3, r3, #28
 8009394:	2204      	movs	r2, #4
 8009396:	409a      	lsls	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d026      	beq.n	80093ee <HAL_DMA_IRQHandler+0x7a>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d021      	beq.n	80093ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d107      	bne.n	80093c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0204 	bic.w	r2, r2, #4
 80093c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093cc:	f003 021c 	and.w	r2, r3, #28
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d4:	2104      	movs	r1, #4
 80093d6:	fa01 f202 	lsl.w	r2, r1, r2
 80093da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d071      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80093ec:	e06c      	b.n	80094c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	f003 031c 	and.w	r3, r3, #28
 80093f6:	2202      	movs	r2, #2
 80093f8:	409a      	lsls	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4013      	ands	r3, r2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d02e      	beq.n	8009460 <HAL_DMA_IRQHandler+0xec>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d029      	beq.n	8009460 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 020a 	bic.w	r2, r2, #10
 8009428:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009436:	f003 021c 	and.w	r2, r3, #28
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943e:	2102      	movs	r1, #2
 8009440:	fa01 f202 	lsl.w	r2, r1, r2
 8009444:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d038      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800945e:	e033      	b.n	80094c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009464:	f003 031c 	and.w	r3, r3, #28
 8009468:	2208      	movs	r2, #8
 800946a:	409a      	lsls	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4013      	ands	r3, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d02a      	beq.n	80094ca <HAL_DMA_IRQHandler+0x156>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0308 	and.w	r3, r3, #8
 800947a:	2b00      	cmp	r3, #0
 800947c:	d025      	beq.n	80094ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 020e 	bic.w	r2, r2, #14
 800948c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009492:	f003 021c 	and.w	r2, r3, #28
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949a:	2101      	movs	r1, #1
 800949c:	fa01 f202 	lsl.w	r2, r1, r2
 80094a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
}
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e4:	f003 021c 	and.w	r2, r3, #28
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ec:	2101      	movs	r1, #1
 80094ee:	fa01 f202 	lsl.w	r2, r1, r2
 80094f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	2b10      	cmp	r3, #16
 8009502:	d108      	bne.n	8009516 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009514:	e007      	b.n	8009526 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	60da      	str	r2, [r3, #12]
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
	...

08009534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009542:	e17f      	b.n	8009844 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	2101      	movs	r1, #1
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	fa01 f303 	lsl.w	r3, r1, r3
 8009550:	4013      	ands	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8171 	beq.w	800983e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f003 0303 	and.w	r3, r3, #3
 8009564:	2b01      	cmp	r3, #1
 8009566:	d005      	beq.n	8009574 <HAL_GPIO_Init+0x40>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d130      	bne.n	80095d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	2203      	movs	r2, #3
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	43db      	mvns	r3, r3
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4013      	ands	r3, r2
 800958a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	fa02 f303 	lsl.w	r3, r2, r3
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80095aa:	2201      	movs	r2, #1
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	43db      	mvns	r3, r3
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	4013      	ands	r3, r2
 80095b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	091b      	lsrs	r3, r3, #4
 80095c0:	f003 0201 	and.w	r2, r3, #1
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d118      	bne.n	8009614 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80095e8:	2201      	movs	r2, #1
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	43db      	mvns	r3, r3
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	4013      	ands	r3, r2
 80095f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0201 	and.w	r2, r3, #1
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	fa02 f303 	lsl.w	r3, r2, r3
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	2b03      	cmp	r3, #3
 800961e:	d017      	beq.n	8009650 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	2203      	movs	r2, #3
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	43db      	mvns	r3, r3
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4013      	ands	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	fa02 f303 	lsl.w	r3, r2, r3
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d123      	bne.n	80096a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	08da      	lsrs	r2, r3, #3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3208      	adds	r2, #8
 8009664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009668:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	220f      	movs	r2, #15
 8009674:	fa02 f303 	lsl.w	r3, r2, r3
 8009678:	43db      	mvns	r3, r3
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4013      	ands	r3, r2
 800967e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	fa02 f303 	lsl.w	r3, r2, r3
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	08da      	lsrs	r2, r3, #3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3208      	adds	r2, #8
 800969e:	6939      	ldr	r1, [r7, #16]
 80096a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	2203      	movs	r2, #3
 80096b0:	fa02 f303 	lsl.w	r3, r2, r3
 80096b4:	43db      	mvns	r3, r3
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	4013      	ands	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f003 0203 	and.w	r2, r3, #3
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	fa02 f303 	lsl.w	r3, r2, r3
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 80ac 	beq.w	800983e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096e6:	4b5f      	ldr	r3, [pc, #380]	@ (8009864 <HAL_GPIO_Init+0x330>)
 80096e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ea:	4a5e      	ldr	r2, [pc, #376]	@ (8009864 <HAL_GPIO_Init+0x330>)
 80096ec:	f043 0301 	orr.w	r3, r3, #1
 80096f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80096f2:	4b5c      	ldr	r3, [pc, #368]	@ (8009864 <HAL_GPIO_Init+0x330>)
 80096f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	60bb      	str	r3, [r7, #8]
 80096fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80096fe:	4a5a      	ldr	r2, [pc, #360]	@ (8009868 <HAL_GPIO_Init+0x334>)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	089b      	lsrs	r3, r3, #2
 8009704:	3302      	adds	r3, #2
 8009706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800970a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f003 0303 	and.w	r3, r3, #3
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	220f      	movs	r2, #15
 8009716:	fa02 f303 	lsl.w	r3, r2, r3
 800971a:	43db      	mvns	r3, r3
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4013      	ands	r3, r2
 8009720:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009728:	d025      	beq.n	8009776 <HAL_GPIO_Init+0x242>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a4f      	ldr	r2, [pc, #316]	@ (800986c <HAL_GPIO_Init+0x338>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d01f      	beq.n	8009772 <HAL_GPIO_Init+0x23e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a4e      	ldr	r2, [pc, #312]	@ (8009870 <HAL_GPIO_Init+0x33c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d019      	beq.n	800976e <HAL_GPIO_Init+0x23a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a4d      	ldr	r2, [pc, #308]	@ (8009874 <HAL_GPIO_Init+0x340>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d013      	beq.n	800976a <HAL_GPIO_Init+0x236>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a4c      	ldr	r2, [pc, #304]	@ (8009878 <HAL_GPIO_Init+0x344>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00d      	beq.n	8009766 <HAL_GPIO_Init+0x232>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a4b      	ldr	r2, [pc, #300]	@ (800987c <HAL_GPIO_Init+0x348>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d007      	beq.n	8009762 <HAL_GPIO_Init+0x22e>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a4a      	ldr	r2, [pc, #296]	@ (8009880 <HAL_GPIO_Init+0x34c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d101      	bne.n	800975e <HAL_GPIO_Init+0x22a>
 800975a:	2306      	movs	r3, #6
 800975c:	e00c      	b.n	8009778 <HAL_GPIO_Init+0x244>
 800975e:	2307      	movs	r3, #7
 8009760:	e00a      	b.n	8009778 <HAL_GPIO_Init+0x244>
 8009762:	2305      	movs	r3, #5
 8009764:	e008      	b.n	8009778 <HAL_GPIO_Init+0x244>
 8009766:	2304      	movs	r3, #4
 8009768:	e006      	b.n	8009778 <HAL_GPIO_Init+0x244>
 800976a:	2303      	movs	r3, #3
 800976c:	e004      	b.n	8009778 <HAL_GPIO_Init+0x244>
 800976e:	2302      	movs	r3, #2
 8009770:	e002      	b.n	8009778 <HAL_GPIO_Init+0x244>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <HAL_GPIO_Init+0x244>
 8009776:	2300      	movs	r3, #0
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	f002 0203 	and.w	r2, r2, #3
 800977e:	0092      	lsls	r2, r2, #2
 8009780:	4093      	lsls	r3, r2
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009788:	4937      	ldr	r1, [pc, #220]	@ (8009868 <HAL_GPIO_Init+0x334>)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	089b      	lsrs	r3, r3, #2
 800978e:	3302      	adds	r3, #2
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009796:	4b3b      	ldr	r3, [pc, #236]	@ (8009884 <HAL_GPIO_Init+0x350>)
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	43db      	mvns	r3, r3
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4013      	ands	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80097ba:	4a32      	ldr	r2, [pc, #200]	@ (8009884 <HAL_GPIO_Init+0x350>)
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80097c0:	4b30      	ldr	r3, [pc, #192]	@ (8009884 <HAL_GPIO_Init+0x350>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	43db      	mvns	r3, r3
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4013      	ands	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80097e4:	4a27      	ldr	r2, [pc, #156]	@ (8009884 <HAL_GPIO_Init+0x350>)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80097ea:	4b26      	ldr	r3, [pc, #152]	@ (8009884 <HAL_GPIO_Init+0x350>)
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	43db      	mvns	r3, r3
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4013      	ands	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4313      	orrs	r3, r2
 800980c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800980e:	4a1d      	ldr	r2, [pc, #116]	@ (8009884 <HAL_GPIO_Init+0x350>)
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009814:	4b1b      	ldr	r3, [pc, #108]	@ (8009884 <HAL_GPIO_Init+0x350>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	43db      	mvns	r3, r3
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4013      	ands	r3, r2
 8009822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009838:	4a12      	ldr	r2, [pc, #72]	@ (8009884 <HAL_GPIO_Init+0x350>)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	3301      	adds	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	fa22 f303 	lsr.w	r3, r2, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	f47f ae78 	bne.w	8009544 <HAL_GPIO_Init+0x10>
  }
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	40021000 	.word	0x40021000
 8009868:	40010000 	.word	0x40010000
 800986c:	48000400 	.word	0x48000400
 8009870:	48000800 	.word	0x48000800
 8009874:	48000c00 	.word	0x48000c00
 8009878:	48001000 	.word	0x48001000
 800987c:	48001400 	.word	0x48001400
 8009880:	48001800 	.word	0x48001800
 8009884:	40010400 	.word	0x40010400

08009888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
 8009894:	4613      	mov	r3, r2
 8009896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009898:	787b      	ldrb	r3, [r7, #1]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800989e:	887a      	ldrh	r2, [r7, #2]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80098a4:	e002      	b.n	80098ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e08d      	b.n	80099e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7fa f9a8 	bl	8003c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2224      	movs	r2, #36	@ 0x24
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0201 	bic.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d107      	bne.n	8009932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800992e:	609a      	str	r2, [r3, #8]
 8009930:	e006      	b.n	8009940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800993e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d108      	bne.n	800995a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	e007      	b.n	800996a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	6812      	ldr	r2, [r2, #0]
 8009974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800997c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800998c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	430a      	orrs	r2, r1
 80099a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	69d9      	ldr	r1, [r3, #28]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1a      	ldr	r2, [r3, #32]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0201 	orr.w	r2, r2, #1
 80099c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2220      	movs	r2, #32
 80099d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	607a      	str	r2, [r7, #4]
 80099fa:	461a      	mov	r2, r3
 80099fc:	460b      	mov	r3, r1
 80099fe:	817b      	strh	r3, [r7, #10]
 8009a00:	4613      	mov	r3, r2
 8009a02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	f040 80fd 	bne.w	8009c0c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d101      	bne.n	8009a20 <HAL_I2C_Master_Transmit+0x30>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e0f6      	b.n	8009c0e <HAL_I2C_Master_Transmit+0x21e>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a28:	f7fd fd80 	bl	800752c <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	2319      	movs	r3, #25
 8009a34:	2201      	movs	r2, #1
 8009a36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fa0a 	bl	8009e54 <I2C_WaitOnFlagUntilTimeout>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e0e1      	b.n	8009c0e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2221      	movs	r2, #33	@ 0x21
 8009a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2210      	movs	r2, #16
 8009a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	893a      	ldrh	r2, [r7, #8]
 8009a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	2bff      	cmp	r3, #255	@ 0xff
 8009a7a:	d906      	bls.n	8009a8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	22ff      	movs	r2, #255	@ 0xff
 8009a80:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009a82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e007      	b.n	8009a9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d024      	beq.n	8009aec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa6:	781a      	ldrb	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	3301      	adds	r3, #1
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	8979      	ldrh	r1, [r7, #10]
 8009ade:	4b4e      	ldr	r3, [pc, #312]	@ (8009c18 <HAL_I2C_Master_Transmit+0x228>)
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 fc05 	bl	800a2f4 <I2C_TransferConfig>
 8009aea:	e066      	b.n	8009bba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	8979      	ldrh	r1, [r7, #10]
 8009af4:	4b48      	ldr	r3, [pc, #288]	@ (8009c18 <HAL_I2C_Master_Transmit+0x228>)
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fbfa 	bl	800a2f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009b00:	e05b      	b.n	8009bba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	6a39      	ldr	r1, [r7, #32]
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 f9fd 	bl	8009f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e07b      	b.n	8009c0e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d034      	beq.n	8009bba <HAL_I2C_Master_Transmit+0x1ca>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d130      	bne.n	8009bba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2180      	movs	r1, #128	@ 0x80
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f976 	bl	8009e54 <I2C_WaitOnFlagUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e04d      	b.n	8009c0e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2bff      	cmp	r3, #255	@ 0xff
 8009b7a:	d90e      	bls.n	8009b9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	22ff      	movs	r2, #255	@ 0xff
 8009b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	8979      	ldrh	r1, [r7, #10]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fbae 	bl	800a2f4 <I2C_TransferConfig>
 8009b98:	e00f      	b.n	8009bba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	8979      	ldrh	r1, [r7, #10]
 8009bac:	2300      	movs	r3, #0
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fb9d 	bl	800a2f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d19e      	bne.n	8009b02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	6a39      	ldr	r1, [r7, #32]
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 f9e3 	bl	8009f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e01a      	b.n	8009c0e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6859      	ldr	r1, [r3, #4]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	4b0c      	ldr	r3, [pc, #48]	@ (8009c1c <HAL_I2C_Master_Transmit+0x22c>)
 8009bec:	400b      	ands	r3, r1
 8009bee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e000      	b.n	8009c0e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009c0c:	2302      	movs	r3, #2
  }
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	80002000 	.word	0x80002000
 8009c1c:	fe00e800 	.word	0xfe00e800

08009c20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	607a      	str	r2, [r7, #4]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	817b      	strh	r3, [r7, #10]
 8009c30:	4613      	mov	r3, r2
 8009c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	f040 80db 	bne.w	8009df8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_I2C_Master_Receive+0x30>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e0d4      	b.n	8009dfa <HAL_I2C_Master_Receive+0x1da>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c58:	f7fd fc68 	bl	800752c <HAL_GetTick>
 8009c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	2319      	movs	r3, #25
 8009c64:	2201      	movs	r2, #1
 8009c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f8f2 	bl	8009e54 <I2C_WaitOnFlagUntilTimeout>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e0bf      	b.n	8009dfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2222      	movs	r2, #34	@ 0x22
 8009c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2210      	movs	r2, #16
 8009c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	893a      	ldrh	r2, [r7, #8]
 8009c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	2bff      	cmp	r3, #255	@ 0xff
 8009caa:	d90e      	bls.n	8009cca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	8979      	ldrh	r1, [r7, #10]
 8009cba:	4b52      	ldr	r3, [pc, #328]	@ (8009e04 <HAL_I2C_Master_Receive+0x1e4>)
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 fb16 	bl	800a2f4 <I2C_TransferConfig>
 8009cc8:	e06d      	b.n	8009da6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	8979      	ldrh	r1, [r7, #10]
 8009cdc:	4b49      	ldr	r3, [pc, #292]	@ (8009e04 <HAL_I2C_Master_Receive+0x1e4>)
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fb05 	bl	800a2f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009cea:	e05c      	b.n	8009da6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	6a39      	ldr	r1, [r7, #32]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f993 	bl	800a01c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e07c      	b.n	8009dfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d034      	beq.n	8009da6 <HAL_I2C_Master_Receive+0x186>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d130      	bne.n	8009da6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2180      	movs	r1, #128	@ 0x80
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 f880 	bl	8009e54 <I2C_WaitOnFlagUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e04d      	b.n	8009dfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	2bff      	cmp	r3, #255	@ 0xff
 8009d66:	d90e      	bls.n	8009d86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	22ff      	movs	r2, #255	@ 0xff
 8009d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	8979      	ldrh	r1, [r7, #10]
 8009d76:	2300      	movs	r3, #0
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fab8 	bl	800a2f4 <I2C_TransferConfig>
 8009d84:	e00f      	b.n	8009da6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	8979      	ldrh	r1, [r7, #10]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 faa7 	bl	800a2f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d19d      	bne.n	8009cec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	6a39      	ldr	r1, [r7, #32]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f8ed 	bl	8009f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e01a      	b.n	8009dfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6859      	ldr	r1, [r3, #4]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009e08 <HAL_I2C_Master_Receive+0x1e8>)
 8009dd8:	400b      	ands	r3, r1
 8009dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	e000      	b.n	8009dfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009df8:	2302      	movs	r3, #2
  }
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	80002400 	.word	0x80002400
 8009e08:	fe00e800 	.word	0xfe00e800

08009e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d103      	bne.n	8009e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2200      	movs	r2, #0
 8009e28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d007      	beq.n	8009e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f042 0201 	orr.w	r2, r2, #1
 8009e46:	619a      	str	r2, [r3, #24]
  }
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e64:	e03b      	b.n	8009ede <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f962 	bl	800a134 <I2C_IsErrorOccurred>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e041      	b.n	8009efe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d02d      	beq.n	8009ede <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e82:	f7fd fb53 	bl	800752c <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d302      	bcc.n	8009e98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d122      	bne.n	8009ede <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	bf0c      	ite	eq
 8009ea8:	2301      	moveq	r3, #1
 8009eaa:	2300      	movne	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d113      	bne.n	8009ede <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eba:	f043 0220 	orr.w	r2, r3, #32
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e00f      	b.n	8009efe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	699a      	ldr	r2, [r3, #24]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	bf0c      	ite	eq
 8009eee:	2301      	moveq	r3, #1
 8009ef0:	2300      	movne	r3, #0
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d0b4      	beq.n	8009e66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f12:	e033      	b.n	8009f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 f90b 	bl	800a134 <I2C_IsErrorOccurred>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e031      	b.n	8009f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d025      	beq.n	8009f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f30:	f7fd fafc 	bl	800752c <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d302      	bcc.n	8009f46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d11a      	bne.n	8009f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d013      	beq.n	8009f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f58:	f043 0220 	orr.w	r2, r3, #32
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e007      	b.n	8009f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d1c4      	bne.n	8009f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fa0:	e02f      	b.n	800a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 f8c4 	bl	800a134 <I2C_IsErrorOccurred>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e02d      	b.n	800a012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb6:	f7fd fab9 	bl	800752c <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d302      	bcc.n	8009fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d11a      	bne.n	800a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d013      	beq.n	800a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fde:	f043 0220 	orr.w	r2, r3, #32
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e007      	b.n	800a012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d1c8      	bne.n	8009fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a02c:	e071      	b.n	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f87e 	bl	800a134 <I2C_IsErrorOccurred>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	f003 0320 	and.w	r3, r3, #32
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	d13b      	bne.n	800a0c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d138      	bne.n	800a0c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b04      	cmp	r3, #4
 800a062:	d105      	bne.n	800a070 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f003 0310 	and.w	r3, r3, #16
 800a07a:	2b10      	cmp	r3, #16
 800a07c:	d121      	bne.n	800a0c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2210      	movs	r2, #16
 800a084:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2204      	movs	r2, #4
 800a08a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2220      	movs	r2, #32
 800a092:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6859      	ldr	r1, [r3, #4]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4b24      	ldr	r3, [pc, #144]	@ (800a130 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800a0a0:	400b      	ands	r3, r1
 800a0a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	75fb      	strb	r3, [r7, #23]
 800a0c0:	e002      	b.n	800a0c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a0c8:	f7fd fa30 	bl	800752c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d302      	bcc.n	800a0de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d119      	bne.n	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d116      	bne.n	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d00f      	beq.n	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0f6:	f043 0220 	orr.w	r2, r3, #32
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2220      	movs	r2, #32
 800a102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d002      	beq.n	800a126 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d083      	beq.n	800a02e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a126:	7dfb      	ldrb	r3, [r7, #23]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	fe00e800 	.word	0xfe00e800

0800a134 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	@ 0x28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d068      	beq.n	800a232 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2210      	movs	r2, #16
 800a166:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a168:	e049      	b.n	800a1fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d045      	beq.n	800a1fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a172:	f7fd f9db 	bl	800752c <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <I2C_IsErrorOccurred+0x54>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d13a      	bne.n	800a1fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a192:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a19a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1aa:	d121      	bne.n	800a1f0 <I2C_IsErrorOccurred+0xbc>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1b2:	d01d      	beq.n	800a1f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a1b4:	7cfb      	ldrb	r3, [r7, #19]
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d01a      	beq.n	800a1f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a1ca:	f7fd f9af 	bl	800752c <HAL_GetTick>
 800a1ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1d0:	e00e      	b.n	800a1f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a1d2:	f7fd f9ab 	bl	800752c <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	2b19      	cmp	r3, #25
 800a1de:	d907      	bls.n	800a1f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	f043 0320 	orr.w	r3, r3, #32
 800a1e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a1ee:	e006      	b.n	800a1fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	d1e9      	bne.n	800a1d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	f003 0320 	and.w	r3, r3, #32
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d003      	beq.n	800a214 <I2C_IsErrorOccurred+0xe0>
 800a20c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0aa      	beq.n	800a16a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2220      	movs	r2, #32
 800a222:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	f043 0304 	orr.w	r3, r3, #4
 800a22a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00b      	beq.n	800a25c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00b      	beq.n	800a27e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	f043 0308 	orr.w	r3, r3, #8
 800a26c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a276:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00b      	beq.n	800a2a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	f043 0302 	orr.w	r3, r3, #2
 800a28e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d01c      	beq.n	800a2e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fdaf 	bl	8009e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6859      	ldr	r1, [r3, #4]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <I2C_IsErrorOccurred+0x1bc>)
 800a2ba:	400b      	ands	r3, r1
 800a2bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3728      	adds	r7, #40	@ 0x28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	fe00e800 	.word	0xfe00e800

0800a2f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	460b      	mov	r3, r1
 800a300:	817b      	strh	r3, [r7, #10]
 800a302:	4613      	mov	r3, r2
 800a304:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a306:	897b      	ldrh	r3, [r7, #10]
 800a308:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a30c:	7a7b      	ldrb	r3, [r7, #9]
 800a30e:	041b      	lsls	r3, r3, #16
 800a310:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a314:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a322:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	0d5b      	lsrs	r3, r3, #21
 800a32e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a332:	4b08      	ldr	r3, [pc, #32]	@ (800a354 <I2C_TransferConfig+0x60>)
 800a334:	430b      	orrs	r3, r1
 800a336:	43db      	mvns	r3, r3
 800a338:	ea02 0103 	and.w	r1, r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	430a      	orrs	r2, r1
 800a344:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a346:	bf00      	nop
 800a348:	371c      	adds	r7, #28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	03ff63ff 	.word	0x03ff63ff

0800a358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b20      	cmp	r3, #32
 800a36c:	d138      	bne.n	800a3e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a374:	2b01      	cmp	r3, #1
 800a376:	d101      	bne.n	800a37c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a378:	2302      	movs	r3, #2
 800a37a:	e032      	b.n	800a3e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2224      	movs	r2, #36	@ 0x24
 800a388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0201 	bic.w	r2, r2, #1
 800a39a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a3aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6819      	ldr	r1, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0201 	orr.w	r2, r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	e000      	b.n	800a3e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b085      	sub	sp, #20
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b20      	cmp	r3, #32
 800a402:	d139      	bne.n	800a478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a40e:	2302      	movs	r3, #2
 800a410:	e033      	b.n	800a47a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2224      	movs	r2, #36	@ 0x24
 800a41e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0201 	bic.w	r2, r2, #1
 800a430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0201 	orr.w	r2, r2, #1
 800a462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	e000      	b.n	800a47a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a478:	2302      	movs	r3, #2
  }
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
	...

0800a488 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a48c:	4b04      	ldr	r3, [pc, #16]	@ (800a4a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a494:	4618      	mov	r0, r3
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40007000 	.word	0x40007000

0800a4a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4b2:	d130      	bne.n	800a516 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a4b4:	4b23      	ldr	r3, [pc, #140]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c0:	d038      	beq.n	800a534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a4c2:	4b20      	ldr	r3, [pc, #128]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a4cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a4d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a548 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2232      	movs	r2, #50	@ 0x32
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a54c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a4de:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e2:	0c9b      	lsrs	r3, r3, #18
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a4e8:	e002      	b.n	800a4f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a4f0:	4b14      	ldr	r3, [pc, #80]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4fc:	d102      	bne.n	800a504 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f2      	bne.n	800a4ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a504:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a50c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a510:	d110      	bne.n	800a534 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e00f      	b.n	800a536 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a516:	4b0b      	ldr	r3, [pc, #44]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a51e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a522:	d007      	beq.n	800a534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a524:	4b07      	ldr	r3, [pc, #28]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a52c:	4a05      	ldr	r2, [pc, #20]	@ (800a544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a52e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a532:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	40007000 	.word	0x40007000
 800a548:	20000000 	.word	0x20000000
 800a54c:	431bde83 	.word	0x431bde83

0800a550 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a558:	f7fc ffe8 	bl	800752c <HAL_GetTick>
 800a55c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e063      	b.n	800a630 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10b      	bne.n	800a58c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7f9 fbb7 	bl	8003cf0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a582:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fa68 	bl	800aa5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	021a      	lsls	r2, r3, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2120      	movs	r1, #32
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fa60 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d131      	bne.n	800a626 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a5cc:	f023 0310 	bic.w	r3, r3, #16
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	6852      	ldr	r2, [r2, #4]
 800a5d4:	0611      	lsls	r1, r2, #24
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	68d2      	ldr	r2, [r2, #12]
 800a5da:	4311      	orrs	r1, r2
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6812      	ldr	r2, [r2, #0]
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	4b13      	ldr	r3, [pc, #76]	@ (800a638 <HAL_QSPI_Init+0xe8>)
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6912      	ldr	r2, [r2, #16]
 800a5f2:	0411      	lsls	r1, r2, #16
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	6952      	ldr	r2, [r2, #20]
 800a5f8:	4311      	orrs	r1, r2
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6992      	ldr	r2, [r2, #24]
 800a5fe:	4311      	orrs	r1, r2
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	430b      	orrs	r3, r1
 800a606:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800a62e:	7afb      	ldrb	r3, [r7, #11]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	ffe0f8fe 	.word	0xffe0f8fe

0800a63c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a648:	f7fc ff70 	bl	800752c <HAL_GetTick>
 800a64c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_QSPI_Command+0x22>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e048      	b.n	800a6f0 <HAL_QSPI_Command+0xb4>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d137      	bne.n	800a6e2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2200      	movs	r2, #0
 800a688:	2120      	movs	r1, #32
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f9f4 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a690:	4603      	mov	r3, r0
 800a692:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a694:	7dfb      	ldrb	r3, [r7, #23]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d125      	bne.n	800a6e6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a69a:	2200      	movs	r2, #0
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fa21 	bl	800aae6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d115      	bne.n	800a6d8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2102      	movs	r1, #2
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f9de 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10f      	bne.n	800a6e6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a6d6:	e006      	b.n	800a6e6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a6e0:	e001      	b.n	800a6e6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08a      	sub	sp, #40	@ 0x28
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a708:	f7fc ff10 	bl	800752c <HAL_GetTick>
 800a70c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3320      	adds	r3, #32
 800a714:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <HAL_QSPI_Transmit+0x2e>
 800a722:	2302      	movs	r3, #2
 800a724:	e07b      	b.n	800a81e <HAL_QSPI_Transmit+0x126>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b01      	cmp	r3, #1
 800a738:	d16a      	bne.n	800a810 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d05b      	beq.n	800a7fe <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2212      	movs	r2, #18
 800a74a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	695a      	ldr	r2, [r3, #20]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a77a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a77c:	e01b      	b.n	800a7b6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2201      	movs	r2, #1
 800a786:	2104      	movs	r1, #4
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f975 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a78e:	4603      	mov	r3, r0
 800a790:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a792:	7ffb      	ldrb	r3, [r7, #31]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d113      	bne.n	800a7c0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	781a      	ldrb	r2, [r3, #0]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	1e5a      	subs	r2, r3, #1
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1df      	bne.n	800a77e <HAL_QSPI_Transmit+0x86>
 800a7be:	e000      	b.n	800a7c2 <HAL_QSPI_Transmit+0xca>
          break;
 800a7c0:	bf00      	nop
      }

      if (status == HAL_OK)
 800a7c2:	7ffb      	ldrb	r3, [r7, #31]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d115      	bne.n	800a7f4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	2102      	movs	r1, #2
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f950 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a7dc:	7ffb      	ldrb	r3, [r7, #31]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d108      	bne.n	800a7f4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f8bd 	bl	800a96a <HAL_QSPI_Abort>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a7fc:	e00a      	b.n	800a814 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a802:	f043 0208 	orr.w	r2, r3, #8
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	77fb      	strb	r3, [r7, #31]
 800a80e:	e001      	b.n	800a814 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a810:	2302      	movs	r3, #2
 800a812:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800a81c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3720      	adds	r7, #32
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b08a      	sub	sp, #40	@ 0x28
 800a82a:	af02      	add	r7, sp, #8
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a836:	f7fc fe79 	bl	800752c <HAL_GetTick>
 800a83a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3320      	adds	r3, #32
 800a84a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <HAL_QSPI_Receive+0x36>
 800a858:	2302      	movs	r3, #2
 800a85a:	e082      	b.n	800a962 <HAL_QSPI_Receive+0x13c>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d171      	bne.n	800a954 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d062      	beq.n	800a942 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2222      	movs	r2, #34	@ 0x22
 800a880:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800a8b4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800a8be:	e01c      	b.n	800a8fa <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	2106      	movs	r1, #6
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f8d4 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800a8d4:	7ffb      	ldrb	r3, [r7, #31]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d114      	bne.n	800a904 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	7812      	ldrb	r2, [r2, #0]
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f4:	1e5a      	subs	r2, r3, #1
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1de      	bne.n	800a8c0 <HAL_QSPI_Receive+0x9a>
 800a902:	e000      	b.n	800a906 <HAL_QSPI_Receive+0xe0>
          break;
 800a904:	bf00      	nop
      }

      if (status == HAL_OK)
 800a906:	7ffb      	ldrb	r3, [r7, #31]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d115      	bne.n	800a938 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	2201      	movs	r2, #1
 800a914:	2102      	movs	r1, #2
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 f8ae 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800a920:	7ffb      	ldrb	r3, [r7, #31]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d108      	bne.n	800a938 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2202      	movs	r2, #2
 800a92c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f81b 	bl	800a96a <HAL_QSPI_Abort>
 800a934:	4603      	mov	r3, r0
 800a936:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a940:	e00a      	b.n	800a958 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a946:	f043 0208 	orr.w	r2, r3, #8
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	77fb      	strb	r3, [r7, #31]
 800a952:	e001      	b.n	800a958 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a954:	2302      	movs	r3, #2
 800a956:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800a960:	7ffb      	ldrb	r3, [r7, #31]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3720      	adds	r7, #32
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b086      	sub	sp, #24
 800a96e:	af02      	add	r7, sp, #8
 800a970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a976:	f7fc fdd9 	bl	800752c <HAL_GetTick>
 800a97a:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d062      	beq.n	800aa52 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0304 	and.w	r3, r3, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d017      	beq.n	800a9d2 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0204 	bic.w	r2, r2, #4
 800a9b0:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fc9e 	bl	80092f8 <HAL_DMA_Abort>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d005      	beq.n	800a9d2 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ca:	f043 0204 	orr.w	r2, r3, #4
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f003 0320 	and.w	r3, r3, #32
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d034      	beq.n	800aa4a <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0202 	orr.w	r2, r2, #2
 800a9ee:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2102      	movs	r1, #2
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f83b 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10e      	bne.n	800aa2a <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2202      	movs	r2, #2
 800aa12:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2120      	movs	r1, #32
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f829 	bl	800aa78 <QSPI_WaitFlagStateUntilTimeout>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d110      	bne.n	800aa52 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	695a      	ldr	r2, [r3, #20]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800aa3e:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800aa48:	e003      	b.n	800aa52 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aa88:	e01a      	b.n	800aac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa90:	d016      	beq.n	800aac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa92:	f7fc fd4b 	bl	800752c <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	69ba      	ldr	r2, [r7, #24]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d302      	bcc.n	800aaa8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10b      	bne.n	800aac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2204      	movs	r2, #4
 800aaac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aab4:	f043 0201 	orr.w	r2, r3, #1
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e00e      	b.n	800aade <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	4013      	ands	r3, r2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bf14      	ite	ne
 800aace:	2301      	movne	r3, #1
 800aad0:	2300      	moveq	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d1d6      	bne.n	800aa8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d009      	beq.n	800ab0e <QSPI_Config+0x28>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ab00:	d005      	beq.n	800ab0e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3a01      	subs	r2, #1
 800ab0c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 80c1 	beq.w	800ac9a <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d063      	beq.n	800abe8 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	6892      	ldr	r2, [r2, #8]
 800ab28:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d031      	beq.n	800ab96 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab40:	431a      	orrs	r2, r3
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab46:	431a      	orrs	r2, r3
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	049b      	lsls	r3, r3, #18
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	431a      	orrs	r2, r3
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	431a      	orrs	r2, r3
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	ea42 0103 	orr.w	r1, r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ab86:	f000 813f 	beq.w	800ae08 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	6852      	ldr	r2, [r2, #4]
 800ab92:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800ab94:	e138      	b.n	800ae08 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba4:	431a      	orrs	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abaa:	431a      	orrs	r2, r3
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	049b      	lsls	r3, r3, #18
 800abb2:	431a      	orrs	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	431a      	orrs	r2, r3
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	431a      	orrs	r2, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	431a      	orrs	r2, r3
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	431a      	orrs	r2, r3
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	ea42 0103 	orr.w	r1, r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	430a      	orrs	r2, r1
 800abdc:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2200      	movs	r2, #0
 800abe4:	619a      	str	r2, [r3, #24]
}
 800abe6:	e10f      	b.n	800ae08 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d02e      	beq.n	800ac4e <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf8:	431a      	orrs	r2, r3
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfe:	431a      	orrs	r2, r3
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	431a      	orrs	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	049b      	lsls	r3, r3, #18
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	431a      	orrs	r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	431a      	orrs	r2, r3
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	431a      	orrs	r2, r3
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	ea42 0103 	orr.w	r1, r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	430a      	orrs	r2, r1
 800ac36:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac3e:	f000 80e3 	beq.w	800ae08 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	6852      	ldr	r2, [r2, #4]
 800ac4a:	619a      	str	r2, [r3, #24]
}
 800ac4c:	e0dc      	b.n	800ae08 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac56:	431a      	orrs	r2, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac62:	431a      	orrs	r2, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	049b      	lsls	r3, r3, #18
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	431a      	orrs	r2, r3
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	431a      	orrs	r2, r3
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	ea42 0103 	orr.w	r1, r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2200      	movs	r2, #0
 800ac96:	619a      	str	r2, [r3, #24]
}
 800ac98:	e0b6      	b.n	800ae08 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d05d      	beq.n	800ad5e <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	6892      	ldr	r2, [r2, #8]
 800acaa:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d02e      	beq.n	800ad12 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	431a      	orrs	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acc2:	431a      	orrs	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc8:	431a      	orrs	r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	049b      	lsls	r3, r3, #18
 800acd0:	431a      	orrs	r2, r3
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	6a1b      	ldr	r3, [r3, #32]
 800acdc:	431a      	orrs	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	431a      	orrs	r2, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	431a      	orrs	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	ea42 0103 	orr.w	r1, r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ad02:	f000 8081 	beq.w	800ae08 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	6852      	ldr	r2, [r2, #4]
 800ad0e:	619a      	str	r2, [r3, #24]
}
 800ad10:	e07a      	b.n	800ae08 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad20:	431a      	orrs	r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad26:	431a      	orrs	r2, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	049b      	lsls	r3, r3, #18
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	431a      	orrs	r2, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	ea42 0103 	orr.w	r1, r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	619a      	str	r2, [r3, #24]
}
 800ad5c:	e054      	b.n	800ae08 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d02a      	beq.n	800adbc <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad74:	431a      	orrs	r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	049b      	lsls	r3, r3, #18
 800ad82:	431a      	orrs	r2, r3
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	431a      	orrs	r2, r3
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	431a      	orrs	r2, r3
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	ea42 0103 	orr.w	r1, r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800adae:	d02b      	beq.n	800ae08 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	6852      	ldr	r2, [r2, #4]
 800adb8:	619a      	str	r2, [r3, #24]
}
 800adba:	e025      	b.n	800ae08 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d021      	beq.n	800ae08 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adcc:	431a      	orrs	r2, r3
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add2:	431a      	orrs	r2, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add8:	431a      	orrs	r2, r3
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	049b      	lsls	r3, r3, #18
 800ade0:	431a      	orrs	r2, r3
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	431a      	orrs	r2, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	431a      	orrs	r2, r3
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	ea42 0103 	orr.w	r1, r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2200      	movs	r2, #0
 800ae06:	619a      	str	r2, [r3, #24]
}
 800ae08:	bf00      	nop
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e3ca      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae26:	4b97      	ldr	r3, [pc, #604]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f003 030c 	and.w	r3, r3, #12
 800ae2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae30:	4b94      	ldr	r3, [pc, #592]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0310 	and.w	r3, r3, #16
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 80e4 	beq.w	800b010 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d007      	beq.n	800ae5e <HAL_RCC_OscConfig+0x4a>
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b0c      	cmp	r3, #12
 800ae52:	f040 808b 	bne.w	800af6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	f040 8087 	bne.w	800af6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ae5e:	4b89      	ldr	r3, [pc, #548]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0302 	and.w	r3, r3, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d005      	beq.n	800ae76 <HAL_RCC_OscConfig+0x62>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e3a2      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1a      	ldr	r2, [r3, #32]
 800ae7a:	4b82      	ldr	r3, [pc, #520]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d004      	beq.n	800ae90 <HAL_RCC_OscConfig+0x7c>
 800ae86:	4b7f      	ldr	r3, [pc, #508]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae8e:	e005      	b.n	800ae9c <HAL_RCC_OscConfig+0x88>
 800ae90:	4b7c      	ldr	r3, [pc, #496]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800ae92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae96:	091b      	lsrs	r3, r3, #4
 800ae98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d223      	bcs.n	800aee8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fd55 	bl	800b954 <RCC_SetFlashLatencyFromMSIRange>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e383      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aeb4:	4b73      	ldr	r3, [pc, #460]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a72      	ldr	r2, [pc, #456]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aeba:	f043 0308 	orr.w	r3, r3, #8
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	4b70      	ldr	r3, [pc, #448]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	496d      	ldr	r1, [pc, #436]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aed2:	4b6c      	ldr	r3, [pc, #432]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	4968      	ldr	r1, [pc, #416]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	604b      	str	r3, [r1, #4]
 800aee6:	e025      	b.n	800af34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aee8:	4b66      	ldr	r3, [pc, #408]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a65      	ldr	r2, [pc, #404]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aeee:	f043 0308 	orr.w	r3, r3, #8
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	4b63      	ldr	r3, [pc, #396]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	4960      	ldr	r1, [pc, #384]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af02:	4313      	orrs	r3, r2
 800af04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af06:	4b5f      	ldr	r3, [pc, #380]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	495b      	ldr	r1, [pc, #364]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af16:	4313      	orrs	r3, r2
 800af18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d109      	bne.n	800af34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fd15 	bl	800b954 <RCC_SetFlashLatencyFromMSIRange>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e343      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800af34:	f000 fc4a 	bl	800b7cc <HAL_RCC_GetSysClockFreq>
 800af38:	4602      	mov	r2, r0
 800af3a:	4b52      	ldr	r3, [pc, #328]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	091b      	lsrs	r3, r3, #4
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	4950      	ldr	r1, [pc, #320]	@ (800b088 <HAL_RCC_OscConfig+0x274>)
 800af46:	5ccb      	ldrb	r3, [r1, r3]
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
 800af50:	4a4e      	ldr	r2, [pc, #312]	@ (800b08c <HAL_RCC_OscConfig+0x278>)
 800af52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800af54:	4b4e      	ldr	r3, [pc, #312]	@ (800b090 <HAL_RCC_OscConfig+0x27c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fc fa97 	bl	800748c <HAL_InitTick>
 800af5e:	4603      	mov	r3, r0
 800af60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d052      	beq.n	800b00e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	e327      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d032      	beq.n	800afda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800af74:	4b43      	ldr	r3, [pc, #268]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a42      	ldr	r2, [pc, #264]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af7a:	f043 0301 	orr.w	r3, r3, #1
 800af7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800af80:	f7fc fad4 	bl	800752c <HAL_GetTick>
 800af84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af86:	e008      	b.n	800af9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af88:	f7fc fad0 	bl	800752c <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	2b02      	cmp	r3, #2
 800af94:	d901      	bls.n	800af9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e310      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af9a:	4b3a      	ldr	r3, [pc, #232]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 0302 	and.w	r3, r3, #2
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0f0      	beq.n	800af88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800afa6:	4b37      	ldr	r3, [pc, #220]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a36      	ldr	r2, [pc, #216]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afac:	f043 0308 	orr.w	r3, r3, #8
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	4b34      	ldr	r3, [pc, #208]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	4931      	ldr	r1, [pc, #196]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800afc4:	4b2f      	ldr	r3, [pc, #188]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	021b      	lsls	r3, r3, #8
 800afd2:	492c      	ldr	r1, [pc, #176]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afd4:	4313      	orrs	r3, r2
 800afd6:	604b      	str	r3, [r1, #4]
 800afd8:	e01a      	b.n	800b010 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800afda:	4b2a      	ldr	r3, [pc, #168]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a29      	ldr	r2, [pc, #164]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800afe0:	f023 0301 	bic.w	r3, r3, #1
 800afe4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800afe6:	f7fc faa1 	bl	800752c <HAL_GetTick>
 800afea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800afec:	e008      	b.n	800b000 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800afee:	f7fc fa9d 	bl	800752c <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d901      	bls.n	800b000 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e2dd      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b000:	4b20      	ldr	r3, [pc, #128]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f0      	bne.n	800afee <HAL_RCC_OscConfig+0x1da>
 800b00c:	e000      	b.n	800b010 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b00e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d074      	beq.n	800b106 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	2b08      	cmp	r3, #8
 800b020:	d005      	beq.n	800b02e <HAL_RCC_OscConfig+0x21a>
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	2b0c      	cmp	r3, #12
 800b026:	d10e      	bne.n	800b046 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d10b      	bne.n	800b046 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b02e:	4b15      	ldr	r3, [pc, #84]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d064      	beq.n	800b104 <HAL_RCC_OscConfig+0x2f0>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d160      	bne.n	800b104 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e2ba      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b04e:	d106      	bne.n	800b05e <HAL_RCC_OscConfig+0x24a>
 800b050:	4b0c      	ldr	r3, [pc, #48]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a0b      	ldr	r2, [pc, #44]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	e026      	b.n	800b0ac <HAL_RCC_OscConfig+0x298>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b066:	d115      	bne.n	800b094 <HAL_RCC_OscConfig+0x280>
 800b068:	4b06      	ldr	r3, [pc, #24]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a05      	ldr	r2, [pc, #20]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b06e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	4b03      	ldr	r3, [pc, #12]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a02      	ldr	r2, [pc, #8]	@ (800b084 <HAL_RCC_OscConfig+0x270>)
 800b07a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	e014      	b.n	800b0ac <HAL_RCC_OscConfig+0x298>
 800b082:	bf00      	nop
 800b084:	40021000 	.word	0x40021000
 800b088:	0801106c 	.word	0x0801106c
 800b08c:	20000000 	.word	0x20000000
 800b090:	2000000c 	.word	0x2000000c
 800b094:	4ba0      	ldr	r3, [pc, #640]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a9f      	ldr	r2, [pc, #636]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b09a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	4b9d      	ldr	r3, [pc, #628]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a9c      	ldr	r2, [pc, #624]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b0a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b0aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d013      	beq.n	800b0dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b4:	f7fc fa3a 	bl	800752c <HAL_GetTick>
 800b0b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0bc:	f7fc fa36 	bl	800752c <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b64      	cmp	r3, #100	@ 0x64
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e276      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0ce:	4b92      	ldr	r3, [pc, #584]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0f0      	beq.n	800b0bc <HAL_RCC_OscConfig+0x2a8>
 800b0da:	e014      	b.n	800b106 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0dc:	f7fc fa26 	bl	800752c <HAL_GetTick>
 800b0e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0e4:	f7fc fa22 	bl	800752c <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b64      	cmp	r3, #100	@ 0x64
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e262      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0f6:	4b88      	ldr	r3, [pc, #544]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f0      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x2d0>
 800b102:	e000      	b.n	800b106 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d060      	beq.n	800b1d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b04      	cmp	r3, #4
 800b116:	d005      	beq.n	800b124 <HAL_RCC_OscConfig+0x310>
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	2b0c      	cmp	r3, #12
 800b11c:	d119      	bne.n	800b152 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d116      	bne.n	800b152 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b124:	4b7c      	ldr	r3, [pc, #496]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <HAL_RCC_OscConfig+0x328>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e23f      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b13c:	4b76      	ldr	r3, [pc, #472]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	061b      	lsls	r3, r3, #24
 800b14a:	4973      	ldr	r1, [pc, #460]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b14c:	4313      	orrs	r3, r2
 800b14e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b150:	e040      	b.n	800b1d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d023      	beq.n	800b1a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b15a:	4b6f      	ldr	r3, [pc, #444]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a6e      	ldr	r2, [pc, #440]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b166:	f7fc f9e1 	bl	800752c <HAL_GetTick>
 800b16a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b16c:	e008      	b.n	800b180 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b16e:	f7fc f9dd 	bl	800752c <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d901      	bls.n	800b180 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e21d      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b180:	4b65      	ldr	r3, [pc, #404]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d0f0      	beq.n	800b16e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b18c:	4b62      	ldr	r3, [pc, #392]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	061b      	lsls	r3, r3, #24
 800b19a:	495f      	ldr	r1, [pc, #380]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	604b      	str	r3, [r1, #4]
 800b1a0:	e018      	b.n	800b1d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1a2:	4b5d      	ldr	r3, [pc, #372]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a5c      	ldr	r2, [pc, #368]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b1a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ae:	f7fc f9bd 	bl	800752c <HAL_GetTick>
 800b1b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b1b4:	e008      	b.n	800b1c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1b6:	f7fc f9b9 	bl	800752c <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e1f9      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b1c8:	4b53      	ldr	r3, [pc, #332]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f0      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d03c      	beq.n	800b25a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01c      	beq.n	800b222 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1e8:	4b4b      	ldr	r3, [pc, #300]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1ee:	4a4a      	ldr	r2, [pc, #296]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b1f0:	f043 0301 	orr.w	r3, r3, #1
 800b1f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1f8:	f7fc f998 	bl	800752c <HAL_GetTick>
 800b1fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1fe:	e008      	b.n	800b212 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b200:	f7fc f994 	bl	800752c <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d901      	bls.n	800b212 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b20e:	2303      	movs	r3, #3
 800b210:	e1d4      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b212:	4b41      	ldr	r3, [pc, #260]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d0ef      	beq.n	800b200 <HAL_RCC_OscConfig+0x3ec>
 800b220:	e01b      	b.n	800b25a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b222:	4b3d      	ldr	r3, [pc, #244]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b228:	4a3b      	ldr	r2, [pc, #236]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b22a:	f023 0301 	bic.w	r3, r3, #1
 800b22e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b232:	f7fc f97b 	bl	800752c <HAL_GetTick>
 800b236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b238:	e008      	b.n	800b24c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b23a:	f7fc f977 	bl	800752c <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b02      	cmp	r3, #2
 800b246:	d901      	bls.n	800b24c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e1b7      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b24c:	4b32      	ldr	r3, [pc, #200]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1ef      	bne.n	800b23a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80a6 	beq.w	800b3b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b268:	2300      	movs	r3, #0
 800b26a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b26c:	4b2a      	ldr	r3, [pc, #168]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b26e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10d      	bne.n	800b294 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b278:	4b27      	ldr	r3, [pc, #156]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b27a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b27c:	4a26      	ldr	r2, [pc, #152]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b27e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b282:	6593      	str	r3, [r2, #88]	@ 0x58
 800b284:	4b24      	ldr	r3, [pc, #144]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b28c:	60bb      	str	r3, [r7, #8]
 800b28e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b290:	2301      	movs	r3, #1
 800b292:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b294:	4b21      	ldr	r3, [pc, #132]	@ (800b31c <HAL_RCC_OscConfig+0x508>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d118      	bne.n	800b2d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b31c <HAL_RCC_OscConfig+0x508>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a1d      	ldr	r2, [pc, #116]	@ (800b31c <HAL_RCC_OscConfig+0x508>)
 800b2a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2ac:	f7fc f93e 	bl	800752c <HAL_GetTick>
 800b2b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2b2:	e008      	b.n	800b2c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2b4:	f7fc f93a 	bl	800752c <HAL_GetTick>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d901      	bls.n	800b2c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e17a      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2c6:	4b15      	ldr	r3, [pc, #84]	@ (800b31c <HAL_RCC_OscConfig+0x508>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0f0      	beq.n	800b2b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d108      	bne.n	800b2ec <HAL_RCC_OscConfig+0x4d8>
 800b2da:	4b0f      	ldr	r3, [pc, #60]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e0:	4a0d      	ldr	r2, [pc, #52]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b2ea:	e029      	b.n	800b340 <HAL_RCC_OscConfig+0x52c>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	2b05      	cmp	r3, #5
 800b2f2:	d115      	bne.n	800b320 <HAL_RCC_OscConfig+0x50c>
 800b2f4:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2fa:	4a07      	ldr	r2, [pc, #28]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b2fc:	f043 0304 	orr.w	r3, r3, #4
 800b300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b304:	4b04      	ldr	r3, [pc, #16]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b30a:	4a03      	ldr	r2, [pc, #12]	@ (800b318 <HAL_RCC_OscConfig+0x504>)
 800b30c:	f043 0301 	orr.w	r3, r3, #1
 800b310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b314:	e014      	b.n	800b340 <HAL_RCC_OscConfig+0x52c>
 800b316:	bf00      	nop
 800b318:	40021000 	.word	0x40021000
 800b31c:	40007000 	.word	0x40007000
 800b320:	4b9c      	ldr	r3, [pc, #624]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b326:	4a9b      	ldr	r2, [pc, #620]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b328:	f023 0301 	bic.w	r3, r3, #1
 800b32c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b330:	4b98      	ldr	r3, [pc, #608]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b336:	4a97      	ldr	r2, [pc, #604]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b338:	f023 0304 	bic.w	r3, r3, #4
 800b33c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d016      	beq.n	800b376 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b348:	f7fc f8f0 	bl	800752c <HAL_GetTick>
 800b34c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b34e:	e00a      	b.n	800b366 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b350:	f7fc f8ec 	bl	800752c <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b35e:	4293      	cmp	r3, r2
 800b360:	d901      	bls.n	800b366 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	e12a      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b366:	4b8b      	ldr	r3, [pc, #556]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0ed      	beq.n	800b350 <HAL_RCC_OscConfig+0x53c>
 800b374:	e015      	b.n	800b3a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b376:	f7fc f8d9 	bl	800752c <HAL_GetTick>
 800b37a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b37c:	e00a      	b.n	800b394 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b37e:	f7fc f8d5 	bl	800752c <HAL_GetTick>
 800b382:	4602      	mov	r2, r0
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d901      	bls.n	800b394 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e113      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b394:	4b7f      	ldr	r3, [pc, #508]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1ed      	bne.n	800b37e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b3a2:	7ffb      	ldrb	r3, [r7, #31]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d105      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3a8:	4b7a      	ldr	r3, [pc, #488]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b3aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3ac:	4a79      	ldr	r2, [pc, #484]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b3ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 80fe 	beq.w	800b5ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	f040 80d0 	bne.w	800b568 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b3c8:	4b72      	ldr	r3, [pc, #456]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f003 0203 	and.w	r2, r3, #3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d130      	bne.n	800b43e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d127      	bne.n	800b43e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d11f      	bne.n	800b43e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b408:	2a07      	cmp	r2, #7
 800b40a:	bf14      	ite	ne
 800b40c:	2201      	movne	r2, #1
 800b40e:	2200      	moveq	r2, #0
 800b410:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b412:	4293      	cmp	r3, r2
 800b414:	d113      	bne.n	800b43e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b420:	085b      	lsrs	r3, r3, #1
 800b422:	3b01      	subs	r3, #1
 800b424:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b426:	429a      	cmp	r2, r3
 800b428:	d109      	bne.n	800b43e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b434:	085b      	lsrs	r3, r3, #1
 800b436:	3b01      	subs	r3, #1
 800b438:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d06e      	beq.n	800b51c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b0c      	cmp	r3, #12
 800b442:	d069      	beq.n	800b518 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b444:	4b53      	ldr	r3, [pc, #332]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d105      	bne.n	800b45c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b450:	4b50      	ldr	r3, [pc, #320]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e0ad      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b460:	4b4c      	ldr	r3, [pc, #304]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a4b      	ldr	r2, [pc, #300]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b46a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b46c:	f7fc f85e 	bl	800752c <HAL_GetTick>
 800b470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b472:	e008      	b.n	800b486 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b474:	f7fc f85a 	bl	800752c <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d901      	bls.n	800b486 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e09a      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b486:	4b43      	ldr	r3, [pc, #268]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1f0      	bne.n	800b474 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b492:	4b40      	ldr	r3, [pc, #256]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	4b40      	ldr	r3, [pc, #256]	@ (800b598 <HAL_RCC_OscConfig+0x784>)
 800b498:	4013      	ands	r3, r2
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b4a2:	3a01      	subs	r2, #1
 800b4a4:	0112      	lsls	r2, r2, #4
 800b4a6:	4311      	orrs	r1, r2
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b4ac:	0212      	lsls	r2, r2, #8
 800b4ae:	4311      	orrs	r1, r2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b4b4:	0852      	lsrs	r2, r2, #1
 800b4b6:	3a01      	subs	r2, #1
 800b4b8:	0552      	lsls	r2, r2, #21
 800b4ba:	4311      	orrs	r1, r2
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b4c0:	0852      	lsrs	r2, r2, #1
 800b4c2:	3a01      	subs	r2, #1
 800b4c4:	0652      	lsls	r2, r2, #25
 800b4c6:	4311      	orrs	r1, r2
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b4cc:	0912      	lsrs	r2, r2, #4
 800b4ce:	0452      	lsls	r2, r2, #17
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	4930      	ldr	r1, [pc, #192]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b4d8:	4b2e      	ldr	r3, [pc, #184]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a2d      	ldr	r2, [pc, #180]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b4de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b4e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4e4:	4b2b      	ldr	r3, [pc, #172]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	4a2a      	ldr	r2, [pc, #168]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b4ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b4ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b4f0:	f7fc f81c 	bl	800752c <HAL_GetTick>
 800b4f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4f6:	e008      	b.n	800b50a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4f8:	f7fc f818 	bl	800752c <HAL_GetTick>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d901      	bls.n	800b50a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e058      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b50a:	4b22      	ldr	r3, [pc, #136]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0f0      	beq.n	800b4f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b516:	e050      	b.n	800b5ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e04f      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b51c:	4b1d      	ldr	r3, [pc, #116]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b524:	2b00      	cmp	r3, #0
 800b526:	d148      	bne.n	800b5ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b528:	4b1a      	ldr	r3, [pc, #104]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a19      	ldr	r2, [pc, #100]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b52e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b532:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b534:	4b17      	ldr	r3, [pc, #92]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	4a16      	ldr	r2, [pc, #88]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b53a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b53e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b540:	f7fb fff4 	bl	800752c <HAL_GetTick>
 800b544:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b546:	e008      	b.n	800b55a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b548:	f7fb fff0 	bl	800752c <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	2b02      	cmp	r3, #2
 800b554:	d901      	bls.n	800b55a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e030      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b55a:	4b0e      	ldr	r3, [pc, #56]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0f0      	beq.n	800b548 <HAL_RCC_OscConfig+0x734>
 800b566:	e028      	b.n	800b5ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	2b0c      	cmp	r3, #12
 800b56c:	d023      	beq.n	800b5b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b56e:	4b09      	ldr	r3, [pc, #36]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a08      	ldr	r2, [pc, #32]	@ (800b594 <HAL_RCC_OscConfig+0x780>)
 800b574:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b57a:	f7fb ffd7 	bl	800752c <HAL_GetTick>
 800b57e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b580:	e00c      	b.n	800b59c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b582:	f7fb ffd3 	bl	800752c <HAL_GetTick>
 800b586:	4602      	mov	r2, r0
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d905      	bls.n	800b59c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e013      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
 800b594:	40021000 	.word	0x40021000
 800b598:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b59c:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <HAL_RCC_OscConfig+0x7b0>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1ec      	bne.n	800b582 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b5a8:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <HAL_RCC_OscConfig+0x7b0>)
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	4905      	ldr	r1, [pc, #20]	@ (800b5c4 <HAL_RCC_OscConfig+0x7b0>)
 800b5ae:	4b06      	ldr	r3, [pc, #24]	@ (800b5c8 <HAL_RCC_OscConfig+0x7b4>)
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	60cb      	str	r3, [r1, #12]
 800b5b4:	e001      	b.n	800b5ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	40021000 	.word	0x40021000
 800b5c8:	feeefffc 	.word	0xfeeefffc

0800b5cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e0e7      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b5e0:	4b75      	ldr	r3, [pc, #468]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d910      	bls.n	800b610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5ee:	4b72      	ldr	r3, [pc, #456]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f023 0207 	bic.w	r2, r3, #7
 800b5f6:	4970      	ldr	r1, [pc, #448]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5fe:	4b6e      	ldr	r3, [pc, #440]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d001      	beq.n	800b610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e0cf      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0302 	and.w	r3, r3, #2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d010      	beq.n	800b63e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	4b66      	ldr	r3, [pc, #408]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b628:	429a      	cmp	r2, r3
 800b62a:	d908      	bls.n	800b63e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b62c:	4b63      	ldr	r3, [pc, #396]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	4960      	ldr	r1, [pc, #384]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d04c      	beq.n	800b6e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d107      	bne.n	800b662 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b652:	4b5a      	ldr	r3, [pc, #360]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d121      	bne.n	800b6a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e0a6      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d107      	bne.n	800b67a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b66a:	4b54      	ldr	r3, [pc, #336]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d115      	bne.n	800b6a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e09a      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d107      	bne.n	800b692 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b682:	4b4e      	ldr	r3, [pc, #312]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0302 	and.w	r3, r3, #2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d109      	bne.n	800b6a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e08e      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b692:	4b4a      	ldr	r3, [pc, #296]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e086      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b6a2:	4b46      	ldr	r3, [pc, #280]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	f023 0203 	bic.w	r2, r3, #3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	4943      	ldr	r1, [pc, #268]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b4:	f7fb ff3a 	bl	800752c <HAL_GetTick>
 800b6b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6ba:	e00a      	b.n	800b6d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6bc:	f7fb ff36 	bl	800752c <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d901      	bls.n	800b6d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e06e      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6d2:	4b3a      	ldr	r3, [pc, #232]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f003 020c 	and.w	r2, r3, #12
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d1eb      	bne.n	800b6bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0302 	and.w	r3, r3, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d010      	beq.n	800b712 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	4b31      	ldr	r3, [pc, #196]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d208      	bcs.n	800b712 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b700:	4b2e      	ldr	r3, [pc, #184]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	492b      	ldr	r1, [pc, #172]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b70e:	4313      	orrs	r3, r2
 800b710:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b712:	4b29      	ldr	r3, [pc, #164]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d210      	bcs.n	800b742 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b720:	4b25      	ldr	r3, [pc, #148]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f023 0207 	bic.w	r2, r3, #7
 800b728:	4923      	ldr	r1, [pc, #140]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b730:	4b21      	ldr	r3, [pc, #132]	@ (800b7b8 <HAL_RCC_ClockConfig+0x1ec>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0307 	and.w	r3, r3, #7
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d001      	beq.n	800b742 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e036      	b.n	800b7b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0304 	and.w	r3, r3, #4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d008      	beq.n	800b760 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b74e:	4b1b      	ldr	r3, [pc, #108]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	4918      	ldr	r1, [pc, #96]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0308 	and.w	r3, r3, #8
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d009      	beq.n	800b780 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b76c:	4b13      	ldr	r3, [pc, #76]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	4910      	ldr	r1, [pc, #64]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b77c:	4313      	orrs	r3, r2
 800b77e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b780:	f000 f824 	bl	800b7cc <HAL_RCC_GetSysClockFreq>
 800b784:	4602      	mov	r2, r0
 800b786:	4b0d      	ldr	r3, [pc, #52]	@ (800b7bc <HAL_RCC_ClockConfig+0x1f0>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	091b      	lsrs	r3, r3, #4
 800b78c:	f003 030f 	and.w	r3, r3, #15
 800b790:	490b      	ldr	r1, [pc, #44]	@ (800b7c0 <HAL_RCC_ClockConfig+0x1f4>)
 800b792:	5ccb      	ldrb	r3, [r1, r3]
 800b794:	f003 031f 	and.w	r3, r3, #31
 800b798:	fa22 f303 	lsr.w	r3, r2, r3
 800b79c:	4a09      	ldr	r2, [pc, #36]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f8>)
 800b79e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b7a0:	4b09      	ldr	r3, [pc, #36]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1fc>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fb fe71 	bl	800748c <HAL_InitTick>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	72fb      	strb	r3, [r7, #11]

  return status;
 800b7ae:	7afb      	ldrb	r3, [r7, #11]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	40022000 	.word	0x40022000
 800b7bc:	40021000 	.word	0x40021000
 800b7c0:	0801106c 	.word	0x0801106c
 800b7c4:	20000000 	.word	0x20000000
 800b7c8:	2000000c 	.word	0x2000000c

0800b7cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b089      	sub	sp, #36	@ 0x24
 800b7d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61fb      	str	r3, [r7, #28]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7da:	4b3e      	ldr	r3, [pc, #248]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f003 030c 	and.w	r3, r3, #12
 800b7e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7e4:	4b3b      	ldr	r3, [pc, #236]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f003 0303 	and.w	r3, r3, #3
 800b7ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d005      	beq.n	800b800 <HAL_RCC_GetSysClockFreq+0x34>
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	2b0c      	cmp	r3, #12
 800b7f8:	d121      	bne.n	800b83e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d11e      	bne.n	800b83e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b800:	4b34      	ldr	r3, [pc, #208]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0308 	and.w	r3, r3, #8
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d107      	bne.n	800b81c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b80c:	4b31      	ldr	r3, [pc, #196]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b80e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	61fb      	str	r3, [r7, #28]
 800b81a:	e005      	b.n	800b828 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b81c:	4b2d      	ldr	r3, [pc, #180]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	091b      	lsrs	r3, r3, #4
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b828:	4a2b      	ldr	r2, [pc, #172]	@ (800b8d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b830:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10d      	bne.n	800b854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b83c:	e00a      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b04      	cmp	r3, #4
 800b842:	d102      	bne.n	800b84a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b844:	4b25      	ldr	r3, [pc, #148]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0x110>)
 800b846:	61bb      	str	r3, [r7, #24]
 800b848:	e004      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2b08      	cmp	r3, #8
 800b84e:	d101      	bne.n	800b854 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b850:	4b23      	ldr	r3, [pc, #140]	@ (800b8e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b852:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	2b0c      	cmp	r3, #12
 800b858:	d134      	bne.n	800b8c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b85a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	f003 0303 	and.w	r3, r3, #3
 800b862:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d003      	beq.n	800b872 <HAL_RCC_GetSysClockFreq+0xa6>
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d003      	beq.n	800b878 <HAL_RCC_GetSysClockFreq+0xac>
 800b870:	e005      	b.n	800b87e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b872:	4b1a      	ldr	r3, [pc, #104]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0x110>)
 800b874:	617b      	str	r3, [r7, #20]
      break;
 800b876:	e005      	b.n	800b884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b878:	4b19      	ldr	r3, [pc, #100]	@ (800b8e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b87a:	617b      	str	r3, [r7, #20]
      break;
 800b87c:	e002      	b.n	800b884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	617b      	str	r3, [r7, #20]
      break;
 800b882:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b884:	4b13      	ldr	r3, [pc, #76]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	091b      	lsrs	r3, r3, #4
 800b88a:	f003 0307 	and.w	r3, r3, #7
 800b88e:	3301      	adds	r3, #1
 800b890:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b892:	4b10      	ldr	r3, [pc, #64]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	0a1b      	lsrs	r3, r3, #8
 800b898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	fb03 f202 	mul.w	r2, r3, r2
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	0e5b      	lsrs	r3, r3, #25
 800b8b0:	f003 0303 	and.w	r3, r3, #3
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b8c4:	69bb      	ldr	r3, [r7, #24]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3724      	adds	r7, #36	@ 0x24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	40021000 	.word	0x40021000
 800b8d8:	08011084 	.word	0x08011084
 800b8dc:	00f42400 	.word	0x00f42400
 800b8e0:	007a1200 	.word	0x007a1200

0800b8e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8e8:	4b03      	ldr	r3, [pc, #12]	@ (800b8f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	20000000 	.word	0x20000000

0800b8fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b900:	f7ff fff0 	bl	800b8e4 <HAL_RCC_GetHCLKFreq>
 800b904:	4602      	mov	r2, r0
 800b906:	4b06      	ldr	r3, [pc, #24]	@ (800b920 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	0a1b      	lsrs	r3, r3, #8
 800b90c:	f003 0307 	and.w	r3, r3, #7
 800b910:	4904      	ldr	r1, [pc, #16]	@ (800b924 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b912:	5ccb      	ldrb	r3, [r1, r3]
 800b914:	f003 031f 	and.w	r3, r3, #31
 800b918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	40021000 	.word	0x40021000
 800b924:	0801107c 	.word	0x0801107c

0800b928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b92c:	f7ff ffda 	bl	800b8e4 <HAL_RCC_GetHCLKFreq>
 800b930:	4602      	mov	r2, r0
 800b932:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	0adb      	lsrs	r3, r3, #11
 800b938:	f003 0307 	and.w	r3, r3, #7
 800b93c:	4904      	ldr	r1, [pc, #16]	@ (800b950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b93e:	5ccb      	ldrb	r3, [r1, r3]
 800b940:	f003 031f 	and.w	r3, r3, #31
 800b944:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b948:	4618      	mov	r0, r3
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40021000 	.word	0x40021000
 800b950:	0801107c 	.word	0x0801107c

0800b954 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b95c:	2300      	movs	r3, #0
 800b95e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b960:	4b2a      	ldr	r3, [pc, #168]	@ (800ba0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b96c:	f7fe fd8c 	bl	800a488 <HAL_PWREx_GetVoltageRange>
 800b970:	6178      	str	r0, [r7, #20]
 800b972:	e014      	b.n	800b99e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b974:	4b25      	ldr	r3, [pc, #148]	@ (800ba0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b978:	4a24      	ldr	r2, [pc, #144]	@ (800ba0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b97a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b97e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b980:	4b22      	ldr	r3, [pc, #136]	@ (800ba0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b98c:	f7fe fd7c 	bl	800a488 <HAL_PWREx_GetVoltageRange>
 800b990:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b992:	4b1e      	ldr	r3, [pc, #120]	@ (800ba0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b996:	4a1d      	ldr	r2, [pc, #116]	@ (800ba0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b99c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9a4:	d10b      	bne.n	800b9be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b80      	cmp	r3, #128	@ 0x80
 800b9aa:	d919      	bls.n	800b9e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2ba0      	cmp	r3, #160	@ 0xa0
 800b9b0:	d902      	bls.n	800b9b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	613b      	str	r3, [r7, #16]
 800b9b6:	e013      	b.n	800b9e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	613b      	str	r3, [r7, #16]
 800b9bc:	e010      	b.n	800b9e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b80      	cmp	r3, #128	@ 0x80
 800b9c2:	d902      	bls.n	800b9ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	613b      	str	r3, [r7, #16]
 800b9c8:	e00a      	b.n	800b9e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b80      	cmp	r3, #128	@ 0x80
 800b9ce:	d102      	bne.n	800b9d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	613b      	str	r3, [r7, #16]
 800b9d4:	e004      	b.n	800b9e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b70      	cmp	r3, #112	@ 0x70
 800b9da:	d101      	bne.n	800b9e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b9dc:	2301      	movs	r3, #1
 800b9de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f023 0207 	bic.w	r2, r3, #7
 800b9e8:	4909      	ldr	r1, [pc, #36]	@ (800ba10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ba10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d001      	beq.n	800ba02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e000      	b.n	800ba04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	40021000 	.word	0x40021000
 800ba10:	40022000 	.word	0x40022000

0800ba14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba20:	2300      	movs	r3, #0
 800ba22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d041      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba38:	d02a      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ba3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba3e:	d824      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba44:	d008      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ba46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba4a:	d81e      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00a      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ba50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba54:	d010      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ba56:	e018      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ba58:	4b86      	ldr	r3, [pc, #536]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	4a85      	ldr	r2, [pc, #532]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba64:	e015      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3304      	adds	r3, #4
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fabb 	bl	800bfe8 <RCCEx_PLLSAI1_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba76:	e00c      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3320      	adds	r3, #32
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 fba6 	bl	800c1d0 <RCCEx_PLLSAI2_Config>
 800ba84:	4603      	mov	r3, r0
 800ba86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ba88:	e003      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	74fb      	strb	r3, [r7, #19]
      break;
 800ba8e:	e000      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ba90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba92:	7cfb      	ldrb	r3, [r7, #19]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10b      	bne.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba98:	4b76      	ldr	r3, [pc, #472]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baa6:	4973      	ldr	r1, [pc, #460]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800baa8:	4313      	orrs	r3, r2
 800baaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800baae:	e001      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab0:	7cfb      	ldrb	r3, [r7, #19]
 800bab2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d041      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bac4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bac8:	d02a      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800baca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bace:	d824      	bhi.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bad4:	d008      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bada:	d81e      	bhi.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00a      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800bae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bae4:	d010      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800bae6:	e018      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bae8:	4b62      	ldr	r3, [pc, #392]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	4a61      	ldr	r2, [pc, #388]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800baee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800baf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800baf4:	e015      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3304      	adds	r3, #4
 800bafa:	2100      	movs	r1, #0
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fa73 	bl	800bfe8 <RCCEx_PLLSAI1_Config>
 800bb02:	4603      	mov	r3, r0
 800bb04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb06:	e00c      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3320      	adds	r3, #32
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fb5e 	bl	800c1d0 <RCCEx_PLLSAI2_Config>
 800bb14:	4603      	mov	r3, r0
 800bb16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb18:	e003      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	74fb      	strb	r3, [r7, #19]
      break;
 800bb1e:	e000      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800bb20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb22:	7cfb      	ldrb	r3, [r7, #19]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bb28:	4b52      	ldr	r3, [pc, #328]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb36:	494f      	ldr	r1, [pc, #316]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800bb3e:	e001      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb40:	7cfb      	ldrb	r3, [r7, #19]
 800bb42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80a0 	beq.w	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb52:	2300      	movs	r3, #0
 800bb54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bb56:	4b47      	ldr	r3, [pc, #284]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800bb62:	2301      	movs	r3, #1
 800bb64:	e000      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800bb66:	2300      	movs	r3, #0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00d      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb6c:	4b41      	ldr	r3, [pc, #260]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb70:	4a40      	ldr	r2, [pc, #256]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb76:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb78:	4b3e      	ldr	r3, [pc, #248]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb80:	60bb      	str	r3, [r7, #8]
 800bb82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb84:	2301      	movs	r3, #1
 800bb86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb88:	4b3b      	ldr	r3, [pc, #236]	@ (800bc78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a3a      	ldr	r2, [pc, #232]	@ (800bc78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bb8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb94:	f7fb fcca 	bl	800752c <HAL_GetTick>
 800bb98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bb9a:	e009      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb9c:	f7fb fcc6 	bl	800752c <HAL_GetTick>
 800bba0:	4602      	mov	r2, r0
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d902      	bls.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	74fb      	strb	r3, [r7, #19]
        break;
 800bbae:	e005      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bbb0:	4b31      	ldr	r3, [pc, #196]	@ (800bc78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d0ef      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800bbbc:	7cfb      	ldrb	r3, [r7, #19]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d15c      	bne.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bbc2:	4b2c      	ldr	r3, [pc, #176]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d01f      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d019      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bbe0:	4b24      	ldr	r3, [pc, #144]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bbec:	4b21      	ldr	r3, [pc, #132]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbf2:	4a20      	ldr	r2, [pc, #128]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bbfc:	4b1d      	ldr	r3, [pc, #116]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bbfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc02:	4a1c      	ldr	r2, [pc, #112]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc0c:	4a19      	ldr	r2, [pc, #100]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d016      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc1e:	f7fb fc85 	bl	800752c <HAL_GetTick>
 800bc22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc24:	e00b      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc26:	f7fb fc81 	bl	800752c <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d902      	bls.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	74fb      	strb	r3, [r7, #19]
            break;
 800bc3c:	e006      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d0ec      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800bc4c:	7cfb      	ldrb	r3, [r7, #19]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10c      	bne.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc52:	4b08      	ldr	r3, [pc, #32]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc62:	4904      	ldr	r1, [pc, #16]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bc6a:	e009      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc6c:	7cfb      	ldrb	r3, [r7, #19]
 800bc6e:	74bb      	strb	r3, [r7, #18]
 800bc70:	e006      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800bc72:	bf00      	nop
 800bc74:	40021000 	.word	0x40021000
 800bc78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7c:	7cfb      	ldrb	r3, [r7, #19]
 800bc7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc80:	7c7b      	ldrb	r3, [r7, #17]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d105      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc86:	4b9e      	ldr	r3, [pc, #632]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc8a:	4a9d      	ldr	r2, [pc, #628]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc9e:	4b98      	ldr	r3, [pc, #608]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bca4:	f023 0203 	bic.w	r2, r3, #3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcac:	4994      	ldr	r1, [pc, #592]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0302 	and.w	r3, r3, #2
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00a      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bcc0:	4b8f      	ldr	r3, [pc, #572]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcc6:	f023 020c 	bic.w	r2, r3, #12
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcce:	498c      	ldr	r1, [pc, #560]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bce2:	4b87      	ldr	r3, [pc, #540]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bce8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf0:	4983      	ldr	r1, [pc, #524]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f003 0308 	and.w	r3, r3, #8
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00a      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd04:	4b7e      	ldr	r3, [pc, #504]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd12:	497b      	ldr	r1, [pc, #492]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0310 	and.w	r3, r3, #16
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd26:	4b76      	ldr	r3, [pc, #472]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd34:	4972      	ldr	r1, [pc, #456]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd36:	4313      	orrs	r3, r2
 800bd38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0320 	and.w	r3, r3, #32
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00a      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd48:	4b6d      	ldr	r3, [pc, #436]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd56:	496a      	ldr	r1, [pc, #424]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd6a:	4b65      	ldr	r3, [pc, #404]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd78:	4961      	ldr	r1, [pc, #388]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00a      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd8c:	4b5c      	ldr	r3, [pc, #368]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd9a:	4959      	ldr	r1, [pc, #356]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdae:	4b54      	ldr	r3, [pc, #336]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdbc:	4950      	ldr	r1, [pc, #320]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00a      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bdd0:	4b4b      	ldr	r3, [pc, #300]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdde:	4948      	ldr	r1, [pc, #288]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bdf2:	4b43      	ldr	r3, [pc, #268]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be00:	493f      	ldr	r1, [pc, #252]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be02:	4313      	orrs	r3, r2
 800be04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d028      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be14:	4b3a      	ldr	r3, [pc, #232]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be22:	4937      	ldr	r1, [pc, #220]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be24:	4313      	orrs	r3, r2
 800be26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be32:	d106      	bne.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be34:	4b32      	ldr	r3, [pc, #200]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	4a31      	ldr	r2, [pc, #196]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be3e:	60d3      	str	r3, [r2, #12]
 800be40:	e011      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be4a:	d10c      	bne.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3304      	adds	r3, #4
 800be50:	2101      	movs	r1, #1
 800be52:	4618      	mov	r0, r3
 800be54:	f000 f8c8 	bl	800bfe8 <RCCEx_PLLSAI1_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800be5c:	7cfb      	ldrb	r3, [r7, #19]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800be62:	7cfb      	ldrb	r3, [r7, #19]
 800be64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d028      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800be72:	4b23      	ldr	r3, [pc, #140]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be80:	491f      	ldr	r1, [pc, #124]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be82:	4313      	orrs	r3, r2
 800be84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be90:	d106      	bne.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be92:	4b1b      	ldr	r3, [pc, #108]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	4a1a      	ldr	r2, [pc, #104]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be9c:	60d3      	str	r3, [r2, #12]
 800be9e:	e011      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bea8:	d10c      	bne.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3304      	adds	r3, #4
 800beae:	2101      	movs	r1, #1
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 f899 	bl	800bfe8 <RCCEx_PLLSAI1_Config>
 800beb6:	4603      	mov	r3, r0
 800beb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800beba:	7cfb      	ldrb	r3, [r7, #19]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800bec0:	7cfb      	ldrb	r3, [r7, #19]
 800bec2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d02b      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bed0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bede:	4908      	ldr	r1, [pc, #32]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bee0:	4313      	orrs	r3, r2
 800bee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800beea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beee:	d109      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef0:	4b03      	ldr	r3, [pc, #12]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	4a02      	ldr	r2, [pc, #8]	@ (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800befa:	60d3      	str	r3, [r2, #12]
 800befc:	e014      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800befe:	bf00      	nop
 800bf00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf0c:	d10c      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3304      	adds	r3, #4
 800bf12:	2101      	movs	r1, #1
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 f867 	bl	800bfe8 <RCCEx_PLLSAI1_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf1e:	7cfb      	ldrb	r3, [r7, #19]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800bf24:	7cfb      	ldrb	r3, [r7, #19]
 800bf26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d02f      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf34:	4b2b      	ldr	r3, [pc, #172]	@ (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bf36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf42:	4928      	ldr	r1, [pc, #160]	@ (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf52:	d10d      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3304      	adds	r3, #4
 800bf58:	2102      	movs	r1, #2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 f844 	bl	800bfe8 <RCCEx_PLLSAI1_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf64:	7cfb      	ldrb	r3, [r7, #19]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d014      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800bf6a:	7cfb      	ldrb	r3, [r7, #19]
 800bf6c:	74bb      	strb	r3, [r7, #18]
 800bf6e:	e011      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf78:	d10c      	bne.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3320      	adds	r3, #32
 800bf7e:	2102      	movs	r1, #2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 f925 	bl	800c1d0 <RCCEx_PLLSAI2_Config>
 800bf86:	4603      	mov	r3, r0
 800bf88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bf8a:	7cfb      	ldrb	r3, [r7, #19]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800bf90:	7cfb      	ldrb	r3, [r7, #19]
 800bf92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00a      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfa0:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bfa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfa6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfae:	490d      	ldr	r1, [pc, #52]	@ (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfc2:	4b08      	ldr	r3, [pc, #32]	@ (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfd2:	4904      	ldr	r1, [pc, #16]	@ (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bfda:	7cbb      	ldrb	r3, [r7, #18]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	40021000 	.word	0x40021000

0800bfe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bff2:	2300      	movs	r3, #0
 800bff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bff6:	4b75      	ldr	r3, [pc, #468]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	f003 0303 	and.w	r3, r3, #3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d018      	beq.n	800c034 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c002:	4b72      	ldr	r3, [pc, #456]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	f003 0203 	and.w	r2, r3, #3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d10d      	bne.n	800c02e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
       ||
 800c016:	2b00      	cmp	r3, #0
 800c018:	d009      	beq.n	800c02e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c01a:	4b6c      	ldr	r3, [pc, #432]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	091b      	lsrs	r3, r3, #4
 800c020:	f003 0307 	and.w	r3, r3, #7
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
       ||
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d047      	beq.n	800c0be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	73fb      	strb	r3, [r7, #15]
 800c032:	e044      	b.n	800c0be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d018      	beq.n	800c06e <RCCEx_PLLSAI1_Config+0x86>
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d825      	bhi.n	800c08c <RCCEx_PLLSAI1_Config+0xa4>
 800c040:	2b01      	cmp	r3, #1
 800c042:	d002      	beq.n	800c04a <RCCEx_PLLSAI1_Config+0x62>
 800c044:	2b02      	cmp	r3, #2
 800c046:	d009      	beq.n	800c05c <RCCEx_PLLSAI1_Config+0x74>
 800c048:	e020      	b.n	800c08c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c04a:	4b60      	ldr	r3, [pc, #384]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b00      	cmp	r3, #0
 800c054:	d11d      	bne.n	800c092 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c05a:	e01a      	b.n	800c092 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c05c:	4b5b      	ldr	r3, [pc, #364]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c064:	2b00      	cmp	r3, #0
 800c066:	d116      	bne.n	800c096 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c06c:	e013      	b.n	800c096 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c06e:	4b57      	ldr	r3, [pc, #348]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10f      	bne.n	800c09a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c07a:	4b54      	ldr	r3, [pc, #336]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c082:	2b00      	cmp	r3, #0
 800c084:	d109      	bne.n	800c09a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c08a:	e006      	b.n	800c09a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	73fb      	strb	r3, [r7, #15]
      break;
 800c090:	e004      	b.n	800c09c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c092:	bf00      	nop
 800c094:	e002      	b.n	800c09c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c096:	bf00      	nop
 800c098:	e000      	b.n	800c09c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c09a:	bf00      	nop
    }

    if(status == HAL_OK)
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10d      	bne.n	800c0be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c0a2:	4b4a      	ldr	r3, [pc, #296]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6819      	ldr	r1, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	430b      	orrs	r3, r1
 800c0b8:	4944      	ldr	r1, [pc, #272]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d17d      	bne.n	800c1c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c0c4:	4b41      	ldr	r3, [pc, #260]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a40      	ldr	r2, [pc, #256]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c0ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0d0:	f7fb fa2c 	bl	800752c <HAL_GetTick>
 800c0d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c0d6:	e009      	b.n	800c0ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c0d8:	f7fb fa28 	bl	800752c <HAL_GetTick>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d902      	bls.n	800c0ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	73fb      	strb	r3, [r7, #15]
        break;
 800c0ea:	e005      	b.n	800c0f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c0ec:	4b37      	ldr	r3, [pc, #220]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1ef      	bne.n	800c0d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d160      	bne.n	800c1c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d111      	bne.n	800c128 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c104:	4b31      	ldr	r3, [pc, #196]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800c10c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	6892      	ldr	r2, [r2, #8]
 800c114:	0211      	lsls	r1, r2, #8
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	68d2      	ldr	r2, [r2, #12]
 800c11a:	0912      	lsrs	r2, r2, #4
 800c11c:	0452      	lsls	r2, r2, #17
 800c11e:	430a      	orrs	r2, r1
 800c120:	492a      	ldr	r1, [pc, #168]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c122:	4313      	orrs	r3, r2
 800c124:	610b      	str	r3, [r1, #16]
 800c126:	e027      	b.n	800c178 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d112      	bne.n	800c154 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c12e:	4b27      	ldr	r3, [pc, #156]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c136:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6892      	ldr	r2, [r2, #8]
 800c13e:	0211      	lsls	r1, r2, #8
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	6912      	ldr	r2, [r2, #16]
 800c144:	0852      	lsrs	r2, r2, #1
 800c146:	3a01      	subs	r2, #1
 800c148:	0552      	lsls	r2, r2, #21
 800c14a:	430a      	orrs	r2, r1
 800c14c:	491f      	ldr	r1, [pc, #124]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c14e:	4313      	orrs	r3, r2
 800c150:	610b      	str	r3, [r1, #16]
 800c152:	e011      	b.n	800c178 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c154:	4b1d      	ldr	r3, [pc, #116]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c15c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	6892      	ldr	r2, [r2, #8]
 800c164:	0211      	lsls	r1, r2, #8
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	6952      	ldr	r2, [r2, #20]
 800c16a:	0852      	lsrs	r2, r2, #1
 800c16c:	3a01      	subs	r2, #1
 800c16e:	0652      	lsls	r2, r2, #25
 800c170:	430a      	orrs	r2, r1
 800c172:	4916      	ldr	r1, [pc, #88]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c174:	4313      	orrs	r3, r2
 800c176:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c178:	4b14      	ldr	r3, [pc, #80]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a13      	ldr	r2, [pc, #76]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c17e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c182:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c184:	f7fb f9d2 	bl	800752c <HAL_GetTick>
 800c188:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c18a:	e009      	b.n	800c1a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c18c:	f7fb f9ce 	bl	800752c <HAL_GetTick>
 800c190:	4602      	mov	r2, r0
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	2b02      	cmp	r3, #2
 800c198:	d902      	bls.n	800c1a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	73fb      	strb	r3, [r7, #15]
          break;
 800c19e:	e005      	b.n	800c1ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d0ef      	beq.n	800c18c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c1b2:	4b06      	ldr	r3, [pc, #24]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c1b4:	691a      	ldr	r2, [r3, #16]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	4904      	ldr	r1, [pc, #16]	@ (800c1cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	40021000 	.word	0x40021000

0800c1d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c1de:	4b6a      	ldr	r3, [pc, #424]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f003 0303 	and.w	r3, r3, #3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d018      	beq.n	800c21c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c1ea:	4b67      	ldr	r3, [pc, #412]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f003 0203 	and.w	r2, r3, #3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d10d      	bne.n	800c216 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
       ||
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c202:	4b61      	ldr	r3, [pc, #388]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	091b      	lsrs	r3, r3, #4
 800c208:	f003 0307 	and.w	r3, r3, #7
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
       ||
 800c212:	429a      	cmp	r2, r3
 800c214:	d047      	beq.n	800c2a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	73fb      	strb	r3, [r7, #15]
 800c21a:	e044      	b.n	800c2a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b03      	cmp	r3, #3
 800c222:	d018      	beq.n	800c256 <RCCEx_PLLSAI2_Config+0x86>
 800c224:	2b03      	cmp	r3, #3
 800c226:	d825      	bhi.n	800c274 <RCCEx_PLLSAI2_Config+0xa4>
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d002      	beq.n	800c232 <RCCEx_PLLSAI2_Config+0x62>
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d009      	beq.n	800c244 <RCCEx_PLLSAI2_Config+0x74>
 800c230:	e020      	b.n	800c274 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c232:	4b55      	ldr	r3, [pc, #340]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d11d      	bne.n	800c27a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c242:	e01a      	b.n	800c27a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c244:	4b50      	ldr	r3, [pc, #320]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d116      	bne.n	800c27e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c254:	e013      	b.n	800c27e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c256:	4b4c      	ldr	r3, [pc, #304]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10f      	bne.n	800c282 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c262:	4b49      	ldr	r3, [pc, #292]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d109      	bne.n	800c282 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c272:	e006      	b.n	800c282 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	73fb      	strb	r3, [r7, #15]
      break;
 800c278:	e004      	b.n	800c284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c27a:	bf00      	nop
 800c27c:	e002      	b.n	800c284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c27e:	bf00      	nop
 800c280:	e000      	b.n	800c284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c282:	bf00      	nop
    }

    if(status == HAL_OK)
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10d      	bne.n	800c2a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c28a:	4b3f      	ldr	r3, [pc, #252]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6819      	ldr	r1, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	011b      	lsls	r3, r3, #4
 800c29e:	430b      	orrs	r3, r1
 800c2a0:	4939      	ldr	r1, [pc, #228]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d167      	bne.n	800c37c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c2ac:	4b36      	ldr	r3, [pc, #216]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a35      	ldr	r2, [pc, #212]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c2b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2b8:	f7fb f938 	bl	800752c <HAL_GetTick>
 800c2bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c2be:	e009      	b.n	800c2d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c2c0:	f7fb f934 	bl	800752c <HAL_GetTick>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	1ad3      	subs	r3, r2, r3
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d902      	bls.n	800c2d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	73fb      	strb	r3, [r7, #15]
        break;
 800c2d2:	e005      	b.n	800c2e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c2d4:	4b2c      	ldr	r3, [pc, #176]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1ef      	bne.n	800c2c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d14a      	bne.n	800c37c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d111      	bne.n	800c310 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c2ec:	4b26      	ldr	r3, [pc, #152]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800c2f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	6892      	ldr	r2, [r2, #8]
 800c2fc:	0211      	lsls	r1, r2, #8
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	68d2      	ldr	r2, [r2, #12]
 800c302:	0912      	lsrs	r2, r2, #4
 800c304:	0452      	lsls	r2, r2, #17
 800c306:	430a      	orrs	r2, r1
 800c308:	491f      	ldr	r1, [pc, #124]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c30a:	4313      	orrs	r3, r2
 800c30c:	614b      	str	r3, [r1, #20]
 800c30e:	e011      	b.n	800c334 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c310:	4b1d      	ldr	r3, [pc, #116]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c318:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	6892      	ldr	r2, [r2, #8]
 800c320:	0211      	lsls	r1, r2, #8
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	6912      	ldr	r2, [r2, #16]
 800c326:	0852      	lsrs	r2, r2, #1
 800c328:	3a01      	subs	r2, #1
 800c32a:	0652      	lsls	r2, r2, #25
 800c32c:	430a      	orrs	r2, r1
 800c32e:	4916      	ldr	r1, [pc, #88]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c330:	4313      	orrs	r3, r2
 800c332:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c334:	4b14      	ldr	r3, [pc, #80]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a13      	ldr	r2, [pc, #76]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c33a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c33e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c340:	f7fb f8f4 	bl	800752c <HAL_GetTick>
 800c344:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c346:	e009      	b.n	800c35c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c348:	f7fb f8f0 	bl	800752c <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	2b02      	cmp	r3, #2
 800c354:	d902      	bls.n	800c35c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	73fb      	strb	r3, [r7, #15]
          break;
 800c35a:	e005      	b.n	800c368 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c35c:	4b0a      	ldr	r3, [pc, #40]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d0ef      	beq.n	800c348 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c36e:	4b06      	ldr	r3, [pc, #24]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c370:	695a      	ldr	r2, [r3, #20]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	4904      	ldr	r1, [pc, #16]	@ (800c388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	40021000 	.word	0x40021000

0800c38c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d079      	beq.n	800c492 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d106      	bne.n	800c3b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7f7 fcfe 	bl	8003db4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	f003 0310 	and.w	r3, r3, #16
 800c3ca:	2b10      	cmp	r3, #16
 800c3cc:	d058      	beq.n	800c480 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	22ca      	movs	r2, #202	@ 0xca
 800c3d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2253      	movs	r2, #83	@ 0x53
 800c3dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fb82 	bl	800cae8 <RTC_EnterInitMode>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d127      	bne.n	800c43e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6812      	ldr	r2, [r2, #0]
 800c3f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c3fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c400:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	6899      	ldr	r1, [r3, #8]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	431a      	orrs	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	431a      	orrs	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	430a      	orrs	r2, r1
 800c41e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	68d2      	ldr	r2, [r2, #12]
 800c428:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6919      	ldr	r1, [r3, #16]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	041a      	lsls	r2, r3, #16
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fb86 	bl	800cb50 <RTC_ExitInitMode>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d113      	bne.n	800c476 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f022 0203 	bic.w	r2, r2, #3
 800c45c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	69da      	ldr	r2, [r3, #28]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	431a      	orrs	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	22ff      	movs	r2, #255	@ 0xff
 800c47c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c47e:	e001      	b.n	800c484 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c484:	7bfb      	ldrb	r3, [r7, #15]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d103      	bne.n	800c492 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d101      	bne.n	800c4b6 <HAL_RTC_SetTime+0x1a>
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	e08b      	b.n	800c5ce <HAL_RTC_SetTime+0x132>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	22ca      	movs	r2, #202	@ 0xca
 800c4cc:	625a      	str	r2, [r3, #36]	@ 0x24
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2253      	movs	r2, #83	@ 0x53
 800c4d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 fb06 	bl	800cae8 <RTC_EnterInitMode>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c4e0:	7cfb      	ldrb	r3, [r7, #19]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d163      	bne.n	800c5ae <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d126      	bne.n	800c53a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d102      	bne.n	800c500 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fb61 	bl	800cbcc <RTC_ByteToBcd2>
 800c50a:	4603      	mov	r3, r0
 800c50c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	785b      	ldrb	r3, [r3, #1]
 800c512:	4618      	mov	r0, r3
 800c514:	f000 fb5a 	bl	800cbcc <RTC_ByteToBcd2>
 800c518:	4603      	mov	r3, r0
 800c51a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c51c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	789b      	ldrb	r3, [r3, #2]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fb52 	bl	800cbcc <RTC_ByteToBcd2>
 800c528:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c52a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	78db      	ldrb	r3, [r3, #3]
 800c532:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c534:	4313      	orrs	r3, r2
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	e018      	b.n	800c56c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c544:	2b00      	cmp	r3, #0
 800c546:	d102      	bne.n	800c54e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2200      	movs	r2, #0
 800c54c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	785b      	ldrb	r3, [r3, #1]
 800c558:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c55a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c560:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	78db      	ldrb	r3, [r3, #3]
 800c566:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c568:	4313      	orrs	r3, r2
 800c56a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c576:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c57a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689a      	ldr	r2, [r3, #8]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c58a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6899      	ldr	r1, [r3, #8]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	68da      	ldr	r2, [r3, #12]
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	431a      	orrs	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	430a      	orrs	r2, r1
 800c5a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fad3 	bl	800cb50 <RTC_ExitInitMode>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	22ff      	movs	r2, #255	@ 0xff
 800c5b4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c5b6:	7cfb      	ldrb	r3, [r7, #19]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d103      	bne.n	800c5c4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c5cc:	7cfb      	ldrb	r3, [r7, #19]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	371c      	adds	r7, #28
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd90      	pop	{r4, r7, pc}

0800c5d6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b086      	sub	sp, #24
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	60b9      	str	r1, [r7, #8]
 800c5e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c604:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c608:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	0c1b      	lsrs	r3, r3, #16
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c614:	b2da      	uxtb	r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	0a1b      	lsrs	r3, r3, #8
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c624:	b2da      	uxtb	r2, r3
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c632:	b2da      	uxtb	r2, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	0d9b      	lsrs	r3, r3, #22
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	b2da      	uxtb	r2, r3
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d11a      	bne.n	800c684 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 fada 	bl	800cc0c <RTC_Bcd2ToByte>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	785b      	ldrb	r3, [r3, #1]
 800c664:	4618      	mov	r0, r3
 800c666:	f000 fad1 	bl	800cc0c <RTC_Bcd2ToByte>
 800c66a:	4603      	mov	r3, r0
 800c66c:	461a      	mov	r2, r3
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	789b      	ldrb	r3, [r3, #2]
 800c676:	4618      	mov	r0, r3
 800c678:	f000 fac8 	bl	800cc0c <RTC_Bcd2ToByte>
 800c67c:	4603      	mov	r3, r0
 800c67e:	461a      	mov	r2, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c68e:	b590      	push	{r4, r7, lr}
 800c690:	b087      	sub	sp, #28
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d101      	bne.n	800c6a8 <HAL_RTC_SetDate+0x1a>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	e075      	b.n	800c794 <HAL_RTC_SetDate+0x106>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10e      	bne.n	800c6dc <HAL_RTC_SetDate+0x4e>
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	f003 0310 	and.w	r3, r3, #16
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d008      	beq.n	800c6dc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	785b      	ldrb	r3, [r3, #1]
 800c6ce:	f023 0310 	bic.w	r3, r3, #16
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	330a      	adds	r3, #10
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d11c      	bne.n	800c71c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	78db      	ldrb	r3, [r3, #3]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 fa70 	bl	800cbcc <RTC_ByteToBcd2>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fa69 	bl	800cbcc <RTC_ByteToBcd2>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c6fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	789b      	ldrb	r3, [r3, #2]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 fa61 	bl	800cbcc <RTC_ByteToBcd2>
 800c70a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c70c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c716:	4313      	orrs	r3, r2
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	e00e      	b.n	800c73a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	78db      	ldrb	r3, [r3, #3]
 800c720:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	785b      	ldrb	r3, [r3, #1]
 800c726:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c728:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c72e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c736:	4313      	orrs	r3, r2
 800c738:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	22ca      	movs	r2, #202	@ 0xca
 800c740:	625a      	str	r2, [r3, #36]	@ 0x24
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2253      	movs	r2, #83	@ 0x53
 800c748:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f000 f9cc 	bl	800cae8 <RTC_EnterInitMode>
 800c750:	4603      	mov	r3, r0
 800c752:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c754:	7cfb      	ldrb	r3, [r7, #19]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10c      	bne.n	800c774 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c764:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c768:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f000 f9f0 	bl	800cb50 <RTC_ExitInitMode>
 800c770:	4603      	mov	r3, r0
 800c772:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	22ff      	movs	r2, #255	@ 0xff
 800c77a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c77c:	7cfb      	ldrb	r3, [r7, #19]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d103      	bne.n	800c78a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c792:	7cfb      	ldrb	r3, [r7, #19]
}
 800c794:	4618      	mov	r0, r3
 800c796:	371c      	adds	r7, #28
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd90      	pop	{r4, r7, pc}

0800c79c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c79c:	b590      	push	{r4, r7, lr}
 800c79e:	b089      	sub	sp, #36	@ 0x24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d101      	bne.n	800c7b6 <HAL_RTC_SetAlarm_IT+0x1a>
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	e127      	b.n	800ca06 <HAL_RTC_SetAlarm_IT+0x26a>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d137      	bne.n	800c83c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 f9f1 	bl	800cbcc <RTC_ByteToBcd2>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	785b      	ldrb	r3, [r3, #1]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 f9ea 	bl	800cbcc <RTC_ByteToBcd2>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c7fc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	789b      	ldrb	r3, [r3, #2]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f9e2 	bl	800cbcc <RTC_ByteToBcd2>
 800c808:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c80a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	78db      	ldrb	r3, [r3, #3]
 800c812:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c814:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 f9d4 	bl	800cbcc <RTC_ByteToBcd2>
 800c824:	4603      	mov	r3, r0
 800c826:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c828:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c830:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c836:	4313      	orrs	r3, r2
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	e023      	b.n	800c884 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c846:	2b00      	cmp	r3, #0
 800c848:	d102      	bne.n	800c850 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	2200      	movs	r2, #0
 800c84e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	785b      	ldrb	r3, [r3, #1]
 800c85a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c85c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c862:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	78db      	ldrb	r3, [r3, #3]
 800c868:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c86a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c872:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c874:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c87a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c880:	4313      	orrs	r3, r2
 800c882:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	685a      	ldr	r2, [r3, #4]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	22ca      	movs	r2, #202	@ 0xca
 800c896:	625a      	str	r2, [r3, #36]	@ 0x24
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2253      	movs	r2, #83	@ 0x53
 800c89e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8a8:	d14a      	bne.n	800c940 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	689a      	ldr	r2, [r3, #8]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c8b8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c8ca:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800c8cc:	f7fa fe2e 	bl	800752c <HAL_GetTick>
 800c8d0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c8d2:	e015      	b.n	800c900 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c8d4:	f7fa fe2a 	bl	800752c <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c8e2:	d90d      	bls.n	800c900 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	22ff      	movs	r2, #255	@ 0xff
 800c8ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2203      	movs	r2, #3
 800c8f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e082      	b.n	800ca06 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0e2      	beq.n	800c8d4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	69ba      	ldr	r2, [r7, #24]
 800c91c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	689a      	ldr	r2, [r3, #8]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c92c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c93c:	609a      	str	r2, [r3, #8]
 800c93e:	e049      	b.n	800c9d4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	689a      	ldr	r2, [r3, #8]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c94e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	b2da      	uxtb	r2, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c960:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800c962:	f7fa fde3 	bl	800752c <HAL_GetTick>
 800c966:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c968:	e015      	b.n	800c996 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c96a:	f7fa fddf 	bl	800752c <HAL_GetTick>
 800c96e:	4602      	mov	r2, r0
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c978:	d90d      	bls.n	800c996 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	22ff      	movs	r2, #255	@ 0xff
 800c980:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2203      	movs	r2, #3
 800c986:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e037      	b.n	800ca06 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0e2      	beq.n	800c96a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	69fa      	ldr	r2, [r7, #28]
 800c9aa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	69ba      	ldr	r2, [r7, #24]
 800c9b2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689a      	ldr	r2, [r3, #8]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9c2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689a      	ldr	r2, [r3, #8]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c9d2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c9d4:	4b0e      	ldr	r3, [pc, #56]	@ (800ca10 <HAL_RTC_SetAlarm_IT+0x274>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a0d      	ldr	r2, [pc, #52]	@ (800ca10 <HAL_RTC_SetAlarm_IT+0x274>)
 800c9da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9de:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca10 <HAL_RTC_SetAlarm_IT+0x274>)
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4a0a      	ldr	r2, [pc, #40]	@ (800ca10 <HAL_RTC_SetAlarm_IT+0x274>)
 800c9e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9ea:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	22ff      	movs	r2, #255	@ 0xff
 800c9f2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3724      	adds	r7, #36	@ 0x24
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd90      	pop	{r4, r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	40010400 	.word	0x40010400

0800ca14 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ca1c:	4b1f      	ldr	r3, [pc, #124]	@ (800ca9c <HAL_RTC_AlarmIRQHandler+0x88>)
 800ca1e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ca22:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d012      	beq.n	800ca58 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ca50:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7f4 fafa 	bl	800104c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d012      	beq.n	800ca8c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00b      	beq.n	800ca8c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ca84:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f8da 	bl	800cc40 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	40010400 	.word	0x40010400

0800caa0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a0d      	ldr	r2, [pc, #52]	@ (800cae4 <HAL_RTC_WaitForSynchro+0x44>)
 800caae:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800cab0:	f7fa fd3c 	bl	800752c <HAL_GetTick>
 800cab4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cab6:	e009      	b.n	800cacc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cab8:	f7fa fd38 	bl	800752c <HAL_GetTick>
 800cabc:	4602      	mov	r2, r0
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cac6:	d901      	bls.n	800cacc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e007      	b.n	800cadc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f003 0320 	and.w	r3, r3, #32
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0ee      	beq.n	800cab8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	0003ff5f 	.word	0x0003ff5f

0800cae8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d120      	bne.n	800cb44 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cb0c:	f7fa fd0e 	bl	800752c <HAL_GetTick>
 800cb10:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cb12:	e00d      	b.n	800cb30 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cb14:	f7fa fd0a 	bl	800752c <HAL_GetTick>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb22:	d905      	bls.n	800cb30 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2203      	movs	r2, #3
 800cb2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d102      	bne.n	800cb44 <RTC_EnterInitMode+0x5c>
 800cb3e:	7bfb      	ldrb	r3, [r7, #15]
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d1e7      	bne.n	800cb14 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
	...

0800cb50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cb5c:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	4a19      	ldr	r2, [pc, #100]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cb62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb66:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cb68:	4b17      	ldr	r3, [pc, #92]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f003 0320 	and.w	r3, r3, #32
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10c      	bne.n	800cb8e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff ff93 	bl	800caa0 <HAL_RTC_WaitForSynchro>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01e      	beq.n	800cbbe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2203      	movs	r2, #3
 800cb84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	73fb      	strb	r3, [r7, #15]
 800cb8c:	e017      	b.n	800cbbe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	4a0d      	ldr	r2, [pc, #52]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cb94:	f023 0320 	bic.w	r3, r3, #32
 800cb98:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff ff80 	bl	800caa0 <HAL_RTC_WaitForSynchro>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d005      	beq.n	800cbb2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2203      	movs	r2, #3
 800cbaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cbb2:	4b05      	ldr	r3, [pc, #20]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	4a04      	ldr	r2, [pc, #16]	@ (800cbc8 <RTC_ExitInitMode+0x78>)
 800cbb8:	f043 0320 	orr.w	r3, r3, #32
 800cbbc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	40002800 	.word	0x40002800

0800cbcc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800cbde:	e005      	b.n	800cbec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800cbe6:	7afb      	ldrb	r3, [r7, #11]
 800cbe8:	3b0a      	subs	r3, #10
 800cbea:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800cbec:	7afb      	ldrb	r3, [r7, #11]
 800cbee:	2b09      	cmp	r3, #9
 800cbf0:	d8f6      	bhi.n	800cbe0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	011b      	lsls	r3, r3, #4
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	b2db      	uxtb	r3, r3
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4603      	mov	r3, r0
 800cc14:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cc16:	79fb      	ldrb	r3, [r7, #7]
 800cc18:	091b      	lsrs	r3, r3, #4
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	0092      	lsls	r2, r2, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	005b      	lsls	r3, r3, #1
 800cc24:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	f003 030f 	and.w	r3, r3, #15
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
 800cc30:	4413      	add	r3, r2
 800cc32:	b2db      	uxtb	r3, r3
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	e095      	b.n	800cd92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d108      	bne.n	800cc80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cc76:	d009      	beq.n	800cc8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	61da      	str	r2, [r3, #28]
 800cc7e:	e005      	b.n	800cc8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7f7 f8be 	bl	8003e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ccc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cccc:	d902      	bls.n	800ccd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	e002      	b.n	800ccda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ccd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cce2:	d007      	beq.n	800ccf4 <HAL_SPI_Init+0xa0>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ccec:	d002      	beq.n	800ccf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cd04:	431a      	orrs	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	f003 0302 	and.w	r3, r3, #2
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	431a      	orrs	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd22:	431a      	orrs	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd36:	ea42 0103 	orr.w	r1, r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	430a      	orrs	r2, r1
 800cd48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	699b      	ldr	r3, [r3, #24]
 800cd4e:	0c1b      	lsrs	r3, r3, #16
 800cd50:	f003 0204 	and.w	r2, r3, #4
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd58:	f003 0310 	and.w	r3, r3, #16
 800cd5c:	431a      	orrs	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd62:	f003 0308 	and.w	r3, r3, #8
 800cd66:	431a      	orrs	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cd70:	ea42 0103 	orr.w	r1, r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b088      	sub	sp, #32
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	60f8      	str	r0, [r7, #12]
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	603b      	str	r3, [r7, #0]
 800cda6:	4613      	mov	r3, r2
 800cda8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdaa:	f7fa fbbf 	bl	800752c <HAL_GetTick>
 800cdae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800cdb0:	88fb      	ldrh	r3, [r7, #6]
 800cdb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d001      	beq.n	800cdc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e15c      	b.n	800d07e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <HAL_SPI_Transmit+0x36>
 800cdca:	88fb      	ldrh	r3, [r7, #6]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e154      	b.n	800d07e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d101      	bne.n	800cde2 <HAL_SPI_Transmit+0x48>
 800cdde:	2302      	movs	r3, #2
 800cde0:	e14d      	b.n	800d07e <HAL_SPI_Transmit+0x2e4>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2203      	movs	r2, #3
 800cdee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	88fa      	ldrh	r2, [r7, #6]
 800ce02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	88fa      	ldrh	r2, [r7, #6]
 800ce08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce34:	d10f      	bne.n	800ce56 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce60:	2b40      	cmp	r3, #64	@ 0x40
 800ce62:	d007      	beq.n	800ce74 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ce72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce7c:	d952      	bls.n	800cf24 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <HAL_SPI_Transmit+0xf2>
 800ce86:	8b7b      	ldrh	r3, [r7, #26]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d145      	bne.n	800cf18 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce90:	881a      	ldrh	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9c:	1c9a      	adds	r2, r3, #2
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ceb0:	e032      	b.n	800cf18 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f003 0302 	and.w	r3, r3, #2
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d112      	bne.n	800cee6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cec4:	881a      	ldrh	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced0:	1c9a      	adds	r2, r3, #2
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	3b01      	subs	r3, #1
 800cede:	b29a      	uxth	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cee4:	e018      	b.n	800cf18 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cee6:	f7fa fb21 	bl	800752c <HAL_GetTick>
 800ceea:	4602      	mov	r2, r0
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d803      	bhi.n	800cefe <HAL_SPI_Transmit+0x164>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefc:	d102      	bne.n	800cf04 <HAL_SPI_Transmit+0x16a>
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d109      	bne.n	800cf18 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e0b2      	b.n	800d07e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1c7      	bne.n	800ceb2 <HAL_SPI_Transmit+0x118>
 800cf22:	e083      	b.n	800d02c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <HAL_SPI_Transmit+0x198>
 800cf2c:	8b7b      	ldrh	r3, [r7, #26]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d177      	bne.n	800d022 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d912      	bls.n	800cf62 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf40:	881a      	ldrh	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf4c:	1c9a      	adds	r2, r3, #2
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	3b02      	subs	r3, #2
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cf60:	e05f      	b.n	800d022 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	330c      	adds	r3, #12
 800cf6c:	7812      	ldrb	r2, [r2, #0]
 800cf6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	3b01      	subs	r3, #1
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800cf88:	e04b      	b.n	800d022 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d12b      	bne.n	800cff0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d912      	bls.n	800cfc8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa6:	881a      	ldrh	r2, [r3, #0]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb2:	1c9a      	adds	r2, r3, #2
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	3b02      	subs	r3, #2
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cfc6:	e02c      	b.n	800d022 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	330c      	adds	r3, #12
 800cfd2:	7812      	ldrb	r2, [r2, #0]
 800cfd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfda:	1c5a      	adds	r2, r3, #1
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cfee:	e018      	b.n	800d022 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cff0:	f7fa fa9c 	bl	800752c <HAL_GetTick>
 800cff4:	4602      	mov	r2, r0
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d803      	bhi.n	800d008 <HAL_SPI_Transmit+0x26e>
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d006:	d102      	bne.n	800d00e <HAL_SPI_Transmit+0x274>
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d109      	bne.n	800d022 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d01e:	2303      	movs	r3, #3
 800d020:	e02d      	b.n	800d07e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d026:	b29b      	uxth	r3, r3
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1ae      	bne.n	800cf8a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d02c:	69fa      	ldr	r2, [r7, #28]
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 fcf5 	bl	800da20 <SPI_EndRxTxTransaction>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2220      	movs	r2, #32
 800d040:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10a      	bne.n	800d060 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d04a:	2300      	movs	r3, #0
 800d04c:	617b      	str	r3, [r7, #20]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d078:	2301      	movs	r3, #1
 800d07a:	e000      	b.n	800d07e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d07c:	2300      	movs	r3, #0
  }
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3720      	adds	r7, #32
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b088      	sub	sp, #32
 800d08a:	af02      	add	r7, sp, #8
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	603b      	str	r3, [r7, #0]
 800d092:	4613      	mov	r3, r2
 800d094:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d001      	beq.n	800d0a6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	e123      	b.n	800d2ee <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d0ae:	d112      	bne.n	800d0d6 <HAL_SPI_Receive+0x50>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10e      	bne.n	800d0d6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2204      	movs	r2, #4
 800d0bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d0c0:	88fa      	ldrh	r2, [r7, #6]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 f912 	bl	800d2f6 <HAL_SPI_TransmitReceive>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	e10b      	b.n	800d2ee <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0d6:	f7fa fa29 	bl	800752c <HAL_GetTick>
 800d0da:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <HAL_SPI_Receive+0x62>
 800d0e2:	88fb      	ldrh	r3, [r7, #6]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d101      	bne.n	800d0ec <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e100      	b.n	800d2ee <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d101      	bne.n	800d0fa <HAL_SPI_Receive+0x74>
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	e0f9      	b.n	800d2ee <HAL_SPI_Receive+0x268>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2204      	movs	r2, #4
 800d106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	88fa      	ldrh	r2, [r7, #6]
 800d11a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	88fa      	ldrh	r2, [r7, #6]
 800d122:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d14c:	d908      	bls.n	800d160 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	685a      	ldr	r2, [r3, #4]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d15c:	605a      	str	r2, [r3, #4]
 800d15e:	e007      	b.n	800d170 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d16e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d178:	d10f      	bne.n	800d19a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d188:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d198:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1a4:	2b40      	cmp	r3, #64	@ 0x40
 800d1a6:	d007      	beq.n	800d1b8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d1c0:	d875      	bhi.n	800d2ae <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d1c2:	e037      	b.n	800d234 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f003 0301 	and.w	r3, r3, #1
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d117      	bne.n	800d202 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f103 020c 	add.w	r2, r3, #12
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1de:	7812      	ldrb	r2, [r2, #0]
 800d1e0:	b2d2      	uxtb	r2, r2
 800d1e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d200:	e018      	b.n	800d234 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d202:	f7fa f993 	bl	800752c <HAL_GetTick>
 800d206:	4602      	mov	r2, r0
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d803      	bhi.n	800d21a <HAL_SPI_Receive+0x194>
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d218:	d102      	bne.n	800d220 <HAL_SPI_Receive+0x19a>
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d109      	bne.n	800d234 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d230:	2303      	movs	r3, #3
 800d232:	e05c      	b.n	800d2ee <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1c1      	bne.n	800d1c4 <HAL_SPI_Receive+0x13e>
 800d240:	e03b      	b.n	800d2ba <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d115      	bne.n	800d27c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25a:	b292      	uxth	r2, r2
 800d25c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d262:	1c9a      	adds	r2, r3, #2
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d26e:	b29b      	uxth	r3, r3
 800d270:	3b01      	subs	r3, #1
 800d272:	b29a      	uxth	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d27a:	e018      	b.n	800d2ae <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d27c:	f7fa f956 	bl	800752c <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d803      	bhi.n	800d294 <HAL_SPI_Receive+0x20e>
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d102      	bne.n	800d29a <HAL_SPI_Receive+0x214>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d109      	bne.n	800d2ae <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	e01f      	b.n	800d2ee <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1c3      	bne.n	800d242 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f000 fb56 	bl	800d970 <SPI_EndRxTransaction>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e000      	b.n	800d2ee <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
  }
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b08a      	sub	sp, #40	@ 0x28
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	60f8      	str	r0, [r7, #12]
 800d2fe:	60b9      	str	r1, [r7, #8]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d304:	2301      	movs	r3, #1
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d308:	f7fa f910 	bl	800752c <HAL_GetTick>
 800d30c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d314:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d31c:	887b      	ldrh	r3, [r7, #2]
 800d31e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d320:	887b      	ldrh	r3, [r7, #2]
 800d322:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d324:	7ffb      	ldrb	r3, [r7, #31]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d00c      	beq.n	800d344 <HAL_SPI_TransmitReceive+0x4e>
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d330:	d106      	bne.n	800d340 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <HAL_SPI_TransmitReceive+0x4a>
 800d33a:	7ffb      	ldrb	r3, [r7, #31]
 800d33c:	2b04      	cmp	r3, #4
 800d33e:	d001      	beq.n	800d344 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d340:	2302      	movs	r3, #2
 800d342:	e1f3      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d005      	beq.n	800d356 <HAL_SPI_TransmitReceive+0x60>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <HAL_SPI_TransmitReceive+0x60>
 800d350:	887b      	ldrh	r3, [r7, #2]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	e1e8      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d360:	2b01      	cmp	r3, #1
 800d362:	d101      	bne.n	800d368 <HAL_SPI_TransmitReceive+0x72>
 800d364:	2302      	movs	r3, #2
 800d366:	e1e1      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d003      	beq.n	800d384 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2205      	movs	r2, #5
 800d380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	887a      	ldrh	r2, [r7, #2]
 800d394:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	887a      	ldrh	r2, [r7, #2]
 800d39c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	887a      	ldrh	r2, [r7, #2]
 800d3aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	887a      	ldrh	r2, [r7, #2]
 800d3b0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d3c6:	d802      	bhi.n	800d3ce <HAL_SPI_TransmitReceive+0xd8>
 800d3c8:	8abb      	ldrh	r3, [r7, #20]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d908      	bls.n	800d3e0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d3dc:	605a      	str	r2, [r3, #4]
 800d3de:	e007      	b.n	800d3f0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d3ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3fa:	2b40      	cmp	r3, #64	@ 0x40
 800d3fc:	d007      	beq.n	800d40e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d40c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d416:	f240 8083 	bls.w	800d520 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <HAL_SPI_TransmitReceive+0x132>
 800d422:	8afb      	ldrh	r3, [r7, #22]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d16f      	bne.n	800d508 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d42c:	881a      	ldrh	r2, [r3, #0]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d438:	1c9a      	adds	r2, r3, #2
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d442:	b29b      	uxth	r3, r3
 800d444:	3b01      	subs	r3, #1
 800d446:	b29a      	uxth	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d44c:	e05c      	b.n	800d508 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d11b      	bne.n	800d494 <HAL_SPI_TransmitReceive+0x19e>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d460:	b29b      	uxth	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d016      	beq.n	800d494 <HAL_SPI_TransmitReceive+0x19e>
 800d466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d113      	bne.n	800d494 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d470:	881a      	ldrh	r2, [r3, #0]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d47c:	1c9a      	adds	r2, r3, #2
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d486:	b29b      	uxth	r3, r3
 800d488:	3b01      	subs	r3, #1
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d490:	2300      	movs	r3, #0
 800d492:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d11c      	bne.n	800d4dc <HAL_SPI_TransmitReceive+0x1e6>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d016      	beq.n	800d4dc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68da      	ldr	r2, [r3, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b8:	b292      	uxth	r2, r2
 800d4ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c0:	1c9a      	adds	r2, r3, #2
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d4dc:	f7fa f826 	bl	800752c <HAL_GetTick>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d80d      	bhi.n	800d508 <HAL_SPI_TransmitReceive+0x212>
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d009      	beq.n	800d508 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d504:	2303      	movs	r3, #3
 800d506:	e111      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d19d      	bne.n	800d44e <HAL_SPI_TransmitReceive+0x158>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d518:	b29b      	uxth	r3, r3
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d197      	bne.n	800d44e <HAL_SPI_TransmitReceive+0x158>
 800d51e:	e0e5      	b.n	800d6ec <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <HAL_SPI_TransmitReceive+0x23a>
 800d528:	8afb      	ldrh	r3, [r7, #22]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	f040 80d1 	bne.w	800d6d2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d534:	b29b      	uxth	r3, r3
 800d536:	2b01      	cmp	r3, #1
 800d538:	d912      	bls.n	800d560 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d53e:	881a      	ldrh	r2, [r3, #0]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d54a:	1c9a      	adds	r2, r3, #2
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d554:	b29b      	uxth	r3, r3
 800d556:	3b02      	subs	r3, #2
 800d558:	b29a      	uxth	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d55e:	e0b8      	b.n	800d6d2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	330c      	adds	r3, #12
 800d56a:	7812      	ldrb	r2, [r2, #0]
 800d56c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d572:	1c5a      	adds	r2, r3, #1
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	3b01      	subs	r3, #1
 800d580:	b29a      	uxth	r2, r3
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d586:	e0a4      	b.n	800d6d2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	2b02      	cmp	r3, #2
 800d594:	d134      	bne.n	800d600 <HAL_SPI_TransmitReceive+0x30a>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d02f      	beq.n	800d600 <HAL_SPI_TransmitReceive+0x30a>
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d12c      	bne.n	800d600 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d912      	bls.n	800d5d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b4:	881a      	ldrh	r2, [r3, #0]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c0:	1c9a      	adds	r2, r3, #2
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	3b02      	subs	r3, #2
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d5d4:	e012      	b.n	800d5fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	330c      	adds	r3, #12
 800d5e0:	7812      	ldrb	r2, [r2, #0]
 800d5e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d148      	bne.n	800d6a0 <HAL_SPI_TransmitReceive+0x3aa>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d614:	b29b      	uxth	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d042      	beq.n	800d6a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d620:	b29b      	uxth	r3, r3
 800d622:	2b01      	cmp	r3, #1
 800d624:	d923      	bls.n	800d66e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d630:	b292      	uxth	r2, r2
 800d632:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d638:	1c9a      	adds	r2, r3, #2
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d644:	b29b      	uxth	r3, r3
 800d646:	3b02      	subs	r3, #2
 800d648:	b29a      	uxth	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d656:	b29b      	uxth	r3, r3
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d81f      	bhi.n	800d69c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d66a:	605a      	str	r2, [r3, #4]
 800d66c:	e016      	b.n	800d69c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f103 020c 	add.w	r2, r3, #12
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d67a:	7812      	ldrb	r2, [r2, #0]
 800d67c:	b2d2      	uxtb	r2, r2
 800d67e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d690:	b29b      	uxth	r3, r3
 800d692:	3b01      	subs	r3, #1
 800d694:	b29a      	uxth	r2, r3
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d69c:	2301      	movs	r3, #1
 800d69e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d6a0:	f7f9 ff44 	bl	800752c <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d803      	bhi.n	800d6b8 <HAL_SPI_TransmitReceive+0x3c2>
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b6:	d102      	bne.n	800d6be <HAL_SPI_TransmitReceive+0x3c8>
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d109      	bne.n	800d6d2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e02c      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f47f af55 	bne.w	800d588 <HAL_SPI_TransmitReceive+0x292>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f47f af4e 	bne.w	800d588 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d6ec:	6a3a      	ldr	r2, [r7, #32]
 800d6ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f000 f995 	bl	800da20 <SPI_EndRxTxTransaction>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d008      	beq.n	800d70e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2220      	movs	r2, #32
 800d700:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e00e      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2201      	movs	r2, #1
 800d712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d722:	2b00      	cmp	r3, #0
 800d724:	d001      	beq.n	800d72a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e000      	b.n	800d72c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d72a:	2300      	movs	r3, #0
  }
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3728      	adds	r7, #40	@ 0x28
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	603b      	str	r3, [r7, #0]
 800d740:	4613      	mov	r3, r2
 800d742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d744:	f7f9 fef2 	bl	800752c <HAL_GetTick>
 800d748:	4602      	mov	r2, r0
 800d74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	4413      	add	r3, r2
 800d752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d754:	f7f9 feea 	bl	800752c <HAL_GetTick>
 800d758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d75a:	4b39      	ldr	r3, [pc, #228]	@ (800d840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	015b      	lsls	r3, r3, #5
 800d760:	0d1b      	lsrs	r3, r3, #20
 800d762:	69fa      	ldr	r2, [r7, #28]
 800d764:	fb02 f303 	mul.w	r3, r2, r3
 800d768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d76a:	e054      	b.n	800d816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d772:	d050      	beq.n	800d816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d774:	f7f9 feda 	bl	800752c <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	69fa      	ldr	r2, [r7, #28]
 800d780:	429a      	cmp	r2, r3
 800d782:	d902      	bls.n	800d78a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d13d      	bne.n	800d806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d7a2:	d111      	bne.n	800d7c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7ac:	d004      	beq.n	800d7b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b6:	d107      	bne.n	800d7c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d7c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7d0:	d10f      	bne.n	800d7f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d7f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d802:	2303      	movs	r3, #3
 800d804:	e017      	b.n	800d836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	3b01      	subs	r3, #1
 800d814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	689a      	ldr	r2, [r3, #8]
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	4013      	ands	r3, r2
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	429a      	cmp	r2, r3
 800d824:	bf0c      	ite	eq
 800d826:	2301      	moveq	r3, #1
 800d828:	2300      	movne	r3, #0
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	461a      	mov	r2, r3
 800d82e:	79fb      	ldrb	r3, [r7, #7]
 800d830:	429a      	cmp	r2, r3
 800d832:	d19b      	bne.n	800d76c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3720      	adds	r7, #32
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	20000000 	.word	0x20000000

0800d844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08a      	sub	sp, #40	@ 0x28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d852:	2300      	movs	r3, #0
 800d854:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d856:	f7f9 fe69 	bl	800752c <HAL_GetTick>
 800d85a:	4602      	mov	r2, r0
 800d85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85e:	1a9b      	subs	r3, r3, r2
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	4413      	add	r3, r2
 800d864:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d866:	f7f9 fe61 	bl	800752c <HAL_GetTick>
 800d86a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	330c      	adds	r3, #12
 800d872:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d874:	4b3d      	ldr	r3, [pc, #244]	@ (800d96c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	4613      	mov	r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	00da      	lsls	r2, r3, #3
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	0d1b      	lsrs	r3, r3, #20
 800d884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d886:	fb02 f303 	mul.w	r3, r2, r3
 800d88a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d88c:	e060      	b.n	800d950 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d894:	d107      	bne.n	800d8a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d104      	bne.n	800d8a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d050      	beq.n	800d950 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8ae:	f7f9 fe3d 	bl	800752c <HAL_GetTick>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d902      	bls.n	800d8c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d13d      	bne.n	800d940 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d8d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d8dc:	d111      	bne.n	800d902 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8e6:	d004      	beq.n	800d8f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8f0:	d107      	bne.n	800d902 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d90a:	d10f      	bne.n	800d92c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d92a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2200      	movs	r2, #0
 800d938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d93c:	2303      	movs	r3, #3
 800d93e:	e010      	b.n	800d962 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d101      	bne.n	800d94a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d946:	2300      	movs	r3, #0
 800d948:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	3b01      	subs	r3, #1
 800d94e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689a      	ldr	r2, [r3, #8]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	4013      	ands	r3, r2
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d196      	bne.n	800d88e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3728      	adds	r7, #40	@ 0x28
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000000 	.word	0x20000000

0800d970 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af02      	add	r7, sp, #8
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d984:	d111      	bne.n	800d9aa <SPI_EndRxTransaction+0x3a>
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d98e:	d004      	beq.n	800d99a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d998:	d107      	bne.n	800d9aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2180      	movs	r1, #128	@ 0x80
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7ff febd 	bl	800d734 <SPI_WaitFlagStateUntilTimeout>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d007      	beq.n	800d9d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d9c4:	f043 0220 	orr.w	r2, r3, #32
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e023      	b.n	800da18 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d9d8:	d11d      	bne.n	800da16 <SPI_EndRxTransaction+0xa6>
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9e2:	d004      	beq.n	800d9ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9ec:	d113      	bne.n	800da16 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f7ff ff22 	bl	800d844 <SPI_WaitFifoStateUntilTimeout>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d007      	beq.n	800da16 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da0a:	f043 0220 	orr.w	r2, r3, #32
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e000      	b.n	800da18 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af02      	add	r7, sp, #8
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	2200      	movs	r2, #0
 800da34:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f7ff ff03 	bl	800d844 <SPI_WaitFifoStateUntilTimeout>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d007      	beq.n	800da54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da48:	f043 0220 	orr.w	r2, r3, #32
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e027      	b.n	800daa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	2200      	movs	r2, #0
 800da5c:	2180      	movs	r1, #128	@ 0x80
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7ff fe68 	bl	800d734 <SPI_WaitFlagStateUntilTimeout>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d007      	beq.n	800da7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da6e:	f043 0220 	orr.w	r2, r3, #32
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e014      	b.n	800daa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2200      	movs	r2, #0
 800da82:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f7ff fedc 	bl	800d844 <SPI_WaitFifoStateUntilTimeout>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d007      	beq.n	800daa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da96:	f043 0220 	orr.w	r2, r3, #32
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800da9e:	2303      	movs	r3, #3
 800daa0:	e000      	b.n	800daa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	e049      	b.n	800db52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7f6 fa80 	bl	8003fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2202      	movs	r2, #2
 800dadc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	3304      	adds	r3, #4
 800dae8:	4619      	mov	r1, r3
 800daea:	4610      	mov	r0, r2
 800daec:	f000 fe76 	bl	800e7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2201      	movs	r2, #1
 800db14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
	...

0800db5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d001      	beq.n	800db74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	e04f      	b.n	800dc14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2202      	movs	r2, #2
 800db78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68da      	ldr	r2, [r3, #12]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f042 0201 	orr.w	r2, r2, #1
 800db8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a23      	ldr	r2, [pc, #140]	@ (800dc20 <HAL_TIM_Base_Start_IT+0xc4>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d01d      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0x76>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db9e:	d018      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0x76>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a1f      	ldr	r2, [pc, #124]	@ (800dc24 <HAL_TIM_Base_Start_IT+0xc8>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d013      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0x76>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a1e      	ldr	r2, [pc, #120]	@ (800dc28 <HAL_TIM_Base_Start_IT+0xcc>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d00e      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0x76>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a1c      	ldr	r2, [pc, #112]	@ (800dc2c <HAL_TIM_Base_Start_IT+0xd0>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d009      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0x76>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a1b      	ldr	r2, [pc, #108]	@ (800dc30 <HAL_TIM_Base_Start_IT+0xd4>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d004      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0x76>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a19      	ldr	r2, [pc, #100]	@ (800dc34 <HAL_TIM_Base_Start_IT+0xd8>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d115      	bne.n	800dbfe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	689a      	ldr	r2, [r3, #8]
 800dbd8:	4b17      	ldr	r3, [pc, #92]	@ (800dc38 <HAL_TIM_Base_Start_IT+0xdc>)
 800dbda:	4013      	ands	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b06      	cmp	r3, #6
 800dbe2:	d015      	beq.n	800dc10 <HAL_TIM_Base_Start_IT+0xb4>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbea:	d011      	beq.n	800dc10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f042 0201 	orr.w	r2, r2, #1
 800dbfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbfc:	e008      	b.n	800dc10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f042 0201 	orr.w	r2, r2, #1
 800dc0c:	601a      	str	r2, [r3, #0]
 800dc0e:	e000      	b.n	800dc12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	40012c00 	.word	0x40012c00
 800dc24:	40000400 	.word	0x40000400
 800dc28:	40000800 	.word	0x40000800
 800dc2c:	40000c00 	.word	0x40000c00
 800dc30:	40013400 	.word	0x40013400
 800dc34:	40014000 	.word	0x40014000
 800dc38:	00010007 	.word	0x00010007

0800dc3c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 0201 	bic.w	r2, r2, #1
 800dc52:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6a1a      	ldr	r2, [r3, #32]
 800dc5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dc5e:	4013      	ands	r3, r2
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10f      	bne.n	800dc84 <HAL_TIM_Base_Stop_IT+0x48>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6a1a      	ldr	r2, [r3, #32]
 800dc6a:	f240 4344 	movw	r3, #1092	@ 0x444
 800dc6e:	4013      	ands	r3, r2
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d107      	bne.n	800dc84 <HAL_TIM_Base_Stop_IT+0x48>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f022 0201 	bic.w	r2, r2, #1
 800dc82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b082      	sub	sp, #8
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e049      	b.n	800dd40 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7f6 f929 	bl	8003f18 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2202      	movs	r2, #2
 800dcca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f000 fd7f 	bl	800e7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d101      	bne.n	800dd5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e049      	b.n	800ddee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f841 	bl	800ddf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2202      	movs	r2, #2
 800dd78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4610      	mov	r0, r2
 800dd88:	f000 fd28 	bl	800e7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2201      	movs	r2, #1
 800dde0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2201      	movs	r2, #1
 800dde8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b083      	sub	sp, #12
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ddfe:	bf00      	nop
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
	...

0800de0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d109      	bne.n	800de30 <HAL_TIM_PWM_Start+0x24>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b01      	cmp	r3, #1
 800de26:	bf14      	ite	ne
 800de28:	2301      	movne	r3, #1
 800de2a:	2300      	moveq	r3, #0
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	e03c      	b.n	800deaa <HAL_TIM_PWM_Start+0x9e>
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	2b04      	cmp	r3, #4
 800de34:	d109      	bne.n	800de4a <HAL_TIM_PWM_Start+0x3e>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b01      	cmp	r3, #1
 800de40:	bf14      	ite	ne
 800de42:	2301      	movne	r3, #1
 800de44:	2300      	moveq	r3, #0
 800de46:	b2db      	uxtb	r3, r3
 800de48:	e02f      	b.n	800deaa <HAL_TIM_PWM_Start+0x9e>
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	2b08      	cmp	r3, #8
 800de4e:	d109      	bne.n	800de64 <HAL_TIM_PWM_Start+0x58>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b01      	cmp	r3, #1
 800de5a:	bf14      	ite	ne
 800de5c:	2301      	movne	r3, #1
 800de5e:	2300      	moveq	r3, #0
 800de60:	b2db      	uxtb	r3, r3
 800de62:	e022      	b.n	800deaa <HAL_TIM_PWM_Start+0x9e>
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b0c      	cmp	r3, #12
 800de68:	d109      	bne.n	800de7e <HAL_TIM_PWM_Start+0x72>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de70:	b2db      	uxtb	r3, r3
 800de72:	2b01      	cmp	r3, #1
 800de74:	bf14      	ite	ne
 800de76:	2301      	movne	r3, #1
 800de78:	2300      	moveq	r3, #0
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	e015      	b.n	800deaa <HAL_TIM_PWM_Start+0x9e>
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	2b10      	cmp	r3, #16
 800de82:	d109      	bne.n	800de98 <HAL_TIM_PWM_Start+0x8c>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	bf14      	ite	ne
 800de90:	2301      	movne	r3, #1
 800de92:	2300      	moveq	r3, #0
 800de94:	b2db      	uxtb	r3, r3
 800de96:	e008      	b.n	800deaa <HAL_TIM_PWM_Start+0x9e>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	bf14      	ite	ne
 800dea4:	2301      	movne	r3, #1
 800dea6:	2300      	moveq	r3, #0
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	e09c      	b.n	800dfec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d104      	bne.n	800dec2 <HAL_TIM_PWM_Start+0xb6>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2202      	movs	r2, #2
 800debc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dec0:	e023      	b.n	800df0a <HAL_TIM_PWM_Start+0xfe>
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	2b04      	cmp	r3, #4
 800dec6:	d104      	bne.n	800ded2 <HAL_TIM_PWM_Start+0xc6>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2202      	movs	r2, #2
 800decc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ded0:	e01b      	b.n	800df0a <HAL_TIM_PWM_Start+0xfe>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	d104      	bne.n	800dee2 <HAL_TIM_PWM_Start+0xd6>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2202      	movs	r2, #2
 800dedc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dee0:	e013      	b.n	800df0a <HAL_TIM_PWM_Start+0xfe>
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b0c      	cmp	r3, #12
 800dee6:	d104      	bne.n	800def2 <HAL_TIM_PWM_Start+0xe6>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2202      	movs	r2, #2
 800deec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800def0:	e00b      	b.n	800df0a <HAL_TIM_PWM_Start+0xfe>
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b10      	cmp	r3, #16
 800def6:	d104      	bne.n	800df02 <HAL_TIM_PWM_Start+0xf6>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2202      	movs	r2, #2
 800defc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df00:	e003      	b.n	800df0a <HAL_TIM_PWM_Start+0xfe>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2202      	movs	r2, #2
 800df06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2201      	movs	r2, #1
 800df10:	6839      	ldr	r1, [r7, #0]
 800df12:	4618      	mov	r0, r3
 800df14:	f001 f99c 	bl	800f250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a35      	ldr	r2, [pc, #212]	@ (800dff4 <HAL_TIM_PWM_Start+0x1e8>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d013      	beq.n	800df4a <HAL_TIM_PWM_Start+0x13e>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a34      	ldr	r2, [pc, #208]	@ (800dff8 <HAL_TIM_PWM_Start+0x1ec>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d00e      	beq.n	800df4a <HAL_TIM_PWM_Start+0x13e>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a32      	ldr	r2, [pc, #200]	@ (800dffc <HAL_TIM_PWM_Start+0x1f0>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d009      	beq.n	800df4a <HAL_TIM_PWM_Start+0x13e>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a31      	ldr	r2, [pc, #196]	@ (800e000 <HAL_TIM_PWM_Start+0x1f4>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d004      	beq.n	800df4a <HAL_TIM_PWM_Start+0x13e>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a2f      	ldr	r2, [pc, #188]	@ (800e004 <HAL_TIM_PWM_Start+0x1f8>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d101      	bne.n	800df4e <HAL_TIM_PWM_Start+0x142>
 800df4a:	2301      	movs	r3, #1
 800df4c:	e000      	b.n	800df50 <HAL_TIM_PWM_Start+0x144>
 800df4e:	2300      	movs	r3, #0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d007      	beq.n	800df64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a22      	ldr	r2, [pc, #136]	@ (800dff4 <HAL_TIM_PWM_Start+0x1e8>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d01d      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x19e>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df76:	d018      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x19e>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a22      	ldr	r2, [pc, #136]	@ (800e008 <HAL_TIM_PWM_Start+0x1fc>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d013      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x19e>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a21      	ldr	r2, [pc, #132]	@ (800e00c <HAL_TIM_PWM_Start+0x200>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d00e      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x19e>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a1f      	ldr	r2, [pc, #124]	@ (800e010 <HAL_TIM_PWM_Start+0x204>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d009      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x19e>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a17      	ldr	r2, [pc, #92]	@ (800dff8 <HAL_TIM_PWM_Start+0x1ec>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d004      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x19e>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a15      	ldr	r2, [pc, #84]	@ (800dffc <HAL_TIM_PWM_Start+0x1f0>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d115      	bne.n	800dfd6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689a      	ldr	r2, [r3, #8]
 800dfb0:	4b18      	ldr	r3, [pc, #96]	@ (800e014 <HAL_TIM_PWM_Start+0x208>)
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b06      	cmp	r3, #6
 800dfba:	d015      	beq.n	800dfe8 <HAL_TIM_PWM_Start+0x1dc>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfc2:	d011      	beq.n	800dfe8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f042 0201 	orr.w	r2, r2, #1
 800dfd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfd4:	e008      	b.n	800dfe8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f042 0201 	orr.w	r2, r2, #1
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	e000      	b.n	800dfea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	40012c00 	.word	0x40012c00
 800dff8:	40013400 	.word	0x40013400
 800dffc:	40014000 	.word	0x40014000
 800e000:	40014400 	.word	0x40014400
 800e004:	40014800 	.word	0x40014800
 800e008:	40000400 	.word	0x40000400
 800e00c:	40000800 	.word	0x40000800
 800e010:	40000c00 	.word	0x40000c00
 800e014:	00010007 	.word	0x00010007

0800e018 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2200      	movs	r2, #0
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f001 f910 	bl	800f250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a3e      	ldr	r2, [pc, #248]	@ (800e130 <HAL_TIM_PWM_Stop+0x118>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d013      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a3d      	ldr	r2, [pc, #244]	@ (800e134 <HAL_TIM_PWM_Stop+0x11c>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d00e      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a3b      	ldr	r2, [pc, #236]	@ (800e138 <HAL_TIM_PWM_Stop+0x120>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d009      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a3a      	ldr	r2, [pc, #232]	@ (800e13c <HAL_TIM_PWM_Stop+0x124>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d004      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a38      	ldr	r2, [pc, #224]	@ (800e140 <HAL_TIM_PWM_Stop+0x128>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d101      	bne.n	800e066 <HAL_TIM_PWM_Stop+0x4e>
 800e062:	2301      	movs	r3, #1
 800e064:	e000      	b.n	800e068 <HAL_TIM_PWM_Stop+0x50>
 800e066:	2300      	movs	r3, #0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d017      	beq.n	800e09c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6a1a      	ldr	r2, [r3, #32]
 800e072:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e076:	4013      	ands	r3, r2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10f      	bne.n	800e09c <HAL_TIM_PWM_Stop+0x84>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6a1a      	ldr	r2, [r3, #32]
 800e082:	f240 4344 	movw	r3, #1092	@ 0x444
 800e086:	4013      	ands	r3, r2
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d107      	bne.n	800e09c <HAL_TIM_PWM_Stop+0x84>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e09a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a1a      	ldr	r2, [r3, #32]
 800e0a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10f      	bne.n	800e0cc <HAL_TIM_PWM_Stop+0xb4>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6a1a      	ldr	r2, [r3, #32]
 800e0b2:	f240 4344 	movw	r3, #1092	@ 0x444
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d107      	bne.n	800e0cc <HAL_TIM_PWM_Stop+0xb4>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f022 0201 	bic.w	r2, r2, #1
 800e0ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d104      	bne.n	800e0dc <HAL_TIM_PWM_Stop+0xc4>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0da:	e023      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2b04      	cmp	r3, #4
 800e0e0:	d104      	bne.n	800e0ec <HAL_TIM_PWM_Stop+0xd4>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0ea:	e01b      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b08      	cmp	r3, #8
 800e0f0:	d104      	bne.n	800e0fc <HAL_TIM_PWM_Stop+0xe4>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0fa:	e013      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	2b0c      	cmp	r3, #12
 800e100:	d104      	bne.n	800e10c <HAL_TIM_PWM_Stop+0xf4>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e10a:	e00b      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b10      	cmp	r3, #16
 800e110:	d104      	bne.n	800e11c <HAL_TIM_PWM_Stop+0x104>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e11a:	e003      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	40012c00 	.word	0x40012c00
 800e134:	40013400 	.word	0x40013400
 800e138:	40014000 	.word	0x40014000
 800e13c:	40014400 	.word	0x40014400
 800e140:	40014800 	.word	0x40014800

0800e144 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e049      	b.n	800e1ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7f5 fef4 	bl	8003f58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2202      	movs	r2, #2
 800e174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3304      	adds	r3, #4
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f000 fb2a 	bl	800e7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
	...

0800e1f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d101      	bne.n	800e212 <HAL_TIM_OC_ConfigChannel+0x1e>
 800e20e:	2302      	movs	r3, #2
 800e210:	e066      	b.n	800e2e0 <HAL_TIM_OC_ConfigChannel+0xec>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b14      	cmp	r3, #20
 800e21e:	d857      	bhi.n	800e2d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800e220:	a201      	add	r2, pc, #4	@ (adr r2, 800e228 <HAL_TIM_OC_ConfigChannel+0x34>)
 800e222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e226:	bf00      	nop
 800e228:	0800e27d 	.word	0x0800e27d
 800e22c:	0800e2d1 	.word	0x0800e2d1
 800e230:	0800e2d1 	.word	0x0800e2d1
 800e234:	0800e2d1 	.word	0x0800e2d1
 800e238:	0800e28b 	.word	0x0800e28b
 800e23c:	0800e2d1 	.word	0x0800e2d1
 800e240:	0800e2d1 	.word	0x0800e2d1
 800e244:	0800e2d1 	.word	0x0800e2d1
 800e248:	0800e299 	.word	0x0800e299
 800e24c:	0800e2d1 	.word	0x0800e2d1
 800e250:	0800e2d1 	.word	0x0800e2d1
 800e254:	0800e2d1 	.word	0x0800e2d1
 800e258:	0800e2a7 	.word	0x0800e2a7
 800e25c:	0800e2d1 	.word	0x0800e2d1
 800e260:	0800e2d1 	.word	0x0800e2d1
 800e264:	0800e2d1 	.word	0x0800e2d1
 800e268:	0800e2b5 	.word	0x0800e2b5
 800e26c:	0800e2d1 	.word	0x0800e2d1
 800e270:	0800e2d1 	.word	0x0800e2d1
 800e274:	0800e2d1 	.word	0x0800e2d1
 800e278:	0800e2c3 	.word	0x0800e2c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	68b9      	ldr	r1, [r7, #8]
 800e282:	4618      	mov	r0, r3
 800e284:	f000 fb50 	bl	800e928 <TIM_OC1_SetConfig>
      break;
 800e288:	e025      	b.n	800e2d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	68b9      	ldr	r1, [r7, #8]
 800e290:	4618      	mov	r0, r3
 800e292:	f000 fbd9 	bl	800ea48 <TIM_OC2_SetConfig>
      break;
 800e296:	e01e      	b.n	800e2d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	68b9      	ldr	r1, [r7, #8]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 fc5c 	bl	800eb5c <TIM_OC3_SetConfig>
      break;
 800e2a4:	e017      	b.n	800e2d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68b9      	ldr	r1, [r7, #8]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f000 fcdd 	bl	800ec6c <TIM_OC4_SetConfig>
      break;
 800e2b2:	e010      	b.n	800e2d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 fd40 	bl	800ed40 <TIM_OC5_SetConfig>
      break;
 800e2c0:	e009      	b.n	800e2d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 fd9d 	bl	800ee08 <TIM_OC6_SetConfig>
      break;
 800e2ce:	e002      	b.n	800e2d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d101      	bne.n	800e306 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e302:	2302      	movs	r3, #2
 800e304:	e088      	b.n	800e418 <HAL_TIM_IC_ConfigChannel+0x130>
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2201      	movs	r2, #1
 800e30a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d11b      	bne.n	800e34c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e324:	f000 fdd6 	bl	800eed4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	699a      	ldr	r2, [r3, #24]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f022 020c 	bic.w	r2, r2, #12
 800e336:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6999      	ldr	r1, [r3, #24]
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	689a      	ldr	r2, [r3, #8]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	430a      	orrs	r2, r1
 800e348:	619a      	str	r2, [r3, #24]
 800e34a:	e060      	b.n	800e40e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b04      	cmp	r3, #4
 800e350:	d11c      	bne.n	800e38c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e362:	f000 fe54 	bl	800f00e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	699a      	ldr	r2, [r3, #24]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e374:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	6999      	ldr	r1, [r3, #24]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	021a      	lsls	r2, r3, #8
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	430a      	orrs	r2, r1
 800e388:	619a      	str	r2, [r3, #24]
 800e38a:	e040      	b.n	800e40e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b08      	cmp	r3, #8
 800e390:	d11b      	bne.n	800e3ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e3a2:	f000 fea1 	bl	800f0e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69da      	ldr	r2, [r3, #28]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f022 020c 	bic.w	r2, r2, #12
 800e3b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	69d9      	ldr	r1, [r3, #28]
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	689a      	ldr	r2, [r3, #8]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	430a      	orrs	r2, r1
 800e3c6:	61da      	str	r2, [r3, #28]
 800e3c8:	e021      	b.n	800e40e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b0c      	cmp	r3, #12
 800e3ce:	d11c      	bne.n	800e40a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e3e0:	f000 febe 	bl	800f160 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	69da      	ldr	r2, [r3, #28]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e3f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	69d9      	ldr	r1, [r3, #28]
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	021a      	lsls	r2, r3, #8
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	430a      	orrs	r2, r1
 800e406:	61da      	str	r2, [r3, #28]
 800e408:	e001      	b.n	800e40e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e40a:	2301      	movs	r3, #1
 800e40c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e416:	7dfb      	ldrb	r3, [r7, #23]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3718      	adds	r7, #24
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e436:	2b01      	cmp	r3, #1
 800e438:	d101      	bne.n	800e43e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e43a:	2302      	movs	r3, #2
 800e43c:	e0ff      	b.n	800e63e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2201      	movs	r2, #1
 800e442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b14      	cmp	r3, #20
 800e44a:	f200 80f0 	bhi.w	800e62e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e44e:	a201      	add	r2, pc, #4	@ (adr r2, 800e454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e454:	0800e4a9 	.word	0x0800e4a9
 800e458:	0800e62f 	.word	0x0800e62f
 800e45c:	0800e62f 	.word	0x0800e62f
 800e460:	0800e62f 	.word	0x0800e62f
 800e464:	0800e4e9 	.word	0x0800e4e9
 800e468:	0800e62f 	.word	0x0800e62f
 800e46c:	0800e62f 	.word	0x0800e62f
 800e470:	0800e62f 	.word	0x0800e62f
 800e474:	0800e52b 	.word	0x0800e52b
 800e478:	0800e62f 	.word	0x0800e62f
 800e47c:	0800e62f 	.word	0x0800e62f
 800e480:	0800e62f 	.word	0x0800e62f
 800e484:	0800e56b 	.word	0x0800e56b
 800e488:	0800e62f 	.word	0x0800e62f
 800e48c:	0800e62f 	.word	0x0800e62f
 800e490:	0800e62f 	.word	0x0800e62f
 800e494:	0800e5ad 	.word	0x0800e5ad
 800e498:	0800e62f 	.word	0x0800e62f
 800e49c:	0800e62f 	.word	0x0800e62f
 800e4a0:	0800e62f 	.word	0x0800e62f
 800e4a4:	0800e5ed 	.word	0x0800e5ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68b9      	ldr	r1, [r7, #8]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 fa3a 	bl	800e928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	699a      	ldr	r2, [r3, #24]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f042 0208 	orr.w	r2, r2, #8
 800e4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	699a      	ldr	r2, [r3, #24]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f022 0204 	bic.w	r2, r2, #4
 800e4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6999      	ldr	r1, [r3, #24]
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	691a      	ldr	r2, [r3, #16]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	619a      	str	r2, [r3, #24]
      break;
 800e4e6:	e0a5      	b.n	800e634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68b9      	ldr	r1, [r7, #8]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 faaa 	bl	800ea48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	699a      	ldr	r2, [r3, #24]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	699a      	ldr	r2, [r3, #24]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6999      	ldr	r1, [r3, #24]
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	691b      	ldr	r3, [r3, #16]
 800e51e:	021a      	lsls	r2, r3, #8
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	430a      	orrs	r2, r1
 800e526:	619a      	str	r2, [r3, #24]
      break;
 800e528:	e084      	b.n	800e634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68b9      	ldr	r1, [r7, #8]
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fb13 	bl	800eb5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	69da      	ldr	r2, [r3, #28]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f042 0208 	orr.w	r2, r2, #8
 800e544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	69da      	ldr	r2, [r3, #28]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f022 0204 	bic.w	r2, r2, #4
 800e554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	69d9      	ldr	r1, [r3, #28]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	691a      	ldr	r2, [r3, #16]
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	430a      	orrs	r2, r1
 800e566:	61da      	str	r2, [r3, #28]
      break;
 800e568:	e064      	b.n	800e634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	4618      	mov	r0, r3
 800e572:	f000 fb7b 	bl	800ec6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	69da      	ldr	r2, [r3, #28]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	69da      	ldr	r2, [r3, #28]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	69d9      	ldr	r1, [r3, #28]
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	021a      	lsls	r2, r3, #8
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	61da      	str	r2, [r3, #28]
      break;
 800e5aa:	e043      	b.n	800e634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68b9      	ldr	r1, [r7, #8]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 fbc4 	bl	800ed40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f042 0208 	orr.w	r2, r2, #8
 800e5c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f022 0204 	bic.w	r2, r2, #4
 800e5d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	691a      	ldr	r2, [r3, #16]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	430a      	orrs	r2, r1
 800e5e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e5ea:	e023      	b.n	800e634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68b9      	ldr	r1, [r7, #8]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fc08 	bl	800ee08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e606:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e616:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	021a      	lsls	r2, r3, #8
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	430a      	orrs	r2, r1
 800e62a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e62c:	e002      	b.n	800e634 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	75fb      	strb	r3, [r7, #23]
      break;
 800e632:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop

0800e648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d101      	bne.n	800e664 <HAL_TIM_ConfigClockSource+0x1c>
 800e660:	2302      	movs	r3, #2
 800e662:	e0b6      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x18a>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2202      	movs	r2, #2
 800e670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e682:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e68e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6a0:	d03e      	beq.n	800e720 <HAL_TIM_ConfigClockSource+0xd8>
 800e6a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6a6:	f200 8087 	bhi.w	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6ae:	f000 8086 	beq.w	800e7be <HAL_TIM_ConfigClockSource+0x176>
 800e6b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6b6:	d87f      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6b8:	2b70      	cmp	r3, #112	@ 0x70
 800e6ba:	d01a      	beq.n	800e6f2 <HAL_TIM_ConfigClockSource+0xaa>
 800e6bc:	2b70      	cmp	r3, #112	@ 0x70
 800e6be:	d87b      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6c0:	2b60      	cmp	r3, #96	@ 0x60
 800e6c2:	d050      	beq.n	800e766 <HAL_TIM_ConfigClockSource+0x11e>
 800e6c4:	2b60      	cmp	r3, #96	@ 0x60
 800e6c6:	d877      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6c8:	2b50      	cmp	r3, #80	@ 0x50
 800e6ca:	d03c      	beq.n	800e746 <HAL_TIM_ConfigClockSource+0xfe>
 800e6cc:	2b50      	cmp	r3, #80	@ 0x50
 800e6ce:	d873      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6d0:	2b40      	cmp	r3, #64	@ 0x40
 800e6d2:	d058      	beq.n	800e786 <HAL_TIM_ConfigClockSource+0x13e>
 800e6d4:	2b40      	cmp	r3, #64	@ 0x40
 800e6d6:	d86f      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6d8:	2b30      	cmp	r3, #48	@ 0x30
 800e6da:	d064      	beq.n	800e7a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e6dc:	2b30      	cmp	r3, #48	@ 0x30
 800e6de:	d86b      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6e0:	2b20      	cmp	r3, #32
 800e6e2:	d060      	beq.n	800e7a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e6e4:	2b20      	cmp	r3, #32
 800e6e6:	d867      	bhi.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d05c      	beq.n	800e7a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e6ec:	2b10      	cmp	r3, #16
 800e6ee:	d05a      	beq.n	800e7a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e6f0:	e062      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e702:	f000 fd85 	bl	800f210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	609a      	str	r2, [r3, #8]
      break;
 800e71e:	e04f      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e730:	f000 fd6e 	bl	800f210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	689a      	ldr	r2, [r3, #8]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e742:	609a      	str	r2, [r3, #8]
      break;
 800e744:	e03c      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e752:	461a      	mov	r2, r3
 800e754:	f000 fc2c 	bl	800efb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2150      	movs	r1, #80	@ 0x50
 800e75e:	4618      	mov	r0, r3
 800e760:	f000 fd3b 	bl	800f1da <TIM_ITRx_SetConfig>
      break;
 800e764:	e02c      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e772:	461a      	mov	r2, r3
 800e774:	f000 fc88 	bl	800f088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2160      	movs	r1, #96	@ 0x60
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 fd2b 	bl	800f1da <TIM_ITRx_SetConfig>
      break;
 800e784:	e01c      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e792:	461a      	mov	r2, r3
 800e794:	f000 fc0c 	bl	800efb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2140      	movs	r1, #64	@ 0x40
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fd1b 	bl	800f1da <TIM_ITRx_SetConfig>
      break;
 800e7a4:	e00c      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	f000 fd12 	bl	800f1da <TIM_ITRx_SetConfig>
      break;
 800e7b6:	e003      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800e7bc:	e000      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e7be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
	...

0800e7dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4a46      	ldr	r2, [pc, #280]	@ (800e908 <TIM_Base_SetConfig+0x12c>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d013      	beq.n	800e81c <TIM_Base_SetConfig+0x40>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7fa:	d00f      	beq.n	800e81c <TIM_Base_SetConfig+0x40>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4a43      	ldr	r2, [pc, #268]	@ (800e90c <TIM_Base_SetConfig+0x130>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d00b      	beq.n	800e81c <TIM_Base_SetConfig+0x40>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4a42      	ldr	r2, [pc, #264]	@ (800e910 <TIM_Base_SetConfig+0x134>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d007      	beq.n	800e81c <TIM_Base_SetConfig+0x40>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4a41      	ldr	r2, [pc, #260]	@ (800e914 <TIM_Base_SetConfig+0x138>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d003      	beq.n	800e81c <TIM_Base_SetConfig+0x40>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a40      	ldr	r2, [pc, #256]	@ (800e918 <TIM_Base_SetConfig+0x13c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d108      	bne.n	800e82e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4a35      	ldr	r2, [pc, #212]	@ (800e908 <TIM_Base_SetConfig+0x12c>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d01f      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e83c:	d01b      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a32      	ldr	r2, [pc, #200]	@ (800e90c <TIM_Base_SetConfig+0x130>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d017      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a31      	ldr	r2, [pc, #196]	@ (800e910 <TIM_Base_SetConfig+0x134>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d013      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a30      	ldr	r2, [pc, #192]	@ (800e914 <TIM_Base_SetConfig+0x138>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d00f      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a2f      	ldr	r2, [pc, #188]	@ (800e918 <TIM_Base_SetConfig+0x13c>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d00b      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a2e      	ldr	r2, [pc, #184]	@ (800e91c <TIM_Base_SetConfig+0x140>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d007      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4a2d      	ldr	r2, [pc, #180]	@ (800e920 <TIM_Base_SetConfig+0x144>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d003      	beq.n	800e876 <TIM_Base_SetConfig+0x9a>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4a2c      	ldr	r2, [pc, #176]	@ (800e924 <TIM_Base_SetConfig+0x148>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d108      	bne.n	800e888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e87c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4313      	orrs	r3, r2
 800e886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	4313      	orrs	r3, r2
 800e894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	689a      	ldr	r2, [r3, #8]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a16      	ldr	r2, [pc, #88]	@ (800e908 <TIM_Base_SetConfig+0x12c>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d00f      	beq.n	800e8d4 <TIM_Base_SetConfig+0xf8>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a18      	ldr	r2, [pc, #96]	@ (800e918 <TIM_Base_SetConfig+0x13c>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d00b      	beq.n	800e8d4 <TIM_Base_SetConfig+0xf8>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a17      	ldr	r2, [pc, #92]	@ (800e91c <TIM_Base_SetConfig+0x140>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d007      	beq.n	800e8d4 <TIM_Base_SetConfig+0xf8>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a16      	ldr	r2, [pc, #88]	@ (800e920 <TIM_Base_SetConfig+0x144>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d003      	beq.n	800e8d4 <TIM_Base_SetConfig+0xf8>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a15      	ldr	r2, [pc, #84]	@ (800e924 <TIM_Base_SetConfig+0x148>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d103      	bne.n	800e8dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	691a      	ldr	r2, [r3, #16]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	691b      	ldr	r3, [r3, #16]
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d105      	bne.n	800e8fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	f023 0201 	bic.w	r2, r3, #1
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	611a      	str	r2, [r3, #16]
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	3714      	adds	r7, #20
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	40012c00 	.word	0x40012c00
 800e90c:	40000400 	.word	0x40000400
 800e910:	40000800 	.word	0x40000800
 800e914:	40000c00 	.word	0x40000c00
 800e918:	40013400 	.word	0x40013400
 800e91c:	40014000 	.word	0x40014000
 800e920:	40014400 	.word	0x40014400
 800e924:	40014800 	.word	0x40014800

0800e928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e928:	b480      	push	{r7}
 800e92a:	b087      	sub	sp, #28
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a1b      	ldr	r3, [r3, #32]
 800e93c:	f023 0201 	bic.w	r2, r3, #1
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f023 0303 	bic.w	r3, r3, #3
 800e962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	f023 0302 	bic.w	r3, r3, #2
 800e974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4a2c      	ldr	r2, [pc, #176]	@ (800ea34 <TIM_OC1_SetConfig+0x10c>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d00f      	beq.n	800e9a8 <TIM_OC1_SetConfig+0x80>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	4a2b      	ldr	r2, [pc, #172]	@ (800ea38 <TIM_OC1_SetConfig+0x110>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d00b      	beq.n	800e9a8 <TIM_OC1_SetConfig+0x80>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4a2a      	ldr	r2, [pc, #168]	@ (800ea3c <TIM_OC1_SetConfig+0x114>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d007      	beq.n	800e9a8 <TIM_OC1_SetConfig+0x80>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4a29      	ldr	r2, [pc, #164]	@ (800ea40 <TIM_OC1_SetConfig+0x118>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d003      	beq.n	800e9a8 <TIM_OC1_SetConfig+0x80>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4a28      	ldr	r2, [pc, #160]	@ (800ea44 <TIM_OC1_SetConfig+0x11c>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d10c      	bne.n	800e9c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	f023 0308 	bic.w	r3, r3, #8
 800e9ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	697a      	ldr	r2, [r7, #20]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f023 0304 	bic.w	r3, r3, #4
 800e9c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4a1b      	ldr	r2, [pc, #108]	@ (800ea34 <TIM_OC1_SetConfig+0x10c>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d00f      	beq.n	800e9ea <TIM_OC1_SetConfig+0xc2>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a1a      	ldr	r2, [pc, #104]	@ (800ea38 <TIM_OC1_SetConfig+0x110>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d00b      	beq.n	800e9ea <TIM_OC1_SetConfig+0xc2>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a19      	ldr	r2, [pc, #100]	@ (800ea3c <TIM_OC1_SetConfig+0x114>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d007      	beq.n	800e9ea <TIM_OC1_SetConfig+0xc2>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4a18      	ldr	r2, [pc, #96]	@ (800ea40 <TIM_OC1_SetConfig+0x118>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d003      	beq.n	800e9ea <TIM_OC1_SetConfig+0xc2>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4a17      	ldr	r2, [pc, #92]	@ (800ea44 <TIM_OC1_SetConfig+0x11c>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d111      	bne.n	800ea0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	693a      	ldr	r2, [r7, #16]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	699b      	ldr	r3, [r3, #24]
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	693a      	ldr	r2, [r7, #16]
 800ea12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	685a      	ldr	r2, [r3, #4]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	621a      	str	r2, [r3, #32]
}
 800ea28:	bf00      	nop
 800ea2a:	371c      	adds	r7, #28
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	40012c00 	.word	0x40012c00
 800ea38:	40013400 	.word	0x40013400
 800ea3c:	40014000 	.word	0x40014000
 800ea40:	40014400 	.word	0x40014400
 800ea44:	40014800 	.word	0x40014800

0800ea48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a1b      	ldr	r3, [r3, #32]
 800ea5c:	f023 0210 	bic.w	r2, r3, #16
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	699b      	ldr	r3, [r3, #24]
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ea76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	021b      	lsls	r3, r3, #8
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	f023 0320 	bic.w	r3, r3, #32
 800ea96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	011b      	lsls	r3, r3, #4
 800ea9e:	697a      	ldr	r2, [r7, #20]
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a28      	ldr	r2, [pc, #160]	@ (800eb48 <TIM_OC2_SetConfig+0x100>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d003      	beq.n	800eab4 <TIM_OC2_SetConfig+0x6c>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a27      	ldr	r2, [pc, #156]	@ (800eb4c <TIM_OC2_SetConfig+0x104>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d10d      	bne.n	800ead0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	011b      	lsls	r3, r3, #4
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	4313      	orrs	r3, r2
 800eac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a1d      	ldr	r2, [pc, #116]	@ (800eb48 <TIM_OC2_SetConfig+0x100>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d00f      	beq.n	800eaf8 <TIM_OC2_SetConfig+0xb0>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4a1c      	ldr	r2, [pc, #112]	@ (800eb4c <TIM_OC2_SetConfig+0x104>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d00b      	beq.n	800eaf8 <TIM_OC2_SetConfig+0xb0>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	4a1b      	ldr	r2, [pc, #108]	@ (800eb50 <TIM_OC2_SetConfig+0x108>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d007      	beq.n	800eaf8 <TIM_OC2_SetConfig+0xb0>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4a1a      	ldr	r2, [pc, #104]	@ (800eb54 <TIM_OC2_SetConfig+0x10c>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d003      	beq.n	800eaf8 <TIM_OC2_SetConfig+0xb0>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a19      	ldr	r2, [pc, #100]	@ (800eb58 <TIM_OC2_SetConfig+0x110>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d113      	bne.n	800eb20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eafe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	695b      	ldr	r3, [r3, #20]
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	693a      	ldr	r2, [r7, #16]
 800eb10:	4313      	orrs	r3, r2
 800eb12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	693a      	ldr	r2, [r7, #16]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	685a      	ldr	r2, [r3, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	697a      	ldr	r2, [r7, #20]
 800eb38:	621a      	str	r2, [r3, #32]
}
 800eb3a:	bf00      	nop
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	40012c00 	.word	0x40012c00
 800eb4c:	40013400 	.word	0x40013400
 800eb50:	40014000 	.word	0x40014000
 800eb54:	40014400 	.word	0x40014400
 800eb58:	40014800 	.word	0x40014800

0800eb5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b087      	sub	sp, #28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a1b      	ldr	r3, [r3, #32]
 800eb70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	69db      	ldr	r3, [r3, #28]
 800eb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f023 0303 	bic.w	r3, r3, #3
 800eb96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	021b      	lsls	r3, r3, #8
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a27      	ldr	r2, [pc, #156]	@ (800ec58 <TIM_OC3_SetConfig+0xfc>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d003      	beq.n	800ebc6 <TIM_OC3_SetConfig+0x6a>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4a26      	ldr	r2, [pc, #152]	@ (800ec5c <TIM_OC3_SetConfig+0x100>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d10d      	bne.n	800ebe2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ebe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a1c      	ldr	r2, [pc, #112]	@ (800ec58 <TIM_OC3_SetConfig+0xfc>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d00f      	beq.n	800ec0a <TIM_OC3_SetConfig+0xae>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a1b      	ldr	r2, [pc, #108]	@ (800ec5c <TIM_OC3_SetConfig+0x100>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d00b      	beq.n	800ec0a <TIM_OC3_SetConfig+0xae>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a1a      	ldr	r2, [pc, #104]	@ (800ec60 <TIM_OC3_SetConfig+0x104>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d007      	beq.n	800ec0a <TIM_OC3_SetConfig+0xae>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a19      	ldr	r2, [pc, #100]	@ (800ec64 <TIM_OC3_SetConfig+0x108>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d003      	beq.n	800ec0a <TIM_OC3_SetConfig+0xae>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a18      	ldr	r2, [pc, #96]	@ (800ec68 <TIM_OC3_SetConfig+0x10c>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d113      	bne.n	800ec32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	011b      	lsls	r3, r3, #4
 800ec20:	693a      	ldr	r2, [r7, #16]
 800ec22:	4313      	orrs	r3, r2
 800ec24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	699b      	ldr	r3, [r3, #24]
 800ec2a:	011b      	lsls	r3, r3, #4
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	693a      	ldr	r2, [r7, #16]
 800ec36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	697a      	ldr	r2, [r7, #20]
 800ec4a:	621a      	str	r2, [r3, #32]
}
 800ec4c:	bf00      	nop
 800ec4e:	371c      	adds	r7, #28
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	40012c00 	.word	0x40012c00
 800ec5c:	40013400 	.word	0x40013400
 800ec60:	40014000 	.word	0x40014000
 800ec64:	40014400 	.word	0x40014400
 800ec68:	40014800 	.word	0x40014800

0800ec6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a1b      	ldr	r3, [r3, #32]
 800ec7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6a1b      	ldr	r3, [r3, #32]
 800ec80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	69db      	ldr	r3, [r3, #28]
 800ec92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ec9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ec9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	031b      	lsls	r3, r3, #12
 800ecc2:	693a      	ldr	r2, [r7, #16]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a18      	ldr	r2, [pc, #96]	@ (800ed2c <TIM_OC4_SetConfig+0xc0>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d00f      	beq.n	800ecf0 <TIM_OC4_SetConfig+0x84>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	4a17      	ldr	r2, [pc, #92]	@ (800ed30 <TIM_OC4_SetConfig+0xc4>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d00b      	beq.n	800ecf0 <TIM_OC4_SetConfig+0x84>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a16      	ldr	r2, [pc, #88]	@ (800ed34 <TIM_OC4_SetConfig+0xc8>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d007      	beq.n	800ecf0 <TIM_OC4_SetConfig+0x84>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a15      	ldr	r2, [pc, #84]	@ (800ed38 <TIM_OC4_SetConfig+0xcc>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d003      	beq.n	800ecf0 <TIM_OC4_SetConfig+0x84>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a14      	ldr	r2, [pc, #80]	@ (800ed3c <TIM_OC4_SetConfig+0xd0>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d109      	bne.n	800ed04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ecf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	019b      	lsls	r3, r3, #6
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	4313      	orrs	r3, r2
 800ed02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	697a      	ldr	r2, [r7, #20]
 800ed08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	685a      	ldr	r2, [r3, #4]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	693a      	ldr	r2, [r7, #16]
 800ed1c:	621a      	str	r2, [r3, #32]
}
 800ed1e:	bf00      	nop
 800ed20:	371c      	adds	r7, #28
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	40012c00 	.word	0x40012c00
 800ed30:	40013400 	.word	0x40013400
 800ed34:	40014000 	.word	0x40014000
 800ed38:	40014400 	.word	0x40014400
 800ed3c:	40014800 	.word	0x40014800

0800ed40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b087      	sub	sp, #28
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a1b      	ldr	r3, [r3, #32]
 800ed54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ed84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	041b      	lsls	r3, r3, #16
 800ed8c:	693a      	ldr	r2, [r7, #16]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a17      	ldr	r2, [pc, #92]	@ (800edf4 <TIM_OC5_SetConfig+0xb4>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00f      	beq.n	800edba <TIM_OC5_SetConfig+0x7a>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a16      	ldr	r2, [pc, #88]	@ (800edf8 <TIM_OC5_SetConfig+0xb8>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d00b      	beq.n	800edba <TIM_OC5_SetConfig+0x7a>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a15      	ldr	r2, [pc, #84]	@ (800edfc <TIM_OC5_SetConfig+0xbc>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d007      	beq.n	800edba <TIM_OC5_SetConfig+0x7a>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a14      	ldr	r2, [pc, #80]	@ (800ee00 <TIM_OC5_SetConfig+0xc0>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d003      	beq.n	800edba <TIM_OC5_SetConfig+0x7a>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4a13      	ldr	r2, [pc, #76]	@ (800ee04 <TIM_OC5_SetConfig+0xc4>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d109      	bne.n	800edce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800edc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	021b      	lsls	r3, r3, #8
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	4313      	orrs	r3, r2
 800edcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	685a      	ldr	r2, [r3, #4]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	693a      	ldr	r2, [r7, #16]
 800ede6:	621a      	str	r2, [r3, #32]
}
 800ede8:	bf00      	nop
 800edea:	371c      	adds	r7, #28
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr
 800edf4:	40012c00 	.word	0x40012c00
 800edf8:	40013400 	.word	0x40013400
 800edfc:	40014000 	.word	0x40014000
 800ee00:	40014400 	.word	0x40014400
 800ee04:	40014800 	.word	0x40014800

0800ee08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ee36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	021b      	lsls	r3, r3, #8
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ee4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	051b      	lsls	r3, r3, #20
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a18      	ldr	r2, [pc, #96]	@ (800eec0 <TIM_OC6_SetConfig+0xb8>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d00f      	beq.n	800ee84 <TIM_OC6_SetConfig+0x7c>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4a17      	ldr	r2, [pc, #92]	@ (800eec4 <TIM_OC6_SetConfig+0xbc>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d00b      	beq.n	800ee84 <TIM_OC6_SetConfig+0x7c>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a16      	ldr	r2, [pc, #88]	@ (800eec8 <TIM_OC6_SetConfig+0xc0>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d007      	beq.n	800ee84 <TIM_OC6_SetConfig+0x7c>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a15      	ldr	r2, [pc, #84]	@ (800eecc <TIM_OC6_SetConfig+0xc4>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d003      	beq.n	800ee84 <TIM_OC6_SetConfig+0x7c>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4a14      	ldr	r2, [pc, #80]	@ (800eed0 <TIM_OC6_SetConfig+0xc8>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d109      	bne.n	800ee98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	695b      	ldr	r3, [r3, #20]
 800ee90:	029b      	lsls	r3, r3, #10
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	4313      	orrs	r3, r2
 800ee96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	685a      	ldr	r2, [r3, #4]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	621a      	str	r2, [r3, #32]
}
 800eeb2:	bf00      	nop
 800eeb4:	371c      	adds	r7, #28
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	40012c00 	.word	0x40012c00
 800eec4:	40013400 	.word	0x40013400
 800eec8:	40014000 	.word	0x40014000
 800eecc:	40014400 	.word	0x40014400
 800eed0:	40014800 	.word	0x40014800

0800eed4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6a1b      	ldr	r3, [r3, #32]
 800eeec:	f023 0201 	bic.w	r2, r3, #1
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	4a26      	ldr	r2, [pc, #152]	@ (800ef98 <TIM_TI1_SetConfig+0xc4>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d017      	beq.n	800ef32 <TIM_TI1_SetConfig+0x5e>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef08:	d013      	beq.n	800ef32 <TIM_TI1_SetConfig+0x5e>
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	4a23      	ldr	r2, [pc, #140]	@ (800ef9c <TIM_TI1_SetConfig+0xc8>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d00f      	beq.n	800ef32 <TIM_TI1_SetConfig+0x5e>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	4a22      	ldr	r2, [pc, #136]	@ (800efa0 <TIM_TI1_SetConfig+0xcc>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d00b      	beq.n	800ef32 <TIM_TI1_SetConfig+0x5e>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	4a21      	ldr	r2, [pc, #132]	@ (800efa4 <TIM_TI1_SetConfig+0xd0>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d007      	beq.n	800ef32 <TIM_TI1_SetConfig+0x5e>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	4a20      	ldr	r2, [pc, #128]	@ (800efa8 <TIM_TI1_SetConfig+0xd4>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d003      	beq.n	800ef32 <TIM_TI1_SetConfig+0x5e>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	4a1f      	ldr	r2, [pc, #124]	@ (800efac <TIM_TI1_SetConfig+0xd8>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d101      	bne.n	800ef36 <TIM_TI1_SetConfig+0x62>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <TIM_TI1_SetConfig+0x64>
 800ef36:	2300      	movs	r3, #0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d008      	beq.n	800ef4e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	f023 0303 	bic.w	r3, r3, #3
 800ef42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	617b      	str	r3, [r7, #20]
 800ef4c:	e003      	b.n	800ef56 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	f043 0301 	orr.w	r3, r3, #1
 800ef54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	011b      	lsls	r3, r3, #4
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	697a      	ldr	r2, [r7, #20]
 800ef66:	4313      	orrs	r3, r2
 800ef68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	f023 030a 	bic.w	r3, r3, #10
 800ef70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	f003 030a 	and.w	r3, r3, #10
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	693a      	ldr	r2, [r7, #16]
 800ef88:	621a      	str	r2, [r3, #32]
}
 800ef8a:	bf00      	nop
 800ef8c:	371c      	adds	r7, #28
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	40012c00 	.word	0x40012c00
 800ef9c:	40000400 	.word	0x40000400
 800efa0:	40000800 	.word	0x40000800
 800efa4:	40000c00 	.word	0x40000c00
 800efa8:	40013400 	.word	0x40013400
 800efac:	40014000 	.word	0x40014000

0800efb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b087      	sub	sp, #28
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6a1b      	ldr	r3, [r3, #32]
 800efc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	f023 0201 	bic.w	r2, r3, #1
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800efda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	011b      	lsls	r3, r3, #4
 800efe0:	693a      	ldr	r2, [r7, #16]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	f023 030a 	bic.w	r3, r3, #10
 800efec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800efee:	697a      	ldr	r2, [r7, #20]
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	4313      	orrs	r3, r2
 800eff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	621a      	str	r2, [r3, #32]
}
 800f002:	bf00      	nop
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f00e:	b480      	push	{r7}
 800f010:	b087      	sub	sp, #28
 800f012:	af00      	add	r7, sp, #0
 800f014:	60f8      	str	r0, [r7, #12]
 800f016:	60b9      	str	r1, [r7, #8]
 800f018:	607a      	str	r2, [r7, #4]
 800f01a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6a1b      	ldr	r3, [r3, #32]
 800f026:	f023 0210 	bic.w	r2, r3, #16
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f03a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	021b      	lsls	r3, r3, #8
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	4313      	orrs	r3, r2
 800f044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f04c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	031b      	lsls	r3, r3, #12
 800f052:	b29b      	uxth	r3, r3
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	4313      	orrs	r3, r2
 800f058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f060:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	011b      	lsls	r3, r3, #4
 800f066:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	697a      	ldr	r2, [r7, #20]
 800f07a:	621a      	str	r2, [r3, #32]
}
 800f07c:	bf00      	nop
 800f07e:	371c      	adds	r7, #28
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f088:	b480      	push	{r7}
 800f08a:	b087      	sub	sp, #28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	6a1b      	ldr	r3, [r3, #32]
 800f098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	f023 0210 	bic.w	r2, r3, #16
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f0b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	031b      	lsls	r3, r3, #12
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f0c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	011b      	lsls	r3, r3, #4
 800f0ca:	697a      	ldr	r2, [r7, #20]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	693a      	ldr	r2, [r7, #16]
 800f0d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	621a      	str	r2, [r3, #32]
}
 800f0dc:	bf00      	nop
 800f0de:	371c      	adds	r7, #28
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	f023 0303 	bic.w	r3, r3, #3
 800f114:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800f116:	693a      	ldr	r2, [r7, #16]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f124:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	011b      	lsls	r3, r3, #4
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	693a      	ldr	r2, [r7, #16]
 800f12e:	4313      	orrs	r3, r2
 800f130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f138:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	021b      	lsls	r3, r3, #8
 800f13e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f142:	697a      	ldr	r2, [r7, #20]
 800f144:	4313      	orrs	r3, r2
 800f146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	693a      	ldr	r2, [r7, #16]
 800f14c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	697a      	ldr	r2, [r7, #20]
 800f152:	621a      	str	r2, [r3, #32]
}
 800f154:	bf00      	nop
 800f156:	371c      	adds	r7, #28
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f160:	b480      	push	{r7}
 800f162:	b087      	sub	sp, #28
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
 800f16c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6a1b      	ldr	r3, [r3, #32]
 800f178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	69db      	ldr	r3, [r3, #28]
 800f184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f18c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	021b      	lsls	r3, r3, #8
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	4313      	orrs	r3, r2
 800f196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f19e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	031b      	lsls	r3, r3, #12
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	693a      	ldr	r2, [r7, #16]
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f1b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	031b      	lsls	r3, r3, #12
 800f1b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	621a      	str	r2, [r3, #32]
}
 800f1ce:	bf00      	nop
 800f1d0:	371c      	adds	r7, #28
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr

0800f1da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f1da:	b480      	push	{r7}
 800f1dc:	b085      	sub	sp, #20
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
 800f1e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	f043 0307 	orr.w	r3, r3, #7
 800f1fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	609a      	str	r2, [r3, #8]
}
 800f204:	bf00      	nop
 800f206:	3714      	adds	r7, #20
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f22a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	021a      	lsls	r2, r3, #8
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	431a      	orrs	r2, r3
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	4313      	orrs	r3, r2
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	609a      	str	r2, [r3, #8]
}
 800f244:	bf00      	nop
 800f246:	371c      	adds	r7, #28
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f250:	b480      	push	{r7}
 800f252:	b087      	sub	sp, #28
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	f003 031f 	and.w	r3, r3, #31
 800f262:	2201      	movs	r2, #1
 800f264:	fa02 f303 	lsl.w	r3, r2, r3
 800f268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6a1a      	ldr	r2, [r3, #32]
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	43db      	mvns	r3, r3
 800f272:	401a      	ands	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	6a1a      	ldr	r2, [r3, #32]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	f003 031f 	and.w	r3, r3, #31
 800f282:	6879      	ldr	r1, [r7, #4]
 800f284:	fa01 f303 	lsl.w	r3, r1, r3
 800f288:	431a      	orrs	r2, r3
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	621a      	str	r2, [r3, #32]
}
 800f28e:	bf00      	nop
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
	...

0800f29c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d101      	bne.n	800f2b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	e068      	b.n	800f386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2202      	movs	r2, #2
 800f2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a2e      	ldr	r2, [pc, #184]	@ (800f394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d004      	beq.n	800f2e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a2d      	ldr	r2, [pc, #180]	@ (800f398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d108      	bne.n	800f2fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f2ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	4313      	orrs	r3, r2
 800f30a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a1e      	ldr	r2, [pc, #120]	@ (800f394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d01d      	beq.n	800f35a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f326:	d018      	beq.n	800f35a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a1b      	ldr	r2, [pc, #108]	@ (800f39c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d013      	beq.n	800f35a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a1a      	ldr	r2, [pc, #104]	@ (800f3a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d00e      	beq.n	800f35a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a18      	ldr	r2, [pc, #96]	@ (800f3a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d009      	beq.n	800f35a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a13      	ldr	r2, [pc, #76]	@ (800f398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d004      	beq.n	800f35a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a14      	ldr	r2, [pc, #80]	@ (800f3a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d10c      	bne.n	800f374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	4313      	orrs	r3, r2
 800f36a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	40012c00 	.word	0x40012c00
 800f398:	40013400 	.word	0x40013400
 800f39c:	40000400 	.word	0x40000400
 800f3a0:	40000800 	.word	0x40000800
 800f3a4:	40000c00 	.word	0x40000c00
 800f3a8:	40014000 	.word	0x40014000

0800f3ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d101      	bne.n	800f3c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	e065      	b.n	800f494 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4313      	orrs	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	691b      	ldr	r3, [r3, #16]
 800f412:	4313      	orrs	r3, r2
 800f414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	4313      	orrs	r3, r2
 800f422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	699b      	ldr	r3, [r3, #24]
 800f43c:	041b      	lsls	r3, r3, #16
 800f43e:	4313      	orrs	r3, r2
 800f440:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4a16      	ldr	r2, [pc, #88]	@ (800f4a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d004      	beq.n	800f456 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a14      	ldr	r2, [pc, #80]	@ (800f4a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d115      	bne.n	800f482 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f460:	051b      	lsls	r3, r3, #20
 800f462:	4313      	orrs	r3, r2
 800f464:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	69db      	ldr	r3, [r3, #28]
 800f470:	4313      	orrs	r3, r2
 800f472:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	4313      	orrs	r3, r2
 800f480:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3714      	adds	r7, #20
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	40012c00 	.word	0x40012c00
 800f4a4:	40013400 	.word	0x40013400

0800f4a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e040      	b.n	800f53c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d106      	bne.n	800f4d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7f4 fe16 	bl	80040fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2224      	movs	r2, #36	@ 0x24
 800f4d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f022 0201 	bic.w	r2, r2, #1
 800f4e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d002      	beq.n	800f4f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 fc88 	bl	800fe04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f9cd 	bl	800f894 <UART_SetConfig>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d101      	bne.n	800f504 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f500:	2301      	movs	r3, #1
 800f502:	e01b      	b.n	800f53c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	689a      	ldr	r2, [r3, #8]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f042 0201 	orr.w	r2, r2, #1
 800f532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 fd07 	bl	800ff48 <UART_CheckIdleState>
 800f53a:	4603      	mov	r3, r0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d101      	bne.n	800f556 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800f552:	2301      	movs	r3, #1
 800f554:	e048      	b.n	800f5e8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d106      	bne.n	800f56c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f7f4 fdc8 	bl	80040fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2224      	movs	r2, #36	@ 0x24
 800f570:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f022 0201 	bic.w	r2, r2, #1
 800f580:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 fc3a 	bl	800fe04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 f97f 	bl	800f894 <UART_SetConfig>
 800f596:	4603      	mov	r3, r0
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d101      	bne.n	800f5a0 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 800f59c:	2301      	movs	r3, #1
 800f59e:	e023      	b.n	800f5e8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f5ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	689a      	ldr	r2, [r3, #8]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800f5be:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	689a      	ldr	r2, [r3, #8]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f042 0208 	orr.w	r2, r2, #8
 800f5ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f042 0201 	orr.w	r2, r2, #1
 800f5de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fcb1 	bl	800ff48 <UART_CheckIdleState>
 800f5e6:	4603      	mov	r3, r0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08a      	sub	sp, #40	@ 0x28
 800f5f4:	af02      	add	r7, sp, #8
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	603b      	str	r3, [r7, #0]
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f604:	2b20      	cmp	r3, #32
 800f606:	d177      	bne.n	800f6f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d002      	beq.n	800f614 <HAL_UART_Transmit+0x24>
 800f60e:	88fb      	ldrh	r3, [r7, #6]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f614:	2301      	movs	r3, #1
 800f616:	e070      	b.n	800f6fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2221      	movs	r2, #33	@ 0x21
 800f624:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f626:	f7f7 ff81 	bl	800752c <HAL_GetTick>
 800f62a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	88fa      	ldrh	r2, [r7, #6]
 800f630:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	88fa      	ldrh	r2, [r7, #6]
 800f638:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f644:	d108      	bne.n	800f658 <HAL_UART_Transmit+0x68>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d104      	bne.n	800f658 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f64e:	2300      	movs	r3, #0
 800f650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	61bb      	str	r3, [r7, #24]
 800f656:	e003      	b.n	800f660 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f65c:	2300      	movs	r3, #0
 800f65e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f660:	e02f      	b.n	800f6c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2200      	movs	r2, #0
 800f66a:	2180      	movs	r1, #128	@ 0x80
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f000 fd13 	bl	8010098 <UART_WaitOnFlagUntilTimeout>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d004      	beq.n	800f682 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2220      	movs	r2, #32
 800f67c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f67e:	2303      	movs	r3, #3
 800f680:	e03b      	b.n	800f6fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d10b      	bne.n	800f6a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	881a      	ldrh	r2, [r3, #0]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f694:	b292      	uxth	r2, r2
 800f696:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	3302      	adds	r3, #2
 800f69c:	61bb      	str	r3, [r7, #24]
 800f69e:	e007      	b.n	800f6b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	781a      	ldrb	r2, [r3, #0]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1c9      	bne.n	800f662 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	2140      	movs	r1, #64	@ 0x40
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f000 fcdd 	bl	8010098 <UART_WaitOnFlagUntilTimeout>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d004      	beq.n	800f6ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2220      	movs	r2, #32
 800f6e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f6ea:	2303      	movs	r3, #3
 800f6ec:	e005      	b.n	800f6fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	e000      	b.n	800f6fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f6f8:	2302      	movs	r3, #2
  }
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3720      	adds	r7, #32
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f702:	b580      	push	{r7, lr}
 800f704:	b08a      	sub	sp, #40	@ 0x28
 800f706:	af02      	add	r7, sp, #8
 800f708:	60f8      	str	r0, [r7, #12]
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	603b      	str	r3, [r7, #0]
 800f70e:	4613      	mov	r3, r2
 800f710:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f718:	2b20      	cmp	r3, #32
 800f71a:	f040 80b6 	bne.w	800f88a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d002      	beq.n	800f72a <HAL_UART_Receive+0x28>
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d101      	bne.n	800f72e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e0ae      	b.n	800f88c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2222      	movs	r2, #34	@ 0x22
 800f73a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f744:	f7f7 fef2 	bl	800752c <HAL_GetTick>
 800f748:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	88fa      	ldrh	r2, [r7, #6]
 800f74e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	88fa      	ldrh	r2, [r7, #6]
 800f756:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	689b      	ldr	r3, [r3, #8]
 800f75e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f762:	d10e      	bne.n	800f782 <HAL_UART_Receive+0x80>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d105      	bne.n	800f778 <HAL_UART_Receive+0x76>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f772:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f776:	e02d      	b.n	800f7d4 <HAL_UART_Receive+0xd2>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	22ff      	movs	r2, #255	@ 0xff
 800f77c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f780:	e028      	b.n	800f7d4 <HAL_UART_Receive+0xd2>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10d      	bne.n	800f7a6 <HAL_UART_Receive+0xa4>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d104      	bne.n	800f79c <HAL_UART_Receive+0x9a>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	22ff      	movs	r2, #255	@ 0xff
 800f796:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f79a:	e01b      	b.n	800f7d4 <HAL_UART_Receive+0xd2>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	227f      	movs	r2, #127	@ 0x7f
 800f7a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f7a4:	e016      	b.n	800f7d4 <HAL_UART_Receive+0xd2>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f7ae:	d10d      	bne.n	800f7cc <HAL_UART_Receive+0xca>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d104      	bne.n	800f7c2 <HAL_UART_Receive+0xc0>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	227f      	movs	r2, #127	@ 0x7f
 800f7bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f7c0:	e008      	b.n	800f7d4 <HAL_UART_Receive+0xd2>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	223f      	movs	r2, #63	@ 0x3f
 800f7c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f7ca:	e003      	b.n	800f7d4 <HAL_UART_Receive+0xd2>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f7da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7e4:	d108      	bne.n	800f7f8 <HAL_UART_Receive+0xf6>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d104      	bne.n	800f7f8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	61bb      	str	r3, [r7, #24]
 800f7f6:	e003      	b.n	800f800 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f800:	e037      	b.n	800f872 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	2200      	movs	r2, #0
 800f80a:	2120      	movs	r1, #32
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 fc43 	bl	8010098 <UART_WaitOnFlagUntilTimeout>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2220      	movs	r2, #32
 800f81c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f820:	2303      	movs	r3, #3
 800f822:	e033      	b.n	800f88c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d10c      	bne.n	800f844 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f830:	b29a      	uxth	r2, r3
 800f832:	8a7b      	ldrh	r3, [r7, #18]
 800f834:	4013      	ands	r3, r2
 800f836:	b29a      	uxth	r2, r3
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	3302      	adds	r3, #2
 800f840:	61bb      	str	r3, [r7, #24]
 800f842:	e00d      	b.n	800f860 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	8a7b      	ldrh	r3, [r7, #18]
 800f850:	b2db      	uxtb	r3, r3
 800f852:	4013      	ands	r3, r2
 800f854:	b2da      	uxtb	r2, r3
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	3301      	adds	r3, #1
 800f85e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f866:	b29b      	uxth	r3, r3
 800f868:	3b01      	subs	r3, #1
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f878:	b29b      	uxth	r3, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1c1      	bne.n	800f802 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2220      	movs	r2, #32
 800f882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f886:	2300      	movs	r3, #0
 800f888:	e000      	b.n	800f88c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800f88a:	2302      	movs	r3, #2
  }
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3720      	adds	r7, #32
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f898:	b08a      	sub	sp, #40	@ 0x28
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	689a      	ldr	r2, [r3, #8]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	431a      	orrs	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	695b      	ldr	r3, [r3, #20]
 800f8b2:	431a      	orrs	r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	69db      	ldr	r3, [r3, #28]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	4ba4      	ldr	r3, [pc, #656]	@ (800fb54 <UART_SetConfig+0x2c0>)
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	6812      	ldr	r2, [r2, #0]
 800f8ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f8cc:	430b      	orrs	r3, r1
 800f8ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	68da      	ldr	r2, [r3, #12]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	430a      	orrs	r2, r1
 800f8e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	699b      	ldr	r3, [r3, #24]
 800f8ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a99      	ldr	r2, [pc, #612]	@ (800fb58 <UART_SetConfig+0x2c4>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d004      	beq.n	800f900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	689b      	ldr	r3, [r3, #8]
 800f906:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f910:	430a      	orrs	r2, r1
 800f912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a90      	ldr	r2, [pc, #576]	@ (800fb5c <UART_SetConfig+0x2c8>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d126      	bne.n	800f96c <UART_SetConfig+0xd8>
 800f91e:	4b90      	ldr	r3, [pc, #576]	@ (800fb60 <UART_SetConfig+0x2cc>)
 800f920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f924:	f003 0303 	and.w	r3, r3, #3
 800f928:	2b03      	cmp	r3, #3
 800f92a:	d81b      	bhi.n	800f964 <UART_SetConfig+0xd0>
 800f92c:	a201      	add	r2, pc, #4	@ (adr r2, 800f934 <UART_SetConfig+0xa0>)
 800f92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f932:	bf00      	nop
 800f934:	0800f945 	.word	0x0800f945
 800f938:	0800f955 	.word	0x0800f955
 800f93c:	0800f94d 	.word	0x0800f94d
 800f940:	0800f95d 	.word	0x0800f95d
 800f944:	2301      	movs	r3, #1
 800f946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f94a:	e116      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f94c:	2302      	movs	r3, #2
 800f94e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f952:	e112      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f954:	2304      	movs	r3, #4
 800f956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f95a:	e10e      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f95c:	2308      	movs	r3, #8
 800f95e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f962:	e10a      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f964:	2310      	movs	r3, #16
 800f966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f96a:	e106      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a7c      	ldr	r2, [pc, #496]	@ (800fb64 <UART_SetConfig+0x2d0>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d138      	bne.n	800f9e8 <UART_SetConfig+0x154>
 800f976:	4b7a      	ldr	r3, [pc, #488]	@ (800fb60 <UART_SetConfig+0x2cc>)
 800f978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f97c:	f003 030c 	and.w	r3, r3, #12
 800f980:	2b0c      	cmp	r3, #12
 800f982:	d82d      	bhi.n	800f9e0 <UART_SetConfig+0x14c>
 800f984:	a201      	add	r2, pc, #4	@ (adr r2, 800f98c <UART_SetConfig+0xf8>)
 800f986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f98a:	bf00      	nop
 800f98c:	0800f9c1 	.word	0x0800f9c1
 800f990:	0800f9e1 	.word	0x0800f9e1
 800f994:	0800f9e1 	.word	0x0800f9e1
 800f998:	0800f9e1 	.word	0x0800f9e1
 800f99c:	0800f9d1 	.word	0x0800f9d1
 800f9a0:	0800f9e1 	.word	0x0800f9e1
 800f9a4:	0800f9e1 	.word	0x0800f9e1
 800f9a8:	0800f9e1 	.word	0x0800f9e1
 800f9ac:	0800f9c9 	.word	0x0800f9c9
 800f9b0:	0800f9e1 	.word	0x0800f9e1
 800f9b4:	0800f9e1 	.word	0x0800f9e1
 800f9b8:	0800f9e1 	.word	0x0800f9e1
 800f9bc:	0800f9d9 	.word	0x0800f9d9
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f9c6:	e0d8      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f9c8:	2302      	movs	r3, #2
 800f9ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f9ce:	e0d4      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f9d0:	2304      	movs	r3, #4
 800f9d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f9d6:	e0d0      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f9d8:	2308      	movs	r3, #8
 800f9da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f9de:	e0cc      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f9e0:	2310      	movs	r3, #16
 800f9e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800f9e6:	e0c8      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a5e      	ldr	r2, [pc, #376]	@ (800fb68 <UART_SetConfig+0x2d4>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d125      	bne.n	800fa3e <UART_SetConfig+0x1aa>
 800f9f2:	4b5b      	ldr	r3, [pc, #364]	@ (800fb60 <UART_SetConfig+0x2cc>)
 800f9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f9f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f9fc:	2b30      	cmp	r3, #48	@ 0x30
 800f9fe:	d016      	beq.n	800fa2e <UART_SetConfig+0x19a>
 800fa00:	2b30      	cmp	r3, #48	@ 0x30
 800fa02:	d818      	bhi.n	800fa36 <UART_SetConfig+0x1a2>
 800fa04:	2b20      	cmp	r3, #32
 800fa06:	d00a      	beq.n	800fa1e <UART_SetConfig+0x18a>
 800fa08:	2b20      	cmp	r3, #32
 800fa0a:	d814      	bhi.n	800fa36 <UART_SetConfig+0x1a2>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <UART_SetConfig+0x182>
 800fa10:	2b10      	cmp	r3, #16
 800fa12:	d008      	beq.n	800fa26 <UART_SetConfig+0x192>
 800fa14:	e00f      	b.n	800fa36 <UART_SetConfig+0x1a2>
 800fa16:	2300      	movs	r3, #0
 800fa18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa1c:	e0ad      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa1e:	2302      	movs	r3, #2
 800fa20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa24:	e0a9      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa26:	2304      	movs	r3, #4
 800fa28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa2c:	e0a5      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa2e:	2308      	movs	r3, #8
 800fa30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa34:	e0a1      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa36:	2310      	movs	r3, #16
 800fa38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa3c:	e09d      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a4a      	ldr	r2, [pc, #296]	@ (800fb6c <UART_SetConfig+0x2d8>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d125      	bne.n	800fa94 <UART_SetConfig+0x200>
 800fa48:	4b45      	ldr	r3, [pc, #276]	@ (800fb60 <UART_SetConfig+0x2cc>)
 800fa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fa52:	2bc0      	cmp	r3, #192	@ 0xc0
 800fa54:	d016      	beq.n	800fa84 <UART_SetConfig+0x1f0>
 800fa56:	2bc0      	cmp	r3, #192	@ 0xc0
 800fa58:	d818      	bhi.n	800fa8c <UART_SetConfig+0x1f8>
 800fa5a:	2b80      	cmp	r3, #128	@ 0x80
 800fa5c:	d00a      	beq.n	800fa74 <UART_SetConfig+0x1e0>
 800fa5e:	2b80      	cmp	r3, #128	@ 0x80
 800fa60:	d814      	bhi.n	800fa8c <UART_SetConfig+0x1f8>
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d002      	beq.n	800fa6c <UART_SetConfig+0x1d8>
 800fa66:	2b40      	cmp	r3, #64	@ 0x40
 800fa68:	d008      	beq.n	800fa7c <UART_SetConfig+0x1e8>
 800fa6a:	e00f      	b.n	800fa8c <UART_SetConfig+0x1f8>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa72:	e082      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa74:	2302      	movs	r3, #2
 800fa76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa7a:	e07e      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa82:	e07a      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa84:	2308      	movs	r3, #8
 800fa86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa8a:	e076      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa8c:	2310      	movs	r3, #16
 800fa8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fa92:	e072      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a35      	ldr	r2, [pc, #212]	@ (800fb70 <UART_SetConfig+0x2dc>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d12a      	bne.n	800faf4 <UART_SetConfig+0x260>
 800fa9e:	4b30      	ldr	r3, [pc, #192]	@ (800fb60 <UART_SetConfig+0x2cc>)
 800faa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800faa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800faa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800faac:	d01a      	beq.n	800fae4 <UART_SetConfig+0x250>
 800faae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fab2:	d81b      	bhi.n	800faec <UART_SetConfig+0x258>
 800fab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fab8:	d00c      	beq.n	800fad4 <UART_SetConfig+0x240>
 800faba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fabe:	d815      	bhi.n	800faec <UART_SetConfig+0x258>
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d003      	beq.n	800facc <UART_SetConfig+0x238>
 800fac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fac8:	d008      	beq.n	800fadc <UART_SetConfig+0x248>
 800faca:	e00f      	b.n	800faec <UART_SetConfig+0x258>
 800facc:	2300      	movs	r3, #0
 800face:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fad2:	e052      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fad4:	2302      	movs	r3, #2
 800fad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fada:	e04e      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fadc:	2304      	movs	r3, #4
 800fade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fae2:	e04a      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fae4:	2308      	movs	r3, #8
 800fae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800faea:	e046      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800faec:	2310      	movs	r3, #16
 800faee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800faf2:	e042      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a17      	ldr	r2, [pc, #92]	@ (800fb58 <UART_SetConfig+0x2c4>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d13a      	bne.n	800fb74 <UART_SetConfig+0x2e0>
 800fafe:	4b18      	ldr	r3, [pc, #96]	@ (800fb60 <UART_SetConfig+0x2cc>)
 800fb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fb08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fb0c:	d01a      	beq.n	800fb44 <UART_SetConfig+0x2b0>
 800fb0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fb12:	d81b      	bhi.n	800fb4c <UART_SetConfig+0x2b8>
 800fb14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb18:	d00c      	beq.n	800fb34 <UART_SetConfig+0x2a0>
 800fb1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb1e:	d815      	bhi.n	800fb4c <UART_SetConfig+0x2b8>
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d003      	beq.n	800fb2c <UART_SetConfig+0x298>
 800fb24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb28:	d008      	beq.n	800fb3c <UART_SetConfig+0x2a8>
 800fb2a:	e00f      	b.n	800fb4c <UART_SetConfig+0x2b8>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fb32:	e022      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fb34:	2302      	movs	r3, #2
 800fb36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fb3a:	e01e      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fb3c:	2304      	movs	r3, #4
 800fb3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fb42:	e01a      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fb44:	2308      	movs	r3, #8
 800fb46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fb4a:	e016      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fb4c:	2310      	movs	r3, #16
 800fb4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fb52:	e012      	b.n	800fb7a <UART_SetConfig+0x2e6>
 800fb54:	efff69f3 	.word	0xefff69f3
 800fb58:	40008000 	.word	0x40008000
 800fb5c:	40013800 	.word	0x40013800
 800fb60:	40021000 	.word	0x40021000
 800fb64:	40004400 	.word	0x40004400
 800fb68:	40004800 	.word	0x40004800
 800fb6c:	40004c00 	.word	0x40004c00
 800fb70:	40005000 	.word	0x40005000
 800fb74:	2310      	movs	r3, #16
 800fb76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a9f      	ldr	r2, [pc, #636]	@ (800fdfc <UART_SetConfig+0x568>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d17a      	bne.n	800fc7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fb88:	2b08      	cmp	r3, #8
 800fb8a:	d824      	bhi.n	800fbd6 <UART_SetConfig+0x342>
 800fb8c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb94 <UART_SetConfig+0x300>)
 800fb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb92:	bf00      	nop
 800fb94:	0800fbb9 	.word	0x0800fbb9
 800fb98:	0800fbd7 	.word	0x0800fbd7
 800fb9c:	0800fbc1 	.word	0x0800fbc1
 800fba0:	0800fbd7 	.word	0x0800fbd7
 800fba4:	0800fbc7 	.word	0x0800fbc7
 800fba8:	0800fbd7 	.word	0x0800fbd7
 800fbac:	0800fbd7 	.word	0x0800fbd7
 800fbb0:	0800fbd7 	.word	0x0800fbd7
 800fbb4:	0800fbcf 	.word	0x0800fbcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbb8:	f7fb fea0 	bl	800b8fc <HAL_RCC_GetPCLK1Freq>
 800fbbc:	61f8      	str	r0, [r7, #28]
        break;
 800fbbe:	e010      	b.n	800fbe2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fbc0:	4b8f      	ldr	r3, [pc, #572]	@ (800fe00 <UART_SetConfig+0x56c>)
 800fbc2:	61fb      	str	r3, [r7, #28]
        break;
 800fbc4:	e00d      	b.n	800fbe2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbc6:	f7fb fe01 	bl	800b7cc <HAL_RCC_GetSysClockFreq>
 800fbca:	61f8      	str	r0, [r7, #28]
        break;
 800fbcc:	e009      	b.n	800fbe2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbd2:	61fb      	str	r3, [r7, #28]
        break;
 800fbd4:	e005      	b.n	800fbe2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800fbe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f000 80fb 	beq.w	800fde0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	685a      	ldr	r2, [r3, #4]
 800fbee:	4613      	mov	r3, r2
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	4413      	add	r3, r2
 800fbf4:	69fa      	ldr	r2, [r7, #28]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d305      	bcc.n	800fc06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fc00:	69fa      	ldr	r2, [r7, #28]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d903      	bls.n	800fc0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800fc06:	2301      	movs	r3, #1
 800fc08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800fc0c:	e0e8      	b.n	800fde0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	2200      	movs	r2, #0
 800fc12:	461c      	mov	r4, r3
 800fc14:	4615      	mov	r5, r2
 800fc16:	f04f 0200 	mov.w	r2, #0
 800fc1a:	f04f 0300 	mov.w	r3, #0
 800fc1e:	022b      	lsls	r3, r5, #8
 800fc20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800fc24:	0222      	lsls	r2, r4, #8
 800fc26:	68f9      	ldr	r1, [r7, #12]
 800fc28:	6849      	ldr	r1, [r1, #4]
 800fc2a:	0849      	lsrs	r1, r1, #1
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	4688      	mov	r8, r1
 800fc30:	4681      	mov	r9, r0
 800fc32:	eb12 0a08 	adds.w	sl, r2, r8
 800fc36:	eb43 0b09 	adc.w	fp, r3, r9
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	603b      	str	r3, [r7, #0]
 800fc42:	607a      	str	r2, [r7, #4]
 800fc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc48:	4650      	mov	r0, sl
 800fc4a:	4659      	mov	r1, fp
 800fc4c:	f7f0 fb18 	bl	8000280 <__aeabi_uldivmod>
 800fc50:	4602      	mov	r2, r0
 800fc52:	460b      	mov	r3, r1
 800fc54:	4613      	mov	r3, r2
 800fc56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc5e:	d308      	bcc.n	800fc72 <UART_SetConfig+0x3de>
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc66:	d204      	bcs.n	800fc72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	60da      	str	r2, [r3, #12]
 800fc70:	e0b6      	b.n	800fde0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800fc72:	2301      	movs	r3, #1
 800fc74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800fc78:	e0b2      	b.n	800fde0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc82:	d15e      	bne.n	800fd42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800fc84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fc88:	2b08      	cmp	r3, #8
 800fc8a:	d828      	bhi.n	800fcde <UART_SetConfig+0x44a>
 800fc8c:	a201      	add	r2, pc, #4	@ (adr r2, 800fc94 <UART_SetConfig+0x400>)
 800fc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc92:	bf00      	nop
 800fc94:	0800fcb9 	.word	0x0800fcb9
 800fc98:	0800fcc1 	.word	0x0800fcc1
 800fc9c:	0800fcc9 	.word	0x0800fcc9
 800fca0:	0800fcdf 	.word	0x0800fcdf
 800fca4:	0800fccf 	.word	0x0800fccf
 800fca8:	0800fcdf 	.word	0x0800fcdf
 800fcac:	0800fcdf 	.word	0x0800fcdf
 800fcb0:	0800fcdf 	.word	0x0800fcdf
 800fcb4:	0800fcd7 	.word	0x0800fcd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcb8:	f7fb fe20 	bl	800b8fc <HAL_RCC_GetPCLK1Freq>
 800fcbc:	61f8      	str	r0, [r7, #28]
        break;
 800fcbe:	e014      	b.n	800fcea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcc0:	f7fb fe32 	bl	800b928 <HAL_RCC_GetPCLK2Freq>
 800fcc4:	61f8      	str	r0, [r7, #28]
        break;
 800fcc6:	e010      	b.n	800fcea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fcc8:	4b4d      	ldr	r3, [pc, #308]	@ (800fe00 <UART_SetConfig+0x56c>)
 800fcca:	61fb      	str	r3, [r7, #28]
        break;
 800fccc:	e00d      	b.n	800fcea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fcce:	f7fb fd7d 	bl	800b7cc <HAL_RCC_GetSysClockFreq>
 800fcd2:	61f8      	str	r0, [r7, #28]
        break;
 800fcd4:	e009      	b.n	800fcea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcda:	61fb      	str	r3, [r7, #28]
        break;
 800fcdc:	e005      	b.n	800fcea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800fce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d077      	beq.n	800fde0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	005a      	lsls	r2, r3, #1
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	085b      	lsrs	r3, r3, #1
 800fcfa:	441a      	add	r2, r3
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd06:	69bb      	ldr	r3, [r7, #24]
 800fd08:	2b0f      	cmp	r3, #15
 800fd0a:	d916      	bls.n	800fd3a <UART_SetConfig+0x4a6>
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd12:	d212      	bcs.n	800fd3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	f023 030f 	bic.w	r3, r3, #15
 800fd1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	085b      	lsrs	r3, r3, #1
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	f003 0307 	and.w	r3, r3, #7
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	8afb      	ldrh	r3, [r7, #22]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	8afa      	ldrh	r2, [r7, #22]
 800fd36:	60da      	str	r2, [r3, #12]
 800fd38:	e052      	b.n	800fde0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800fd40:	e04e      	b.n	800fde0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fd46:	2b08      	cmp	r3, #8
 800fd48:	d827      	bhi.n	800fd9a <UART_SetConfig+0x506>
 800fd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd50 <UART_SetConfig+0x4bc>)
 800fd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd50:	0800fd75 	.word	0x0800fd75
 800fd54:	0800fd7d 	.word	0x0800fd7d
 800fd58:	0800fd85 	.word	0x0800fd85
 800fd5c:	0800fd9b 	.word	0x0800fd9b
 800fd60:	0800fd8b 	.word	0x0800fd8b
 800fd64:	0800fd9b 	.word	0x0800fd9b
 800fd68:	0800fd9b 	.word	0x0800fd9b
 800fd6c:	0800fd9b 	.word	0x0800fd9b
 800fd70:	0800fd93 	.word	0x0800fd93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd74:	f7fb fdc2 	bl	800b8fc <HAL_RCC_GetPCLK1Freq>
 800fd78:	61f8      	str	r0, [r7, #28]
        break;
 800fd7a:	e014      	b.n	800fda6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd7c:	f7fb fdd4 	bl	800b928 <HAL_RCC_GetPCLK2Freq>
 800fd80:	61f8      	str	r0, [r7, #28]
        break;
 800fd82:	e010      	b.n	800fda6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd84:	4b1e      	ldr	r3, [pc, #120]	@ (800fe00 <UART_SetConfig+0x56c>)
 800fd86:	61fb      	str	r3, [r7, #28]
        break;
 800fd88:	e00d      	b.n	800fda6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd8a:	f7fb fd1f 	bl	800b7cc <HAL_RCC_GetSysClockFreq>
 800fd8e:	61f8      	str	r0, [r7, #28]
        break;
 800fd90:	e009      	b.n	800fda6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd96:	61fb      	str	r3, [r7, #28]
        break;
 800fd98:	e005      	b.n	800fda6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800fda4:	bf00      	nop
    }

    if (pclk != 0U)
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d019      	beq.n	800fde0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	085a      	lsrs	r2, r3, #1
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	441a      	add	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	2b0f      	cmp	r3, #15
 800fdc4:	d909      	bls.n	800fdda <UART_SetConfig+0x546>
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdcc:	d205      	bcs.n	800fdda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	60da      	str	r2, [r3, #12]
 800fdd8:	e002      	b.n	800fde0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800fdda:	2301      	movs	r3, #1
 800fddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2200      	movs	r2, #0
 800fde4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2200      	movs	r2, #0
 800fdea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800fdec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3728      	adds	r7, #40	@ 0x28
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fdfa:	bf00      	nop
 800fdfc:	40008000 	.word	0x40008000
 800fe00:	00f42400 	.word	0x00f42400

0800fe04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe10:	f003 0308 	and.w	r3, r3, #8
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00a      	beq.n	800fe2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	430a      	orrs	r2, r1
 800fe2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe32:	f003 0301 	and.w	r3, r3, #1
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00a      	beq.n	800fe50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	430a      	orrs	r2, r1
 800fe4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe54:	f003 0302 	and.w	r3, r3, #2
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00a      	beq.n	800fe72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	430a      	orrs	r2, r1
 800fe70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe76:	f003 0304 	and.w	r3, r3, #4
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d00a      	beq.n	800fe94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	430a      	orrs	r2, r1
 800fe92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe98:	f003 0310 	and.w	r3, r3, #16
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00a      	beq.n	800feb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	430a      	orrs	r2, r1
 800feb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feba:	f003 0320 	and.w	r3, r3, #32
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00a      	beq.n	800fed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	430a      	orrs	r2, r1
 800fed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01a      	beq.n	800ff1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	430a      	orrs	r2, r1
 800fef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fefe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff02:	d10a      	bne.n	800ff1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	430a      	orrs	r2, r1
 800ff18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00a      	beq.n	800ff3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	430a      	orrs	r2, r1
 800ff3a:	605a      	str	r2, [r3, #4]
  }
}
 800ff3c:	bf00      	nop
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b098      	sub	sp, #96	@ 0x60
 800ff4c:	af02      	add	r7, sp, #8
 800ff4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff58:	f7f7 fae8 	bl	800752c <HAL_GetTick>
 800ff5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f003 0308 	and.w	r3, r3, #8
 800ff68:	2b08      	cmp	r3, #8
 800ff6a:	d12e      	bne.n	800ffca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff74:	2200      	movs	r2, #0
 800ff76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f88c 	bl	8010098 <UART_WaitOnFlagUntilTimeout>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d021      	beq.n	800ffca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff8e:	e853 3f00 	ldrex	r3, [r3]
 800ff92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ff94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ffa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ffaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ffac:	e841 2300 	strex	r3, r2, [r1]
 800ffb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ffb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1e6      	bne.n	800ff86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2220      	movs	r2, #32
 800ffbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffc6:	2303      	movs	r3, #3
 800ffc8:	e062      	b.n	8010090 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f003 0304 	and.w	r3, r3, #4
 800ffd4:	2b04      	cmp	r3, #4
 800ffd6:	d149      	bne.n	801006c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f856 	bl	8010098 <UART_WaitOnFlagUntilTimeout>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d03c      	beq.n	801006c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffa:	e853 3f00 	ldrex	r3, [r3]
 800fffe:	623b      	str	r3, [r7, #32]
   return(result);
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	461a      	mov	r2, r3
 801000e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010010:	633b      	str	r3, [r7, #48]	@ 0x30
 8010012:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010018:	e841 2300 	strex	r3, r2, [r1]
 801001c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801001e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1e6      	bne.n	800fff2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3308      	adds	r3, #8
 801002a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	e853 3f00 	ldrex	r3, [r3]
 8010032:	60fb      	str	r3, [r7, #12]
   return(result);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f023 0301 	bic.w	r3, r3, #1
 801003a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3308      	adds	r3, #8
 8010042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010044:	61fa      	str	r2, [r7, #28]
 8010046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010048:	69b9      	ldr	r1, [r7, #24]
 801004a:	69fa      	ldr	r2, [r7, #28]
 801004c:	e841 2300 	strex	r3, r2, [r1]
 8010050:	617b      	str	r3, [r7, #20]
   return(result);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e5      	bne.n	8010024 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2220      	movs	r2, #32
 801005c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010068:	2303      	movs	r3, #3
 801006a:	e011      	b.n	8010090 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2220      	movs	r2, #32
 8010070:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2220      	movs	r2, #32
 8010076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3758      	adds	r7, #88	@ 0x58
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	603b      	str	r3, [r7, #0]
 80100a4:	4613      	mov	r3, r2
 80100a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100a8:	e04f      	b.n	801014a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b0:	d04b      	beq.n	801014a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100b2:	f7f7 fa3b 	bl	800752c <HAL_GetTick>
 80100b6:	4602      	mov	r2, r0
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	69ba      	ldr	r2, [r7, #24]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d302      	bcc.n	80100c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80100c8:	2303      	movs	r3, #3
 80100ca:	e04e      	b.n	801016a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 0304 	and.w	r3, r3, #4
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d037      	beq.n	801014a <UART_WaitOnFlagUntilTimeout+0xb2>
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2b80      	cmp	r3, #128	@ 0x80
 80100de:	d034      	beq.n	801014a <UART_WaitOnFlagUntilTimeout+0xb2>
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	2b40      	cmp	r3, #64	@ 0x40
 80100e4:	d031      	beq.n	801014a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	69db      	ldr	r3, [r3, #28]
 80100ec:	f003 0308 	and.w	r3, r3, #8
 80100f0:	2b08      	cmp	r3, #8
 80100f2:	d110      	bne.n	8010116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2208      	movs	r2, #8
 80100fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f000 f838 	bl	8010172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2208      	movs	r2, #8
 8010106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2200      	movs	r2, #0
 801010e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8010112:	2301      	movs	r3, #1
 8010114:	e029      	b.n	801016a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	69db      	ldr	r3, [r3, #28]
 801011c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010124:	d111      	bne.n	801014a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801012e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f000 f81e 	bl	8010172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2220      	movs	r2, #32
 801013a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8010146:	2303      	movs	r3, #3
 8010148:	e00f      	b.n	801016a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	69da      	ldr	r2, [r3, #28]
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	4013      	ands	r3, r2
 8010154:	68ba      	ldr	r2, [r7, #8]
 8010156:	429a      	cmp	r2, r3
 8010158:	bf0c      	ite	eq
 801015a:	2301      	moveq	r3, #1
 801015c:	2300      	movne	r3, #0
 801015e:	b2db      	uxtb	r3, r3
 8010160:	461a      	mov	r2, r3
 8010162:	79fb      	ldrb	r3, [r7, #7]
 8010164:	429a      	cmp	r2, r3
 8010166:	d0a0      	beq.n	80100aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010172:	b480      	push	{r7}
 8010174:	b095      	sub	sp, #84	@ 0x54
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010182:	e853 3f00 	ldrex	r3, [r3]
 8010186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801018a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801018e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	461a      	mov	r2, r3
 8010196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010198:	643b      	str	r3, [r7, #64]	@ 0x40
 801019a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801019e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80101a0:	e841 2300 	strex	r3, r2, [r1]
 80101a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80101a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1e6      	bne.n	801017a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3308      	adds	r3, #8
 80101b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	e853 3f00 	ldrex	r3, [r3]
 80101ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	f023 0301 	bic.w	r3, r3, #1
 80101c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	3308      	adds	r3, #8
 80101ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80101ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101d4:	e841 2300 	strex	r3, r2, [r1]
 80101d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80101da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1e5      	bne.n	80101ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d118      	bne.n	801021a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	e853 3f00 	ldrex	r3, [r3]
 80101f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	f023 0310 	bic.w	r3, r3, #16
 80101fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	461a      	mov	r2, r3
 8010204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010206:	61bb      	str	r3, [r7, #24]
 8010208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801020a:	6979      	ldr	r1, [r7, #20]
 801020c:	69ba      	ldr	r2, [r7, #24]
 801020e:	e841 2300 	strex	r3, r2, [r1]
 8010212:	613b      	str	r3, [r7, #16]
   return(result);
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1e6      	bne.n	80101e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2220      	movs	r2, #32
 801021e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801022e:	bf00      	nop
 8010230:	3754      	adds	r7, #84	@ 0x54
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b088      	sub	sp, #32
 801023e:	af00      	add	r7, sp, #0
 8010240:	60f8      	str	r0, [r7, #12]
 8010242:	60b9      	str	r1, [r7, #8]
 8010244:	603b      	str	r3, [r7, #0]
 8010246:	4613      	mov	r3, r2
 8010248:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010250:	2b20      	cmp	r3, #32
 8010252:	f040 80f0 	bne.w	8010436 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d002      	beq.n	8010262 <HAL_UARTEx_ReceiveToIdle+0x28>
 801025c:	88fb      	ldrh	r3, [r7, #6]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8010262:	2301      	movs	r3, #1
 8010264:	e0e8      	b.n	8010438 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2222      	movs	r2, #34	@ 0x22
 8010272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010282:	f7f7 f953 	bl	800752c <HAL_GetTick>
 8010286:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	88fa      	ldrh	r2, [r7, #6]
 801028c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	88fa      	ldrh	r2, [r7, #6]
 8010294:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102a0:	d10e      	bne.n	80102c0 <HAL_UARTEx_ReceiveToIdle+0x86>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	691b      	ldr	r3, [r3, #16]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d105      	bne.n	80102b6 <HAL_UARTEx_ReceiveToIdle+0x7c>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80102b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80102b4:	e02d      	b.n	8010312 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	22ff      	movs	r2, #255	@ 0xff
 80102ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80102be:	e028      	b.n	8010312 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10d      	bne.n	80102e4 <HAL_UARTEx_ReceiveToIdle+0xaa>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d104      	bne.n	80102da <HAL_UARTEx_ReceiveToIdle+0xa0>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	22ff      	movs	r2, #255	@ 0xff
 80102d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80102d8:	e01b      	b.n	8010312 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	227f      	movs	r2, #127	@ 0x7f
 80102de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80102e2:	e016      	b.n	8010312 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102ec:	d10d      	bne.n	801030a <HAL_UARTEx_ReceiveToIdle+0xd0>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d104      	bne.n	8010300 <HAL_UARTEx_ReceiveToIdle+0xc6>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	227f      	movs	r2, #127	@ 0x7f
 80102fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80102fe:	e008      	b.n	8010312 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	223f      	movs	r2, #63	@ 0x3f
 8010304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010308:	e003      	b.n	8010312 <HAL_UARTEx_ReceiveToIdle+0xd8>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010318:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010322:	d108      	bne.n	8010336 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	691b      	ldr	r3, [r3, #16]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d104      	bne.n	8010336 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 801032c:	2300      	movs	r3, #0
 801032e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	61bb      	str	r3, [r7, #24]
 8010334:	e003      	b.n	801033e <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801033a:	2300      	movs	r3, #0
 801033c:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2200      	movs	r2, #0
 8010342:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010344:	e060      	b.n	8010408 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	69db      	ldr	r3, [r3, #28]
 801034c:	f003 0310 	and.w	r3, r3, #16
 8010350:	2b10      	cmp	r3, #16
 8010352:	d110      	bne.n	8010376 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2210      	movs	r2, #16
 801035a:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d008      	beq.n	8010376 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2202      	movs	r2, #2
 8010368:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2220      	movs	r2, #32
 801036e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8010372:	2300      	movs	r3, #0
 8010374:	e060      	b.n	8010438 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	69db      	ldr	r3, [r3, #28]
 801037c:	f003 0320 	and.w	r3, r3, #32
 8010380:	2b20      	cmp	r3, #32
 8010382:	d12c      	bne.n	80103de <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d10c      	bne.n	80103a4 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010390:	b29a      	uxth	r2, r3
 8010392:	8a7b      	ldrh	r3, [r7, #18]
 8010394:	4013      	ands	r3, r2
 8010396:	b29a      	uxth	r2, r3
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	3302      	adds	r3, #2
 80103a0:	61bb      	str	r3, [r7, #24]
 80103a2:	e00d      	b.n	80103c0 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	8a7b      	ldrh	r3, [r7, #18]
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	4013      	ands	r3, r2
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	3301      	adds	r3, #1
 80103be:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	3301      	adds	r3, #1
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	3b01      	subs	r3, #1
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80103de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e4:	d010      	beq.n	8010408 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80103e6:	f7f7 f8a1 	bl	800752c <HAL_GetTick>
 80103ea:	4602      	mov	r2, r0
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d302      	bcc.n	80103fc <HAL_UARTEx_ReceiveToIdle+0x1c2>
 80103f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d105      	bne.n	8010408 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2220      	movs	r2, #32
 8010400:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010404:	2303      	movs	r3, #3
 8010406:	e017      	b.n	8010438 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801040e:	b29b      	uxth	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d198      	bne.n	8010346 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010420:	b29b      	uxth	r3, r3
 8010422:	1ad3      	subs	r3, r2, r3
 8010424:	b29a      	uxth	r2, r3
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2220      	movs	r2, #32
 801042e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	e000      	b.n	8010438 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010436:	2302      	movs	r3, #2
  }
}
 8010438:	4618      	mov	r0, r3
 801043a:	3720      	adds	r7, #32
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <siprintf>:
 8010440:	b40e      	push	{r1, r2, r3}
 8010442:	b510      	push	{r4, lr}
 8010444:	b09d      	sub	sp, #116	@ 0x74
 8010446:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010448:	9002      	str	r0, [sp, #8]
 801044a:	9006      	str	r0, [sp, #24]
 801044c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010450:	480a      	ldr	r0, [pc, #40]	@ (801047c <siprintf+0x3c>)
 8010452:	9107      	str	r1, [sp, #28]
 8010454:	9104      	str	r1, [sp, #16]
 8010456:	490a      	ldr	r1, [pc, #40]	@ (8010480 <siprintf+0x40>)
 8010458:	f853 2b04 	ldr.w	r2, [r3], #4
 801045c:	9105      	str	r1, [sp, #20]
 801045e:	2400      	movs	r4, #0
 8010460:	a902      	add	r1, sp, #8
 8010462:	6800      	ldr	r0, [r0, #0]
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010468:	f000 f9d6 	bl	8010818 <_svfiprintf_r>
 801046c:	9b02      	ldr	r3, [sp, #8]
 801046e:	701c      	strb	r4, [r3, #0]
 8010470:	b01d      	add	sp, #116	@ 0x74
 8010472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010476:	b003      	add	sp, #12
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop
 801047c:	20000014 	.word	0x20000014
 8010480:	ffff0208 	.word	0xffff0208

08010484 <memcmp>:
 8010484:	b510      	push	{r4, lr}
 8010486:	3901      	subs	r1, #1
 8010488:	4402      	add	r2, r0
 801048a:	4290      	cmp	r0, r2
 801048c:	d101      	bne.n	8010492 <memcmp+0xe>
 801048e:	2000      	movs	r0, #0
 8010490:	e005      	b.n	801049e <memcmp+0x1a>
 8010492:	7803      	ldrb	r3, [r0, #0]
 8010494:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010498:	42a3      	cmp	r3, r4
 801049a:	d001      	beq.n	80104a0 <memcmp+0x1c>
 801049c:	1b18      	subs	r0, r3, r4
 801049e:	bd10      	pop	{r4, pc}
 80104a0:	3001      	adds	r0, #1
 80104a2:	e7f2      	b.n	801048a <memcmp+0x6>

080104a4 <memset>:
 80104a4:	4402      	add	r2, r0
 80104a6:	4603      	mov	r3, r0
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d100      	bne.n	80104ae <memset+0xa>
 80104ac:	4770      	bx	lr
 80104ae:	f803 1b01 	strb.w	r1, [r3], #1
 80104b2:	e7f9      	b.n	80104a8 <memset+0x4>

080104b4 <strchr>:
 80104b4:	b2c9      	uxtb	r1, r1
 80104b6:	4603      	mov	r3, r0
 80104b8:	4618      	mov	r0, r3
 80104ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104be:	b112      	cbz	r2, 80104c6 <strchr+0x12>
 80104c0:	428a      	cmp	r2, r1
 80104c2:	d1f9      	bne.n	80104b8 <strchr+0x4>
 80104c4:	4770      	bx	lr
 80104c6:	2900      	cmp	r1, #0
 80104c8:	bf18      	it	ne
 80104ca:	2000      	movne	r0, #0
 80104cc:	4770      	bx	lr

080104ce <strstr>:
 80104ce:	780a      	ldrb	r2, [r1, #0]
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	b96a      	cbnz	r2, 80104f0 <strstr+0x22>
 80104d4:	bd70      	pop	{r4, r5, r6, pc}
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d109      	bne.n	80104ee <strstr+0x20>
 80104da:	460c      	mov	r4, r1
 80104dc:	4605      	mov	r5, r0
 80104de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d0f6      	beq.n	80104d4 <strstr+0x6>
 80104e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80104ea:	429e      	cmp	r6, r3
 80104ec:	d0f7      	beq.n	80104de <strstr+0x10>
 80104ee:	3001      	adds	r0, #1
 80104f0:	7803      	ldrb	r3, [r0, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1ef      	bne.n	80104d6 <strstr+0x8>
 80104f6:	4618      	mov	r0, r3
 80104f8:	e7ec      	b.n	80104d4 <strstr+0x6>
	...

080104fc <__errno>:
 80104fc:	4b01      	ldr	r3, [pc, #4]	@ (8010504 <__errno+0x8>)
 80104fe:	6818      	ldr	r0, [r3, #0]
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	20000014 	.word	0x20000014

08010508 <__libc_init_array>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	4d0d      	ldr	r5, [pc, #52]	@ (8010540 <__libc_init_array+0x38>)
 801050c:	4c0d      	ldr	r4, [pc, #52]	@ (8010544 <__libc_init_array+0x3c>)
 801050e:	1b64      	subs	r4, r4, r5
 8010510:	10a4      	asrs	r4, r4, #2
 8010512:	2600      	movs	r6, #0
 8010514:	42a6      	cmp	r6, r4
 8010516:	d109      	bne.n	801052c <__libc_init_array+0x24>
 8010518:	4d0b      	ldr	r5, [pc, #44]	@ (8010548 <__libc_init_array+0x40>)
 801051a:	4c0c      	ldr	r4, [pc, #48]	@ (801054c <__libc_init_array+0x44>)
 801051c:	f000 fc64 	bl	8010de8 <_init>
 8010520:	1b64      	subs	r4, r4, r5
 8010522:	10a4      	asrs	r4, r4, #2
 8010524:	2600      	movs	r6, #0
 8010526:	42a6      	cmp	r6, r4
 8010528:	d105      	bne.n	8010536 <__libc_init_array+0x2e>
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010530:	4798      	blx	r3
 8010532:	3601      	adds	r6, #1
 8010534:	e7ee      	b.n	8010514 <__libc_init_array+0xc>
 8010536:	f855 3b04 	ldr.w	r3, [r5], #4
 801053a:	4798      	blx	r3
 801053c:	3601      	adds	r6, #1
 801053e:	e7f2      	b.n	8010526 <__libc_init_array+0x1e>
 8010540:	080111a0 	.word	0x080111a0
 8010544:	080111a0 	.word	0x080111a0
 8010548:	080111a0 	.word	0x080111a0
 801054c:	080111a4 	.word	0x080111a4

08010550 <__retarget_lock_acquire_recursive>:
 8010550:	4770      	bx	lr

08010552 <__retarget_lock_release_recursive>:
 8010552:	4770      	bx	lr

08010554 <memcpy>:
 8010554:	440a      	add	r2, r1
 8010556:	4291      	cmp	r1, r2
 8010558:	f100 33ff 	add.w	r3, r0, #4294967295
 801055c:	d100      	bne.n	8010560 <memcpy+0xc>
 801055e:	4770      	bx	lr
 8010560:	b510      	push	{r4, lr}
 8010562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010566:	f803 4f01 	strb.w	r4, [r3, #1]!
 801056a:	4291      	cmp	r1, r2
 801056c:	d1f9      	bne.n	8010562 <memcpy+0xe>
 801056e:	bd10      	pop	{r4, pc}

08010570 <_free_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4605      	mov	r5, r0
 8010574:	2900      	cmp	r1, #0
 8010576:	d041      	beq.n	80105fc <_free_r+0x8c>
 8010578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801057c:	1f0c      	subs	r4, r1, #4
 801057e:	2b00      	cmp	r3, #0
 8010580:	bfb8      	it	lt
 8010582:	18e4      	addlt	r4, r4, r3
 8010584:	f000 f8e0 	bl	8010748 <__malloc_lock>
 8010588:	4a1d      	ldr	r2, [pc, #116]	@ (8010600 <_free_r+0x90>)
 801058a:	6813      	ldr	r3, [r2, #0]
 801058c:	b933      	cbnz	r3, 801059c <_free_r+0x2c>
 801058e:	6063      	str	r3, [r4, #4]
 8010590:	6014      	str	r4, [r2, #0]
 8010592:	4628      	mov	r0, r5
 8010594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010598:	f000 b8dc 	b.w	8010754 <__malloc_unlock>
 801059c:	42a3      	cmp	r3, r4
 801059e:	d908      	bls.n	80105b2 <_free_r+0x42>
 80105a0:	6820      	ldr	r0, [r4, #0]
 80105a2:	1821      	adds	r1, r4, r0
 80105a4:	428b      	cmp	r3, r1
 80105a6:	bf01      	itttt	eq
 80105a8:	6819      	ldreq	r1, [r3, #0]
 80105aa:	685b      	ldreq	r3, [r3, #4]
 80105ac:	1809      	addeq	r1, r1, r0
 80105ae:	6021      	streq	r1, [r4, #0]
 80105b0:	e7ed      	b.n	801058e <_free_r+0x1e>
 80105b2:	461a      	mov	r2, r3
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	b10b      	cbz	r3, 80105bc <_free_r+0x4c>
 80105b8:	42a3      	cmp	r3, r4
 80105ba:	d9fa      	bls.n	80105b2 <_free_r+0x42>
 80105bc:	6811      	ldr	r1, [r2, #0]
 80105be:	1850      	adds	r0, r2, r1
 80105c0:	42a0      	cmp	r0, r4
 80105c2:	d10b      	bne.n	80105dc <_free_r+0x6c>
 80105c4:	6820      	ldr	r0, [r4, #0]
 80105c6:	4401      	add	r1, r0
 80105c8:	1850      	adds	r0, r2, r1
 80105ca:	4283      	cmp	r3, r0
 80105cc:	6011      	str	r1, [r2, #0]
 80105ce:	d1e0      	bne.n	8010592 <_free_r+0x22>
 80105d0:	6818      	ldr	r0, [r3, #0]
 80105d2:	685b      	ldr	r3, [r3, #4]
 80105d4:	6053      	str	r3, [r2, #4]
 80105d6:	4408      	add	r0, r1
 80105d8:	6010      	str	r0, [r2, #0]
 80105da:	e7da      	b.n	8010592 <_free_r+0x22>
 80105dc:	d902      	bls.n	80105e4 <_free_r+0x74>
 80105de:	230c      	movs	r3, #12
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	e7d6      	b.n	8010592 <_free_r+0x22>
 80105e4:	6820      	ldr	r0, [r4, #0]
 80105e6:	1821      	adds	r1, r4, r0
 80105e8:	428b      	cmp	r3, r1
 80105ea:	bf04      	itt	eq
 80105ec:	6819      	ldreq	r1, [r3, #0]
 80105ee:	685b      	ldreq	r3, [r3, #4]
 80105f0:	6063      	str	r3, [r4, #4]
 80105f2:	bf04      	itt	eq
 80105f4:	1809      	addeq	r1, r1, r0
 80105f6:	6021      	streq	r1, [r4, #0]
 80105f8:	6054      	str	r4, [r2, #4]
 80105fa:	e7ca      	b.n	8010592 <_free_r+0x22>
 80105fc:	bd38      	pop	{r3, r4, r5, pc}
 80105fe:	bf00      	nop
 8010600:	200078fc 	.word	0x200078fc

08010604 <sbrk_aligned>:
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	4e0f      	ldr	r6, [pc, #60]	@ (8010644 <sbrk_aligned+0x40>)
 8010608:	460c      	mov	r4, r1
 801060a:	6831      	ldr	r1, [r6, #0]
 801060c:	4605      	mov	r5, r0
 801060e:	b911      	cbnz	r1, 8010616 <sbrk_aligned+0x12>
 8010610:	f000 fba4 	bl	8010d5c <_sbrk_r>
 8010614:	6030      	str	r0, [r6, #0]
 8010616:	4621      	mov	r1, r4
 8010618:	4628      	mov	r0, r5
 801061a:	f000 fb9f 	bl	8010d5c <_sbrk_r>
 801061e:	1c43      	adds	r3, r0, #1
 8010620:	d103      	bne.n	801062a <sbrk_aligned+0x26>
 8010622:	f04f 34ff 	mov.w	r4, #4294967295
 8010626:	4620      	mov	r0, r4
 8010628:	bd70      	pop	{r4, r5, r6, pc}
 801062a:	1cc4      	adds	r4, r0, #3
 801062c:	f024 0403 	bic.w	r4, r4, #3
 8010630:	42a0      	cmp	r0, r4
 8010632:	d0f8      	beq.n	8010626 <sbrk_aligned+0x22>
 8010634:	1a21      	subs	r1, r4, r0
 8010636:	4628      	mov	r0, r5
 8010638:	f000 fb90 	bl	8010d5c <_sbrk_r>
 801063c:	3001      	adds	r0, #1
 801063e:	d1f2      	bne.n	8010626 <sbrk_aligned+0x22>
 8010640:	e7ef      	b.n	8010622 <sbrk_aligned+0x1e>
 8010642:	bf00      	nop
 8010644:	200078f8 	.word	0x200078f8

08010648 <_malloc_r>:
 8010648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801064c:	1ccd      	adds	r5, r1, #3
 801064e:	f025 0503 	bic.w	r5, r5, #3
 8010652:	3508      	adds	r5, #8
 8010654:	2d0c      	cmp	r5, #12
 8010656:	bf38      	it	cc
 8010658:	250c      	movcc	r5, #12
 801065a:	2d00      	cmp	r5, #0
 801065c:	4606      	mov	r6, r0
 801065e:	db01      	blt.n	8010664 <_malloc_r+0x1c>
 8010660:	42a9      	cmp	r1, r5
 8010662:	d904      	bls.n	801066e <_malloc_r+0x26>
 8010664:	230c      	movs	r3, #12
 8010666:	6033      	str	r3, [r6, #0]
 8010668:	2000      	movs	r0, #0
 801066a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801066e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010744 <_malloc_r+0xfc>
 8010672:	f000 f869 	bl	8010748 <__malloc_lock>
 8010676:	f8d8 3000 	ldr.w	r3, [r8]
 801067a:	461c      	mov	r4, r3
 801067c:	bb44      	cbnz	r4, 80106d0 <_malloc_r+0x88>
 801067e:	4629      	mov	r1, r5
 8010680:	4630      	mov	r0, r6
 8010682:	f7ff ffbf 	bl	8010604 <sbrk_aligned>
 8010686:	1c43      	adds	r3, r0, #1
 8010688:	4604      	mov	r4, r0
 801068a:	d158      	bne.n	801073e <_malloc_r+0xf6>
 801068c:	f8d8 4000 	ldr.w	r4, [r8]
 8010690:	4627      	mov	r7, r4
 8010692:	2f00      	cmp	r7, #0
 8010694:	d143      	bne.n	801071e <_malloc_r+0xd6>
 8010696:	2c00      	cmp	r4, #0
 8010698:	d04b      	beq.n	8010732 <_malloc_r+0xea>
 801069a:	6823      	ldr	r3, [r4, #0]
 801069c:	4639      	mov	r1, r7
 801069e:	4630      	mov	r0, r6
 80106a0:	eb04 0903 	add.w	r9, r4, r3
 80106a4:	f000 fb5a 	bl	8010d5c <_sbrk_r>
 80106a8:	4581      	cmp	r9, r0
 80106aa:	d142      	bne.n	8010732 <_malloc_r+0xea>
 80106ac:	6821      	ldr	r1, [r4, #0]
 80106ae:	1a6d      	subs	r5, r5, r1
 80106b0:	4629      	mov	r1, r5
 80106b2:	4630      	mov	r0, r6
 80106b4:	f7ff ffa6 	bl	8010604 <sbrk_aligned>
 80106b8:	3001      	adds	r0, #1
 80106ba:	d03a      	beq.n	8010732 <_malloc_r+0xea>
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	442b      	add	r3, r5
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	f8d8 3000 	ldr.w	r3, [r8]
 80106c6:	685a      	ldr	r2, [r3, #4]
 80106c8:	bb62      	cbnz	r2, 8010724 <_malloc_r+0xdc>
 80106ca:	f8c8 7000 	str.w	r7, [r8]
 80106ce:	e00f      	b.n	80106f0 <_malloc_r+0xa8>
 80106d0:	6822      	ldr	r2, [r4, #0]
 80106d2:	1b52      	subs	r2, r2, r5
 80106d4:	d420      	bmi.n	8010718 <_malloc_r+0xd0>
 80106d6:	2a0b      	cmp	r2, #11
 80106d8:	d917      	bls.n	801070a <_malloc_r+0xc2>
 80106da:	1961      	adds	r1, r4, r5
 80106dc:	42a3      	cmp	r3, r4
 80106de:	6025      	str	r5, [r4, #0]
 80106e0:	bf18      	it	ne
 80106e2:	6059      	strne	r1, [r3, #4]
 80106e4:	6863      	ldr	r3, [r4, #4]
 80106e6:	bf08      	it	eq
 80106e8:	f8c8 1000 	streq.w	r1, [r8]
 80106ec:	5162      	str	r2, [r4, r5]
 80106ee:	604b      	str	r3, [r1, #4]
 80106f0:	4630      	mov	r0, r6
 80106f2:	f000 f82f 	bl	8010754 <__malloc_unlock>
 80106f6:	f104 000b 	add.w	r0, r4, #11
 80106fa:	1d23      	adds	r3, r4, #4
 80106fc:	f020 0007 	bic.w	r0, r0, #7
 8010700:	1ac2      	subs	r2, r0, r3
 8010702:	bf1c      	itt	ne
 8010704:	1a1b      	subne	r3, r3, r0
 8010706:	50a3      	strne	r3, [r4, r2]
 8010708:	e7af      	b.n	801066a <_malloc_r+0x22>
 801070a:	6862      	ldr	r2, [r4, #4]
 801070c:	42a3      	cmp	r3, r4
 801070e:	bf0c      	ite	eq
 8010710:	f8c8 2000 	streq.w	r2, [r8]
 8010714:	605a      	strne	r2, [r3, #4]
 8010716:	e7eb      	b.n	80106f0 <_malloc_r+0xa8>
 8010718:	4623      	mov	r3, r4
 801071a:	6864      	ldr	r4, [r4, #4]
 801071c:	e7ae      	b.n	801067c <_malloc_r+0x34>
 801071e:	463c      	mov	r4, r7
 8010720:	687f      	ldr	r7, [r7, #4]
 8010722:	e7b6      	b.n	8010692 <_malloc_r+0x4a>
 8010724:	461a      	mov	r2, r3
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	42a3      	cmp	r3, r4
 801072a:	d1fb      	bne.n	8010724 <_malloc_r+0xdc>
 801072c:	2300      	movs	r3, #0
 801072e:	6053      	str	r3, [r2, #4]
 8010730:	e7de      	b.n	80106f0 <_malloc_r+0xa8>
 8010732:	230c      	movs	r3, #12
 8010734:	6033      	str	r3, [r6, #0]
 8010736:	4630      	mov	r0, r6
 8010738:	f000 f80c 	bl	8010754 <__malloc_unlock>
 801073c:	e794      	b.n	8010668 <_malloc_r+0x20>
 801073e:	6005      	str	r5, [r0, #0]
 8010740:	e7d6      	b.n	80106f0 <_malloc_r+0xa8>
 8010742:	bf00      	nop
 8010744:	200078fc 	.word	0x200078fc

08010748 <__malloc_lock>:
 8010748:	4801      	ldr	r0, [pc, #4]	@ (8010750 <__malloc_lock+0x8>)
 801074a:	f7ff bf01 	b.w	8010550 <__retarget_lock_acquire_recursive>
 801074e:	bf00      	nop
 8010750:	200078f4 	.word	0x200078f4

08010754 <__malloc_unlock>:
 8010754:	4801      	ldr	r0, [pc, #4]	@ (801075c <__malloc_unlock+0x8>)
 8010756:	f7ff befc 	b.w	8010552 <__retarget_lock_release_recursive>
 801075a:	bf00      	nop
 801075c:	200078f4 	.word	0x200078f4

08010760 <__ssputs_r>:
 8010760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010764:	688e      	ldr	r6, [r1, #8]
 8010766:	461f      	mov	r7, r3
 8010768:	42be      	cmp	r6, r7
 801076a:	680b      	ldr	r3, [r1, #0]
 801076c:	4682      	mov	sl, r0
 801076e:	460c      	mov	r4, r1
 8010770:	4690      	mov	r8, r2
 8010772:	d82d      	bhi.n	80107d0 <__ssputs_r+0x70>
 8010774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010778:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801077c:	d026      	beq.n	80107cc <__ssputs_r+0x6c>
 801077e:	6965      	ldr	r5, [r4, #20]
 8010780:	6909      	ldr	r1, [r1, #16]
 8010782:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010786:	eba3 0901 	sub.w	r9, r3, r1
 801078a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801078e:	1c7b      	adds	r3, r7, #1
 8010790:	444b      	add	r3, r9
 8010792:	106d      	asrs	r5, r5, #1
 8010794:	429d      	cmp	r5, r3
 8010796:	bf38      	it	cc
 8010798:	461d      	movcc	r5, r3
 801079a:	0553      	lsls	r3, r2, #21
 801079c:	d527      	bpl.n	80107ee <__ssputs_r+0x8e>
 801079e:	4629      	mov	r1, r5
 80107a0:	f7ff ff52 	bl	8010648 <_malloc_r>
 80107a4:	4606      	mov	r6, r0
 80107a6:	b360      	cbz	r0, 8010802 <__ssputs_r+0xa2>
 80107a8:	6921      	ldr	r1, [r4, #16]
 80107aa:	464a      	mov	r2, r9
 80107ac:	f7ff fed2 	bl	8010554 <memcpy>
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80107b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107ba:	81a3      	strh	r3, [r4, #12]
 80107bc:	6126      	str	r6, [r4, #16]
 80107be:	6165      	str	r5, [r4, #20]
 80107c0:	444e      	add	r6, r9
 80107c2:	eba5 0509 	sub.w	r5, r5, r9
 80107c6:	6026      	str	r6, [r4, #0]
 80107c8:	60a5      	str	r5, [r4, #8]
 80107ca:	463e      	mov	r6, r7
 80107cc:	42be      	cmp	r6, r7
 80107ce:	d900      	bls.n	80107d2 <__ssputs_r+0x72>
 80107d0:	463e      	mov	r6, r7
 80107d2:	6820      	ldr	r0, [r4, #0]
 80107d4:	4632      	mov	r2, r6
 80107d6:	4641      	mov	r1, r8
 80107d8:	f000 faa6 	bl	8010d28 <memmove>
 80107dc:	68a3      	ldr	r3, [r4, #8]
 80107de:	1b9b      	subs	r3, r3, r6
 80107e0:	60a3      	str	r3, [r4, #8]
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	4433      	add	r3, r6
 80107e6:	6023      	str	r3, [r4, #0]
 80107e8:	2000      	movs	r0, #0
 80107ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ee:	462a      	mov	r2, r5
 80107f0:	f000 fac4 	bl	8010d7c <_realloc_r>
 80107f4:	4606      	mov	r6, r0
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d1e0      	bne.n	80107bc <__ssputs_r+0x5c>
 80107fa:	6921      	ldr	r1, [r4, #16]
 80107fc:	4650      	mov	r0, sl
 80107fe:	f7ff feb7 	bl	8010570 <_free_r>
 8010802:	230c      	movs	r3, #12
 8010804:	f8ca 3000 	str.w	r3, [sl]
 8010808:	89a3      	ldrh	r3, [r4, #12]
 801080a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801080e:	81a3      	strh	r3, [r4, #12]
 8010810:	f04f 30ff 	mov.w	r0, #4294967295
 8010814:	e7e9      	b.n	80107ea <__ssputs_r+0x8a>
	...

08010818 <_svfiprintf_r>:
 8010818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081c:	4698      	mov	r8, r3
 801081e:	898b      	ldrh	r3, [r1, #12]
 8010820:	061b      	lsls	r3, r3, #24
 8010822:	b09d      	sub	sp, #116	@ 0x74
 8010824:	4607      	mov	r7, r0
 8010826:	460d      	mov	r5, r1
 8010828:	4614      	mov	r4, r2
 801082a:	d510      	bpl.n	801084e <_svfiprintf_r+0x36>
 801082c:	690b      	ldr	r3, [r1, #16]
 801082e:	b973      	cbnz	r3, 801084e <_svfiprintf_r+0x36>
 8010830:	2140      	movs	r1, #64	@ 0x40
 8010832:	f7ff ff09 	bl	8010648 <_malloc_r>
 8010836:	6028      	str	r0, [r5, #0]
 8010838:	6128      	str	r0, [r5, #16]
 801083a:	b930      	cbnz	r0, 801084a <_svfiprintf_r+0x32>
 801083c:	230c      	movs	r3, #12
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	f04f 30ff 	mov.w	r0, #4294967295
 8010844:	b01d      	add	sp, #116	@ 0x74
 8010846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084a:	2340      	movs	r3, #64	@ 0x40
 801084c:	616b      	str	r3, [r5, #20]
 801084e:	2300      	movs	r3, #0
 8010850:	9309      	str	r3, [sp, #36]	@ 0x24
 8010852:	2320      	movs	r3, #32
 8010854:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010858:	f8cd 800c 	str.w	r8, [sp, #12]
 801085c:	2330      	movs	r3, #48	@ 0x30
 801085e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80109fc <_svfiprintf_r+0x1e4>
 8010862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010866:	f04f 0901 	mov.w	r9, #1
 801086a:	4623      	mov	r3, r4
 801086c:	469a      	mov	sl, r3
 801086e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010872:	b10a      	cbz	r2, 8010878 <_svfiprintf_r+0x60>
 8010874:	2a25      	cmp	r2, #37	@ 0x25
 8010876:	d1f9      	bne.n	801086c <_svfiprintf_r+0x54>
 8010878:	ebba 0b04 	subs.w	fp, sl, r4
 801087c:	d00b      	beq.n	8010896 <_svfiprintf_r+0x7e>
 801087e:	465b      	mov	r3, fp
 8010880:	4622      	mov	r2, r4
 8010882:	4629      	mov	r1, r5
 8010884:	4638      	mov	r0, r7
 8010886:	f7ff ff6b 	bl	8010760 <__ssputs_r>
 801088a:	3001      	adds	r0, #1
 801088c:	f000 80a7 	beq.w	80109de <_svfiprintf_r+0x1c6>
 8010890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010892:	445a      	add	r2, fp
 8010894:	9209      	str	r2, [sp, #36]	@ 0x24
 8010896:	f89a 3000 	ldrb.w	r3, [sl]
 801089a:	2b00      	cmp	r3, #0
 801089c:	f000 809f 	beq.w	80109de <_svfiprintf_r+0x1c6>
 80108a0:	2300      	movs	r3, #0
 80108a2:	f04f 32ff 	mov.w	r2, #4294967295
 80108a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108aa:	f10a 0a01 	add.w	sl, sl, #1
 80108ae:	9304      	str	r3, [sp, #16]
 80108b0:	9307      	str	r3, [sp, #28]
 80108b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80108b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80108b8:	4654      	mov	r4, sl
 80108ba:	2205      	movs	r2, #5
 80108bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c0:	484e      	ldr	r0, [pc, #312]	@ (80109fc <_svfiprintf_r+0x1e4>)
 80108c2:	f7ef fc8d 	bl	80001e0 <memchr>
 80108c6:	9a04      	ldr	r2, [sp, #16]
 80108c8:	b9d8      	cbnz	r0, 8010902 <_svfiprintf_r+0xea>
 80108ca:	06d0      	lsls	r0, r2, #27
 80108cc:	bf44      	itt	mi
 80108ce:	2320      	movmi	r3, #32
 80108d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108d4:	0711      	lsls	r1, r2, #28
 80108d6:	bf44      	itt	mi
 80108d8:	232b      	movmi	r3, #43	@ 0x2b
 80108da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108de:	f89a 3000 	ldrb.w	r3, [sl]
 80108e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80108e4:	d015      	beq.n	8010912 <_svfiprintf_r+0xfa>
 80108e6:	9a07      	ldr	r2, [sp, #28]
 80108e8:	4654      	mov	r4, sl
 80108ea:	2000      	movs	r0, #0
 80108ec:	f04f 0c0a 	mov.w	ip, #10
 80108f0:	4621      	mov	r1, r4
 80108f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108f6:	3b30      	subs	r3, #48	@ 0x30
 80108f8:	2b09      	cmp	r3, #9
 80108fa:	d94b      	bls.n	8010994 <_svfiprintf_r+0x17c>
 80108fc:	b1b0      	cbz	r0, 801092c <_svfiprintf_r+0x114>
 80108fe:	9207      	str	r2, [sp, #28]
 8010900:	e014      	b.n	801092c <_svfiprintf_r+0x114>
 8010902:	eba0 0308 	sub.w	r3, r0, r8
 8010906:	fa09 f303 	lsl.w	r3, r9, r3
 801090a:	4313      	orrs	r3, r2
 801090c:	9304      	str	r3, [sp, #16]
 801090e:	46a2      	mov	sl, r4
 8010910:	e7d2      	b.n	80108b8 <_svfiprintf_r+0xa0>
 8010912:	9b03      	ldr	r3, [sp, #12]
 8010914:	1d19      	adds	r1, r3, #4
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	9103      	str	r1, [sp, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	bfbb      	ittet	lt
 801091e:	425b      	neglt	r3, r3
 8010920:	f042 0202 	orrlt.w	r2, r2, #2
 8010924:	9307      	strge	r3, [sp, #28]
 8010926:	9307      	strlt	r3, [sp, #28]
 8010928:	bfb8      	it	lt
 801092a:	9204      	strlt	r2, [sp, #16]
 801092c:	7823      	ldrb	r3, [r4, #0]
 801092e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010930:	d10a      	bne.n	8010948 <_svfiprintf_r+0x130>
 8010932:	7863      	ldrb	r3, [r4, #1]
 8010934:	2b2a      	cmp	r3, #42	@ 0x2a
 8010936:	d132      	bne.n	801099e <_svfiprintf_r+0x186>
 8010938:	9b03      	ldr	r3, [sp, #12]
 801093a:	1d1a      	adds	r2, r3, #4
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	9203      	str	r2, [sp, #12]
 8010940:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010944:	3402      	adds	r4, #2
 8010946:	9305      	str	r3, [sp, #20]
 8010948:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010a0c <_svfiprintf_r+0x1f4>
 801094c:	7821      	ldrb	r1, [r4, #0]
 801094e:	2203      	movs	r2, #3
 8010950:	4650      	mov	r0, sl
 8010952:	f7ef fc45 	bl	80001e0 <memchr>
 8010956:	b138      	cbz	r0, 8010968 <_svfiprintf_r+0x150>
 8010958:	9b04      	ldr	r3, [sp, #16]
 801095a:	eba0 000a 	sub.w	r0, r0, sl
 801095e:	2240      	movs	r2, #64	@ 0x40
 8010960:	4082      	lsls	r2, r0
 8010962:	4313      	orrs	r3, r2
 8010964:	3401      	adds	r4, #1
 8010966:	9304      	str	r3, [sp, #16]
 8010968:	f814 1b01 	ldrb.w	r1, [r4], #1
 801096c:	4824      	ldr	r0, [pc, #144]	@ (8010a00 <_svfiprintf_r+0x1e8>)
 801096e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010972:	2206      	movs	r2, #6
 8010974:	f7ef fc34 	bl	80001e0 <memchr>
 8010978:	2800      	cmp	r0, #0
 801097a:	d036      	beq.n	80109ea <_svfiprintf_r+0x1d2>
 801097c:	4b21      	ldr	r3, [pc, #132]	@ (8010a04 <_svfiprintf_r+0x1ec>)
 801097e:	bb1b      	cbnz	r3, 80109c8 <_svfiprintf_r+0x1b0>
 8010980:	9b03      	ldr	r3, [sp, #12]
 8010982:	3307      	adds	r3, #7
 8010984:	f023 0307 	bic.w	r3, r3, #7
 8010988:	3308      	adds	r3, #8
 801098a:	9303      	str	r3, [sp, #12]
 801098c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801098e:	4433      	add	r3, r6
 8010990:	9309      	str	r3, [sp, #36]	@ 0x24
 8010992:	e76a      	b.n	801086a <_svfiprintf_r+0x52>
 8010994:	fb0c 3202 	mla	r2, ip, r2, r3
 8010998:	460c      	mov	r4, r1
 801099a:	2001      	movs	r0, #1
 801099c:	e7a8      	b.n	80108f0 <_svfiprintf_r+0xd8>
 801099e:	2300      	movs	r3, #0
 80109a0:	3401      	adds	r4, #1
 80109a2:	9305      	str	r3, [sp, #20]
 80109a4:	4619      	mov	r1, r3
 80109a6:	f04f 0c0a 	mov.w	ip, #10
 80109aa:	4620      	mov	r0, r4
 80109ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109b0:	3a30      	subs	r2, #48	@ 0x30
 80109b2:	2a09      	cmp	r2, #9
 80109b4:	d903      	bls.n	80109be <_svfiprintf_r+0x1a6>
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d0c6      	beq.n	8010948 <_svfiprintf_r+0x130>
 80109ba:	9105      	str	r1, [sp, #20]
 80109bc:	e7c4      	b.n	8010948 <_svfiprintf_r+0x130>
 80109be:	fb0c 2101 	mla	r1, ip, r1, r2
 80109c2:	4604      	mov	r4, r0
 80109c4:	2301      	movs	r3, #1
 80109c6:	e7f0      	b.n	80109aa <_svfiprintf_r+0x192>
 80109c8:	ab03      	add	r3, sp, #12
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	462a      	mov	r2, r5
 80109ce:	4b0e      	ldr	r3, [pc, #56]	@ (8010a08 <_svfiprintf_r+0x1f0>)
 80109d0:	a904      	add	r1, sp, #16
 80109d2:	4638      	mov	r0, r7
 80109d4:	f3af 8000 	nop.w
 80109d8:	1c42      	adds	r2, r0, #1
 80109da:	4606      	mov	r6, r0
 80109dc:	d1d6      	bne.n	801098c <_svfiprintf_r+0x174>
 80109de:	89ab      	ldrh	r3, [r5, #12]
 80109e0:	065b      	lsls	r3, r3, #25
 80109e2:	f53f af2d 	bmi.w	8010840 <_svfiprintf_r+0x28>
 80109e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109e8:	e72c      	b.n	8010844 <_svfiprintf_r+0x2c>
 80109ea:	ab03      	add	r3, sp, #12
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	462a      	mov	r2, r5
 80109f0:	4b05      	ldr	r3, [pc, #20]	@ (8010a08 <_svfiprintf_r+0x1f0>)
 80109f2:	a904      	add	r1, sp, #16
 80109f4:	4638      	mov	r0, r7
 80109f6:	f000 f879 	bl	8010aec <_printf_i>
 80109fa:	e7ed      	b.n	80109d8 <_svfiprintf_r+0x1c0>
 80109fc:	08011162 	.word	0x08011162
 8010a00:	0801116c 	.word	0x0801116c
 8010a04:	00000000 	.word	0x00000000
 8010a08:	08010761 	.word	0x08010761
 8010a0c:	08011168 	.word	0x08011168

08010a10 <_printf_common>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	4616      	mov	r6, r2
 8010a16:	4698      	mov	r8, r3
 8010a18:	688a      	ldr	r2, [r1, #8]
 8010a1a:	690b      	ldr	r3, [r1, #16]
 8010a1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a20:	4293      	cmp	r3, r2
 8010a22:	bfb8      	it	lt
 8010a24:	4613      	movlt	r3, r2
 8010a26:	6033      	str	r3, [r6, #0]
 8010a28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a2c:	4607      	mov	r7, r0
 8010a2e:	460c      	mov	r4, r1
 8010a30:	b10a      	cbz	r2, 8010a36 <_printf_common+0x26>
 8010a32:	3301      	adds	r3, #1
 8010a34:	6033      	str	r3, [r6, #0]
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	0699      	lsls	r1, r3, #26
 8010a3a:	bf42      	ittt	mi
 8010a3c:	6833      	ldrmi	r3, [r6, #0]
 8010a3e:	3302      	addmi	r3, #2
 8010a40:	6033      	strmi	r3, [r6, #0]
 8010a42:	6825      	ldr	r5, [r4, #0]
 8010a44:	f015 0506 	ands.w	r5, r5, #6
 8010a48:	d106      	bne.n	8010a58 <_printf_common+0x48>
 8010a4a:	f104 0a19 	add.w	sl, r4, #25
 8010a4e:	68e3      	ldr	r3, [r4, #12]
 8010a50:	6832      	ldr	r2, [r6, #0]
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	42ab      	cmp	r3, r5
 8010a56:	dc26      	bgt.n	8010aa6 <_printf_common+0x96>
 8010a58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a5c:	6822      	ldr	r2, [r4, #0]
 8010a5e:	3b00      	subs	r3, #0
 8010a60:	bf18      	it	ne
 8010a62:	2301      	movne	r3, #1
 8010a64:	0692      	lsls	r2, r2, #26
 8010a66:	d42b      	bmi.n	8010ac0 <_printf_common+0xb0>
 8010a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a6c:	4641      	mov	r1, r8
 8010a6e:	4638      	mov	r0, r7
 8010a70:	47c8      	blx	r9
 8010a72:	3001      	adds	r0, #1
 8010a74:	d01e      	beq.n	8010ab4 <_printf_common+0xa4>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	6922      	ldr	r2, [r4, #16]
 8010a7a:	f003 0306 	and.w	r3, r3, #6
 8010a7e:	2b04      	cmp	r3, #4
 8010a80:	bf02      	ittt	eq
 8010a82:	68e5      	ldreq	r5, [r4, #12]
 8010a84:	6833      	ldreq	r3, [r6, #0]
 8010a86:	1aed      	subeq	r5, r5, r3
 8010a88:	68a3      	ldr	r3, [r4, #8]
 8010a8a:	bf0c      	ite	eq
 8010a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a90:	2500      	movne	r5, #0
 8010a92:	4293      	cmp	r3, r2
 8010a94:	bfc4      	itt	gt
 8010a96:	1a9b      	subgt	r3, r3, r2
 8010a98:	18ed      	addgt	r5, r5, r3
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	341a      	adds	r4, #26
 8010a9e:	42b5      	cmp	r5, r6
 8010aa0:	d11a      	bne.n	8010ad8 <_printf_common+0xc8>
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	e008      	b.n	8010ab8 <_printf_common+0xa8>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	4652      	mov	r2, sl
 8010aaa:	4641      	mov	r1, r8
 8010aac:	4638      	mov	r0, r7
 8010aae:	47c8      	blx	r9
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d103      	bne.n	8010abc <_printf_common+0xac>
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010abc:	3501      	adds	r5, #1
 8010abe:	e7c6      	b.n	8010a4e <_printf_common+0x3e>
 8010ac0:	18e1      	adds	r1, r4, r3
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	2030      	movs	r0, #48	@ 0x30
 8010ac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010aca:	4422      	add	r2, r4
 8010acc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ad4:	3302      	adds	r3, #2
 8010ad6:	e7c7      	b.n	8010a68 <_printf_common+0x58>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	4622      	mov	r2, r4
 8010adc:	4641      	mov	r1, r8
 8010ade:	4638      	mov	r0, r7
 8010ae0:	47c8      	blx	r9
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	d0e6      	beq.n	8010ab4 <_printf_common+0xa4>
 8010ae6:	3601      	adds	r6, #1
 8010ae8:	e7d9      	b.n	8010a9e <_printf_common+0x8e>
	...

08010aec <_printf_i>:
 8010aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	7e0f      	ldrb	r7, [r1, #24]
 8010af2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010af4:	2f78      	cmp	r7, #120	@ 0x78
 8010af6:	4691      	mov	r9, r2
 8010af8:	4680      	mov	r8, r0
 8010afa:	460c      	mov	r4, r1
 8010afc:	469a      	mov	sl, r3
 8010afe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010b02:	d807      	bhi.n	8010b14 <_printf_i+0x28>
 8010b04:	2f62      	cmp	r7, #98	@ 0x62
 8010b06:	d80a      	bhi.n	8010b1e <_printf_i+0x32>
 8010b08:	2f00      	cmp	r7, #0
 8010b0a:	f000 80d1 	beq.w	8010cb0 <_printf_i+0x1c4>
 8010b0e:	2f58      	cmp	r7, #88	@ 0x58
 8010b10:	f000 80b8 	beq.w	8010c84 <_printf_i+0x198>
 8010b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010b1c:	e03a      	b.n	8010b94 <_printf_i+0xa8>
 8010b1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010b22:	2b15      	cmp	r3, #21
 8010b24:	d8f6      	bhi.n	8010b14 <_printf_i+0x28>
 8010b26:	a101      	add	r1, pc, #4	@ (adr r1, 8010b2c <_printf_i+0x40>)
 8010b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b2c:	08010b85 	.word	0x08010b85
 8010b30:	08010b99 	.word	0x08010b99
 8010b34:	08010b15 	.word	0x08010b15
 8010b38:	08010b15 	.word	0x08010b15
 8010b3c:	08010b15 	.word	0x08010b15
 8010b40:	08010b15 	.word	0x08010b15
 8010b44:	08010b99 	.word	0x08010b99
 8010b48:	08010b15 	.word	0x08010b15
 8010b4c:	08010b15 	.word	0x08010b15
 8010b50:	08010b15 	.word	0x08010b15
 8010b54:	08010b15 	.word	0x08010b15
 8010b58:	08010c97 	.word	0x08010c97
 8010b5c:	08010bc3 	.word	0x08010bc3
 8010b60:	08010c51 	.word	0x08010c51
 8010b64:	08010b15 	.word	0x08010b15
 8010b68:	08010b15 	.word	0x08010b15
 8010b6c:	08010cb9 	.word	0x08010cb9
 8010b70:	08010b15 	.word	0x08010b15
 8010b74:	08010bc3 	.word	0x08010bc3
 8010b78:	08010b15 	.word	0x08010b15
 8010b7c:	08010b15 	.word	0x08010b15
 8010b80:	08010c59 	.word	0x08010c59
 8010b84:	6833      	ldr	r3, [r6, #0]
 8010b86:	1d1a      	adds	r2, r3, #4
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	6032      	str	r2, [r6, #0]
 8010b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b94:	2301      	movs	r3, #1
 8010b96:	e09c      	b.n	8010cd2 <_printf_i+0x1e6>
 8010b98:	6833      	ldr	r3, [r6, #0]
 8010b9a:	6820      	ldr	r0, [r4, #0]
 8010b9c:	1d19      	adds	r1, r3, #4
 8010b9e:	6031      	str	r1, [r6, #0]
 8010ba0:	0606      	lsls	r6, r0, #24
 8010ba2:	d501      	bpl.n	8010ba8 <_printf_i+0xbc>
 8010ba4:	681d      	ldr	r5, [r3, #0]
 8010ba6:	e003      	b.n	8010bb0 <_printf_i+0xc4>
 8010ba8:	0645      	lsls	r5, r0, #25
 8010baa:	d5fb      	bpl.n	8010ba4 <_printf_i+0xb8>
 8010bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010bb0:	2d00      	cmp	r5, #0
 8010bb2:	da03      	bge.n	8010bbc <_printf_i+0xd0>
 8010bb4:	232d      	movs	r3, #45	@ 0x2d
 8010bb6:	426d      	negs	r5, r5
 8010bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bbc:	4858      	ldr	r0, [pc, #352]	@ (8010d20 <_printf_i+0x234>)
 8010bbe:	230a      	movs	r3, #10
 8010bc0:	e011      	b.n	8010be6 <_printf_i+0xfa>
 8010bc2:	6821      	ldr	r1, [r4, #0]
 8010bc4:	6833      	ldr	r3, [r6, #0]
 8010bc6:	0608      	lsls	r0, r1, #24
 8010bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010bcc:	d402      	bmi.n	8010bd4 <_printf_i+0xe8>
 8010bce:	0649      	lsls	r1, r1, #25
 8010bd0:	bf48      	it	mi
 8010bd2:	b2ad      	uxthmi	r5, r5
 8010bd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8010bd6:	4852      	ldr	r0, [pc, #328]	@ (8010d20 <_printf_i+0x234>)
 8010bd8:	6033      	str	r3, [r6, #0]
 8010bda:	bf14      	ite	ne
 8010bdc:	230a      	movne	r3, #10
 8010bde:	2308      	moveq	r3, #8
 8010be0:	2100      	movs	r1, #0
 8010be2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010be6:	6866      	ldr	r6, [r4, #4]
 8010be8:	60a6      	str	r6, [r4, #8]
 8010bea:	2e00      	cmp	r6, #0
 8010bec:	db05      	blt.n	8010bfa <_printf_i+0x10e>
 8010bee:	6821      	ldr	r1, [r4, #0]
 8010bf0:	432e      	orrs	r6, r5
 8010bf2:	f021 0104 	bic.w	r1, r1, #4
 8010bf6:	6021      	str	r1, [r4, #0]
 8010bf8:	d04b      	beq.n	8010c92 <_printf_i+0x1a6>
 8010bfa:	4616      	mov	r6, r2
 8010bfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c00:	fb03 5711 	mls	r7, r3, r1, r5
 8010c04:	5dc7      	ldrb	r7, [r0, r7]
 8010c06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c0a:	462f      	mov	r7, r5
 8010c0c:	42bb      	cmp	r3, r7
 8010c0e:	460d      	mov	r5, r1
 8010c10:	d9f4      	bls.n	8010bfc <_printf_i+0x110>
 8010c12:	2b08      	cmp	r3, #8
 8010c14:	d10b      	bne.n	8010c2e <_printf_i+0x142>
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	07df      	lsls	r7, r3, #31
 8010c1a:	d508      	bpl.n	8010c2e <_printf_i+0x142>
 8010c1c:	6923      	ldr	r3, [r4, #16]
 8010c1e:	6861      	ldr	r1, [r4, #4]
 8010c20:	4299      	cmp	r1, r3
 8010c22:	bfde      	ittt	le
 8010c24:	2330      	movle	r3, #48	@ 0x30
 8010c26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c2e:	1b92      	subs	r2, r2, r6
 8010c30:	6122      	str	r2, [r4, #16]
 8010c32:	f8cd a000 	str.w	sl, [sp]
 8010c36:	464b      	mov	r3, r9
 8010c38:	aa03      	add	r2, sp, #12
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	4640      	mov	r0, r8
 8010c3e:	f7ff fee7 	bl	8010a10 <_printf_common>
 8010c42:	3001      	adds	r0, #1
 8010c44:	d14a      	bne.n	8010cdc <_printf_i+0x1f0>
 8010c46:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4a:	b004      	add	sp, #16
 8010c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c50:	6823      	ldr	r3, [r4, #0]
 8010c52:	f043 0320 	orr.w	r3, r3, #32
 8010c56:	6023      	str	r3, [r4, #0]
 8010c58:	4832      	ldr	r0, [pc, #200]	@ (8010d24 <_printf_i+0x238>)
 8010c5a:	2778      	movs	r7, #120	@ 0x78
 8010c5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	6831      	ldr	r1, [r6, #0]
 8010c64:	061f      	lsls	r7, r3, #24
 8010c66:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c6a:	d402      	bmi.n	8010c72 <_printf_i+0x186>
 8010c6c:	065f      	lsls	r7, r3, #25
 8010c6e:	bf48      	it	mi
 8010c70:	b2ad      	uxthmi	r5, r5
 8010c72:	6031      	str	r1, [r6, #0]
 8010c74:	07d9      	lsls	r1, r3, #31
 8010c76:	bf44      	itt	mi
 8010c78:	f043 0320 	orrmi.w	r3, r3, #32
 8010c7c:	6023      	strmi	r3, [r4, #0]
 8010c7e:	b11d      	cbz	r5, 8010c88 <_printf_i+0x19c>
 8010c80:	2310      	movs	r3, #16
 8010c82:	e7ad      	b.n	8010be0 <_printf_i+0xf4>
 8010c84:	4826      	ldr	r0, [pc, #152]	@ (8010d20 <_printf_i+0x234>)
 8010c86:	e7e9      	b.n	8010c5c <_printf_i+0x170>
 8010c88:	6823      	ldr	r3, [r4, #0]
 8010c8a:	f023 0320 	bic.w	r3, r3, #32
 8010c8e:	6023      	str	r3, [r4, #0]
 8010c90:	e7f6      	b.n	8010c80 <_printf_i+0x194>
 8010c92:	4616      	mov	r6, r2
 8010c94:	e7bd      	b.n	8010c12 <_printf_i+0x126>
 8010c96:	6833      	ldr	r3, [r6, #0]
 8010c98:	6825      	ldr	r5, [r4, #0]
 8010c9a:	6961      	ldr	r1, [r4, #20]
 8010c9c:	1d18      	adds	r0, r3, #4
 8010c9e:	6030      	str	r0, [r6, #0]
 8010ca0:	062e      	lsls	r6, r5, #24
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	d501      	bpl.n	8010caa <_printf_i+0x1be>
 8010ca6:	6019      	str	r1, [r3, #0]
 8010ca8:	e002      	b.n	8010cb0 <_printf_i+0x1c4>
 8010caa:	0668      	lsls	r0, r5, #25
 8010cac:	d5fb      	bpl.n	8010ca6 <_printf_i+0x1ba>
 8010cae:	8019      	strh	r1, [r3, #0]
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	6123      	str	r3, [r4, #16]
 8010cb4:	4616      	mov	r6, r2
 8010cb6:	e7bc      	b.n	8010c32 <_printf_i+0x146>
 8010cb8:	6833      	ldr	r3, [r6, #0]
 8010cba:	1d1a      	adds	r2, r3, #4
 8010cbc:	6032      	str	r2, [r6, #0]
 8010cbe:	681e      	ldr	r6, [r3, #0]
 8010cc0:	6862      	ldr	r2, [r4, #4]
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f7ef fa8b 	bl	80001e0 <memchr>
 8010cca:	b108      	cbz	r0, 8010cd0 <_printf_i+0x1e4>
 8010ccc:	1b80      	subs	r0, r0, r6
 8010cce:	6060      	str	r0, [r4, #4]
 8010cd0:	6863      	ldr	r3, [r4, #4]
 8010cd2:	6123      	str	r3, [r4, #16]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cda:	e7aa      	b.n	8010c32 <_printf_i+0x146>
 8010cdc:	6923      	ldr	r3, [r4, #16]
 8010cde:	4632      	mov	r2, r6
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	4640      	mov	r0, r8
 8010ce4:	47d0      	blx	sl
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	d0ad      	beq.n	8010c46 <_printf_i+0x15a>
 8010cea:	6823      	ldr	r3, [r4, #0]
 8010cec:	079b      	lsls	r3, r3, #30
 8010cee:	d413      	bmi.n	8010d18 <_printf_i+0x22c>
 8010cf0:	68e0      	ldr	r0, [r4, #12]
 8010cf2:	9b03      	ldr	r3, [sp, #12]
 8010cf4:	4298      	cmp	r0, r3
 8010cf6:	bfb8      	it	lt
 8010cf8:	4618      	movlt	r0, r3
 8010cfa:	e7a6      	b.n	8010c4a <_printf_i+0x15e>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	4632      	mov	r2, r6
 8010d00:	4649      	mov	r1, r9
 8010d02:	4640      	mov	r0, r8
 8010d04:	47d0      	blx	sl
 8010d06:	3001      	adds	r0, #1
 8010d08:	d09d      	beq.n	8010c46 <_printf_i+0x15a>
 8010d0a:	3501      	adds	r5, #1
 8010d0c:	68e3      	ldr	r3, [r4, #12]
 8010d0e:	9903      	ldr	r1, [sp, #12]
 8010d10:	1a5b      	subs	r3, r3, r1
 8010d12:	42ab      	cmp	r3, r5
 8010d14:	dcf2      	bgt.n	8010cfc <_printf_i+0x210>
 8010d16:	e7eb      	b.n	8010cf0 <_printf_i+0x204>
 8010d18:	2500      	movs	r5, #0
 8010d1a:	f104 0619 	add.w	r6, r4, #25
 8010d1e:	e7f5      	b.n	8010d0c <_printf_i+0x220>
 8010d20:	08011173 	.word	0x08011173
 8010d24:	08011184 	.word	0x08011184

08010d28 <memmove>:
 8010d28:	4288      	cmp	r0, r1
 8010d2a:	b510      	push	{r4, lr}
 8010d2c:	eb01 0402 	add.w	r4, r1, r2
 8010d30:	d902      	bls.n	8010d38 <memmove+0x10>
 8010d32:	4284      	cmp	r4, r0
 8010d34:	4623      	mov	r3, r4
 8010d36:	d807      	bhi.n	8010d48 <memmove+0x20>
 8010d38:	1e43      	subs	r3, r0, #1
 8010d3a:	42a1      	cmp	r1, r4
 8010d3c:	d008      	beq.n	8010d50 <memmove+0x28>
 8010d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d46:	e7f8      	b.n	8010d3a <memmove+0x12>
 8010d48:	4402      	add	r2, r0
 8010d4a:	4601      	mov	r1, r0
 8010d4c:	428a      	cmp	r2, r1
 8010d4e:	d100      	bne.n	8010d52 <memmove+0x2a>
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d5a:	e7f7      	b.n	8010d4c <memmove+0x24>

08010d5c <_sbrk_r>:
 8010d5c:	b538      	push	{r3, r4, r5, lr}
 8010d5e:	4d06      	ldr	r5, [pc, #24]	@ (8010d78 <_sbrk_r+0x1c>)
 8010d60:	2300      	movs	r3, #0
 8010d62:	4604      	mov	r4, r0
 8010d64:	4608      	mov	r0, r1
 8010d66:	602b      	str	r3, [r5, #0]
 8010d68:	f7f3 faae 	bl	80042c8 <_sbrk>
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	d102      	bne.n	8010d76 <_sbrk_r+0x1a>
 8010d70:	682b      	ldr	r3, [r5, #0]
 8010d72:	b103      	cbz	r3, 8010d76 <_sbrk_r+0x1a>
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	200078f0 	.word	0x200078f0

08010d7c <_realloc_r>:
 8010d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d80:	4607      	mov	r7, r0
 8010d82:	4614      	mov	r4, r2
 8010d84:	460d      	mov	r5, r1
 8010d86:	b921      	cbnz	r1, 8010d92 <_realloc_r+0x16>
 8010d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8c:	4611      	mov	r1, r2
 8010d8e:	f7ff bc5b 	b.w	8010648 <_malloc_r>
 8010d92:	b92a      	cbnz	r2, 8010da0 <_realloc_r+0x24>
 8010d94:	f7ff fbec 	bl	8010570 <_free_r>
 8010d98:	4625      	mov	r5, r4
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da0:	f000 f81a 	bl	8010dd8 <_malloc_usable_size_r>
 8010da4:	4284      	cmp	r4, r0
 8010da6:	4606      	mov	r6, r0
 8010da8:	d802      	bhi.n	8010db0 <_realloc_r+0x34>
 8010daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010dae:	d8f4      	bhi.n	8010d9a <_realloc_r+0x1e>
 8010db0:	4621      	mov	r1, r4
 8010db2:	4638      	mov	r0, r7
 8010db4:	f7ff fc48 	bl	8010648 <_malloc_r>
 8010db8:	4680      	mov	r8, r0
 8010dba:	b908      	cbnz	r0, 8010dc0 <_realloc_r+0x44>
 8010dbc:	4645      	mov	r5, r8
 8010dbe:	e7ec      	b.n	8010d9a <_realloc_r+0x1e>
 8010dc0:	42b4      	cmp	r4, r6
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	bf28      	it	cs
 8010dc8:	4632      	movcs	r2, r6
 8010dca:	f7ff fbc3 	bl	8010554 <memcpy>
 8010dce:	4629      	mov	r1, r5
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	f7ff fbcd 	bl	8010570 <_free_r>
 8010dd6:	e7f1      	b.n	8010dbc <_realloc_r+0x40>

08010dd8 <_malloc_usable_size_r>:
 8010dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ddc:	1f18      	subs	r0, r3, #4
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bfbc      	itt	lt
 8010de2:	580b      	ldrlt	r3, [r1, r0]
 8010de4:	18c0      	addlt	r0, r0, r3
 8010de6:	4770      	bx	lr

08010de8 <_init>:
 8010de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dea:	bf00      	nop
 8010dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dee:	bc08      	pop	{r3}
 8010df0:	469e      	mov	lr, r3
 8010df2:	4770      	bx	lr

08010df4 <_fini>:
 8010df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df6:	bf00      	nop
 8010df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dfa:	bc08      	pop	{r3}
 8010dfc:	469e      	mov	lr, r3
 8010dfe:	4770      	bx	lr
